image: quay.io/openshift-community-operators/cluster-impairment-operator@sha256:6fd114eb8f525f670e505373c2999a4e66b53beda988e99b267204d2fe0e1b4f
name: cluster-impairment-operator.v1.0.4
package: cluster-impairment-operator
properties:
  - type: olm.gvk
    value:
      group: apps.redhat.com
      kind: ClusterImpairment
      version: v1alpha1
  - type: olm.package
    value:
      packageName: cluster-impairment-operator
      version: 1.0.4
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoiY2x1c3Rlci1pbXBhaXJtZW50LW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci1tZXRyaWNzLXNlcnZpY2UifSwic3BlYyI6eyJwb3J0cyI6W3sibmFtZSI6Imh0dHBzIiwicG9ydCI6ODQ0MywidGFyZ2V0UG9ydCI6Imh0dHBzIn1dLCJzZWxlY3RvciI6eyJjb250cm9sLXBsYW5lIjoiY29udHJvbGxlci1tYW5hZ2VyIn19LCJzdGF0dXMiOnsibG9hZEJhbGFuY2VyIjp7fX19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjY3ODlcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogODExYzlkYzUucmVkaGF0LmNvbVxuIn0sImtpbmQiOiJDb25maWdNYXAiLCJtZXRhZGF0YSI6eyJuYW1lIjoiY2x1c3Rlci1pbXBhaXJtZW50LW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiY2x1c3Rlci1pbXBhaXJtZW50LW9wZXJhdG9yLW1ldHJpY3MtcmVhZGVyIn0sInJ1bGVzIjpbeyJub25SZXNvdXJjZVVSTHMiOlsiL21ldHJpY3MiXSwidmVyYnMiOlsiZ2V0Il19XX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoib3BlcmF0b3JzLmNvcmVvcy5jb20vdjFhbHBoYTEiLCJraW5kIjoiQ2x1c3RlclNlcnZpY2VWZXJzaW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiYWxtLWV4YW1wbGVzIjoiW1xuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwiYXBwcy5yZWRoYXQuY29tL3YxYWxwaGExXCIsXG4gICAgXCJraW5kXCI6IFwiQ2x1c3RlckltcGFpcm1lbnRcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwibmFtZVwiOiBcImFsbC1pbXBhaXJtZW50c1wiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJkdXJhdGlvblwiOiA0ODAsXG4gICAgICBcImVncmVzc1wiOiB7XG4gICAgICAgIFwiYmFuZHdpZHRoXCI6IDEwMDAwLFxuICAgICAgICBcImxhdGVuY3lcIjogNTAsXG4gICAgICAgIFwibG9zc1wiOiAwLjAyXG4gICAgICB9LFxuICAgICAgXCJpbmdyZXNzXCI6IHtcbiAgICAgICAgXCJiYW5kd2lkdGhcIjogMTAwMDAsXG4gICAgICAgIFwibGF0ZW5jeVwiOiA1MCxcbiAgICAgICAgXCJsb3NzXCI6IDAuMDJcbiAgICAgIH0sXG4gICAgICBcImludGVyZmFjZXNcIjogW1xuICAgICAgICBcImVuczJmMFwiXG4gICAgICBdLFxuICAgICAgXCJsaW5rRmxhcHBpbmdcIjoge1xuICAgICAgICBcImRvd25UaW1lXCI6IDMwLFxuICAgICAgICBcImVuYWJsZVwiOiB0cnVlLFxuICAgICAgICBcInVwVGltZVwiOiAxMjBcbiAgICAgIH0sXG4gICAgICBcInN0YXJ0RGVsYXlcIjogNVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcImFwcHMucmVkaGF0LmNvbS92MWFscGhhMVwiLFxuICAgIFwia2luZFwiOiBcIkNsdXN0ZXJJbXBhaXJtZW50XCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJkdXBsaWNhdGlvblwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJkdXJhdGlvblwiOiA2MCxcbiAgICAgIFwiZWdyZXNzXCI6IHtcbiAgICAgICAgXCJkdXBsaWNhdGlvblwiOiAyNVxuICAgICAgfSxcbiAgICAgIFwiaW5ncmVzc1wiOiB7XG4gICAgICAgIFwiZHVwbGljYXRpb25cIjogMjVcbiAgICAgIH0sXG4gICAgICBcImludGVyZmFjZXNcIjogW1xuICAgICAgICBcImVuczNcIlxuICAgICAgXSxcbiAgICAgIFwic3RhcnREZWxheVwiOiA1XG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwiYXBwcy5yZWRoYXQuY29tL3YxYWxwaGExXCIsXG4gICAgXCJraW5kXCI6IFwiQ2x1c3RlckltcGFpcm1lbnRcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwibmFtZVwiOiBcInR3by1taW4tZmxhcFwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJkdXJhdGlvblwiOiA0ODAsXG4gICAgICBcImludGVyZmFjZXNcIjogW1xuICAgICAgICBcImVuczJmMFwiXG4gICAgICBdLFxuICAgICAgXCJsaW5rRmxhcHBpbmdcIjoge1xuICAgICAgICBcImRvd25UaW1lXCI6IDEyMCxcbiAgICAgICAgXCJlbmFibGVcIjogdHJ1ZSxcbiAgICAgICAgXCJ1cFRpbWVcIjogMTIwXG4gICAgICB9LFxuICAgICAgXCJzdGFydERlbGF5XCI6IDVcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcImFwaVZlcnNpb25cIjogXCJhcHBzLnJlZGhhdC5jb20vdjFhbHBoYTFcIixcbiAgICBcImtpbmRcIjogXCJDbHVzdGVySW1wYWlybWVudFwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJuYW1lXCI6IFwidHlwaWNhbC1zY2VuYXJpb1wiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJkdXJhdGlvblwiOiAzMCxcbiAgICAgIFwiZWdyZXNzXCI6IHtcbiAgICAgICAgXCJsYXRlbmN5XCI6IDUwXG4gICAgICB9LFxuICAgICAgXCJpbmdyZXNzXCI6IHtcbiAgICAgICAgXCJsYXRlbmN5XCI6IDUwXG4gICAgICB9LFxuICAgICAgXCJpbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJlbnMyZjBcIixcbiAgICAgICAgXCJlbm8xXCJcbiAgICAgIF0sXG4gICAgICBcImxvc3NcIjogMC4wMixcbiAgICAgIFwic3RhcnREZWxheVwiOiA1XG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwiYXBwcy5yZWRoYXQuY29tL3YxYWxwaGExXCIsXG4gICAgXCJraW5kXCI6IFwiQ2x1c3RlckltcGFpcm1lbnRcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwibmFtZVwiOiBcInVuZXZlbi1sYXRlbmN5XCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImR1cmF0aW9uXCI6IDYwLFxuICAgICAgXCJlZ3Jlc3NcIjoge1xuICAgICAgICBcImxhdGVuY3lcIjogMTAwXG4gICAgICB9LFxuICAgICAgXCJpbmdyZXNzXCI6IHtcbiAgICAgICAgXCJsYXRlbmN5XCI6IDEwXG4gICAgICB9LFxuICAgICAgXCJpbnRlcmZhY2VzXCI6IFtcbiAgICAgICAgXCJlbnMyZjBcIlxuICAgICAgXSxcbiAgICAgIFwibm9kZVNlbGVjdG9yXCI6IHtcbiAgICAgICAgXCJrZXlcIjogXCJub2RlLXJvbGUua3ViZXJuZXRlcy5pby93b3JrZXJcIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJzdGFydERlbGF5XCI6IDVcbiAgICB9XG4gIH1cbl0iLCJjYXBhYmlsaXRpZXMiOiJCYXNpYyBJbnN0YWxsIiwiY2F0ZWdvcmllcyI6Ik5ldHdvcmtpbmcsIERldmVsb3BlciBUb29scyIsImNvbnRhaW5lckltYWdlIjoicXVheS5pby9yZWRoYXQtcGVyZm9ybWFuY2UvY2x1c3Rlci1pbXBhaXJtZW50LW9wZXJhdG9yOjEuMC40IiwiY3JlYXRlZEF0IjoiMjAyMS0wOC0xMSAxMjoxNTowMCIsImRlc2NyaXB0aW9uIjoiUnVuIEltcGFpcm1lbnRzIG9uIEt1YmVybmV0ZXMvT3BlbnNoaWZ0IE5vZGVzIiwib3BlcmF0b3JzLm9wZXJhdG9yZnJhbWV3b3JrLmlvL2J1aWxkZXIiOiJvcGVyYXRvci1zZGstdjEuMTAuMCtnaXQiLCJvcGVyYXRvcnMub3BlcmF0b3JmcmFtZXdvcmsuaW8vcHJvamVjdF9sYXlvdXQiOiJhbnNpYmxlLnNkay5vcGVyYXRvcmZyYW1ld29yay5pby92MSIsInJlcG9zaXRvcnkiOiJodHRwczovL2dpdGh1Yi5jb20vcmVkaGF0LXBlcmZvcm1hbmNlL2NsdXN0ZXItaW1wYWlybWVudC1vcGVyYXRvciJ9LCJuYW1lIjoiY2x1c3Rlci1pbXBhaXJtZW50LW9wZXJhdG9yLnYxLjAuNCIsIm5hbWVzcGFjZSI6InBsYWNlaG9sZGVyIn0sInNwZWMiOnsiYXBpc2VydmljZWRlZmluaXRpb25zIjp7fSwiY3VzdG9tcmVzb3VyY2VkZWZpbml0aW9ucyI6eyJvd25lZCI6W3sia2luZCI6IkNsdXN0ZXJJbXBhaXJtZW50IiwibmFtZSI6ImNsdXN0ZXJpbXBhaXJtZW50cy5hcHBzLnJlZGhhdC5jb20iLCJ2ZXJzaW9uIjoidjFhbHBoYTEifV19LCJkZXNjcmlwdGlvbiI6ImNsdXN0ZXItaW1wYWlybWVudC1vcGVyYXRvciBpcyBhbiBvcGVyYXRvciBkZXNpZ25lZCB0byBhdXRvbWF0ZSB0aGUgYXBwbGljYXRpb24gb2YgaW1wYWlybWVudHMgdG8gdGhlIG5vZGVzIGluIGEgY2x1c3Rlci5cblxuIyMgRmVhdHVyZXNcblxuVHJhZmZpYyBEaXJlY3Rpb246XG5cbiogRWdyZXNzIGltcGFpcm1lbnRzIGFmZmVjdCB0aGUgdHJhZmZpYyBnb2luZyBvdXQuICAgIFxuKiBJbmdyZXNzIGltcGFpcm1lbnRzIGFmZmVjdCB0aGUgdHJhZmZpYyBjb21pbmcgaW4uIChJbmdyZXNzIGltcGFpcm1lbnRzIHJlcXVpcmUgdGhlIGtlcm5lbCBtb2R1bGUgSUZCLilcblxuIyMjIEltcGFpcm1lbnRzXG5cbnwgSW1wYWlybWVudCAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFVuaXQgICAgfCBVc2VzIE5ldGVtIHwgQ29ycmVsYXRpb24gU3VwcG9ydGVkIHxcbnwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbnwgQmFuZHdpZHRoICAgICB8IFRoZSBiYW5kd2lkdGggbGltaXQgICAgICAgICAgICAgICAgICAgICAgICB8IGtiaXQvcyAgfCBZZXMgICAgICAgIHwgTm8gICAgICAgICAgICAgICAgICAgIHxcbnwgTGF0ZW5jeSAgICAgICB8IFRoZSBkZWxheSBvZiB0aGUgcGFja2V0cyAgICAgICAgICAgICAgICAgICB8IG1zICAgICAgfCBZZXMgICAgICAgIHwgWWVzICAgICAgICAgICAgICAgICAgIHxcbnwgUGFja2V0IExvc3MgICB8IFRoZSBwZXJjZW50IG9mIHBhY2tldHMgdGhhdCBhcmUgZHJvcHBlZCAgICB8IHBlcmNlbnQgfCBZZXMgICAgICAgIHwgWWVzICAgICAgICAgICAgICAgICAgIHxcbnwgQ29ycnVwdGlvbiAgICB8IFRoZSBwZXJjZW50IG9mIHBhY2tldHMgdGhhdCBhcmUgY29ycnVwdGVkICB8IHBlcmNlbnQgfCBZZXMgICAgICAgIHwgWWVzICAgICAgICAgICAgICAgICAgIHxcbnwgRHVwbGljYXRpb24gICB8IFRoZSBwZXJjZW50IG9mIHBhY2tldHMgdGhhdCBhcmUgZHVwbGljYXRlZCB8IHBlcmNlbnQgfCBZZXMgICAgICAgIHwgWWVzICAgICAgICAgICAgICAgICAgIHxcbnwgTGluayBGbGFwcGluZyB8IFR1cm5zIHRoZSBpbnRlcmZhY2Ugb24gYW5kIG9mZiAgICAgICAgICAgICB8IGJvb2wgICAgfCBObyAgICAgICAgIHwgTm8gICAgICAgICAgICAgICAgICAgIHxcblxuXG5PbiB0aGUgdGVzdGVkIGVudmlyb25tZW50IChSSEVMIENvcmVPUyA0OC44NCksIHRoZSBpbXBhaXJtZW50cyBjYW4gYmUgdXNlZCBhbG9uZ3NpZGUgbGluayBmbGFwcGluZy5cblxuXG4jIyMjIExhdGVuY3kgT3B0aW9uc1xuXG5JbiBhZGRpdGlvbiB0byBzaW1wbHkgZGVsYXlpbmcgdGhlIHBhY2tldHMsIHRoZXJlIGFyZSBhZHZhbmNlZCBsYXRlbmN5IG9wdGlvbnMuXG5cbiMjIyMjIEppdHRlclxuXG5TZW1pLXJhbmRvbWx5IGFkZHMgb3Igc3VidHJhY3RzIGZyb20gdGhlIGxhdGVuY3kgYWNjb3JkaW5nIHRvIHRoZSBkaXN0cmlidXRpb24gdXAgdG8gdGhlIGFtb3VudCBzcGVjaWZpZWQuXG5JZiBsYXRlbmN5IGlzIDEwMG1zLCBhbmQgaml0dGVyIGlzIDEwbXMsIHRoZSBhY3R1YWwgbGF0ZW5jeSB3aWxsIHZhcnkgMTAwwrExMG1zLlxuXG5cbiMjIyMjIERpc3RyaWJ1dGlvblxuXG5UaGUgZGlzdHJpYnV0aW9uIG9mIHRoZSBqaXR0ZXIuIFRoZSBvcHRpb25zIGFyZTpcbiogTm9ybWFsXG4qIFVuaWZvcm1cbiogUGFyZXRvXG4qIFBhcmV0b25vcm1hbFxuXG4jIyMjIyBKaXR0ZXIgY29ycmVsYXRpb25cblxuVGhlIHBlcmNlbnQgY2hhbmNlIHRoYXQgdGhlIG5leHQgbGF0ZW5jeSdzIGppdHRlciB2YWx1ZSB3aWxsIGNvcnJlbGF0ZSB3aXRoIHRoZSBwcmVjZWVkaW5nIGxhdGVuY3kuXG5cbiMjIyMjIFJlb3JkZXJcblxuVGhlIHBlcmNlbnRhZ2Ugb2YgcGFja2V0cyB0aGF0IGFyZSBub3QgZGVsYXllZCwgY2F1c2luZyBhIHJlb3JkZXIgZHVlIHRvIHRoZW0gYmVpbmcgc2VudCBiZWZvcmUgdGhlIGRlbGF5ZWQgb25lcy5cbkFwcGx5aW5nIGppdHRlciBpdHNlbGYgaGFzIHRoZSBwb3RlbnRpYWwgdG8gYWxzbyBjYXVzZSByZW9yZGVyaW5nLlxuXG4jIyMjIyBSZW9yZGVyIGNvcnJlbGF0aW9uXG5cblRoZSBwZXJjZXQgY2hhbmNlIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgbmV4dCByZW9yZGVyIHdpbGwgY29ycmVsYXRlIHdpdGggdGhlIHByZWNlZWRpbmcgdmFsdWUuXG5cbiMjIyMgTG9zcyBvcHRpb25zXG5cbiMjIyMjIENvcnJlbGF0aW9uXG5cblRoZSBwZXJjZW50IGNoYW5jZSB0aGF0IHRoZSBwcmV2aW91cyBsb3NzIHZhbHVlIGZvciBhIHBhY2tldCBjb3JyZWxhdGVzIHdpdGggdGhlIGxvc3MgdmFsdWUgZm9yIHRoZSBuZXh0IHBhY2tldC5cblxuIyMjIyBDb3JydXB0aW9uIG9wdGlvbnNcblxuIyMjIyMjIENvcnJ1cHRpb25cblxuVGhlIHBlcmNlbnQgY2hhbmNlIHRoYXQgZWFjaCBwYWNrZXQgd2lsbCBiZSBjb3JydXB0ZWQuXG5cbiMjIyMjIENvcnJ1cHRpb24gY29ycmVsYXRpb25cblxuVGhlIHBlcmNldCBjaGFuY2UgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSBuZXh0IGNvcnJ1cHRpb24gd2lsbCBjb3JyZWxhdGUgd2l0aCB0aGUgcHJlY2VlZGluZyB2YWx1ZS5cblxuIyMjIyBEdXBsaWNhdGlvbiBvcHRpb25zXG5cbiMjIyMjIER1cGxpY2F0aW9uXG5cblRoZSBwZXJjZW50IGNoYW5jZSB0aGF0IGVhY2ggcGFja2V0IHdpbGwgYmUgZHVwbGljYXRlZC5cblxuIyMjIyMgRHVwbGljYXRpb24gY29ycmVsYXRpb25cblxuVGhlIHBlcmNldCBjaGFuY2UgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSBuZXh0IGR1cGxpY2F0aW9uIHdpbGwgY29ycmVsYXRlIHdpdGggdGhlIHByZWNlZWRpbmcgdmFsdWUuXG5cblxuXG4jIyBDb25maWd1cmF0aW9uXG5cbkhlcmUgaXMgYW4gZXhhbXBsZSBvZiB0aGUgQ2x1c3RlckltcGFpcm1lbnQgY3VzdG9tIHJlc291cmNlLlxuXG5cbmBgYFxuXG5hcGlWZXJzaW9uOiBhcHBzLnJlZGhhdC5jb20vdjFhbHBoYTFcbmtpbmQ6IENsdXN0ZXJJbXBhaXJtZW50XG5tZXRhZGF0YTpcbiAgbmFtZTogdGVzdC1pbXBhaXJtZW50LWNyXG5zcGVjOlxuICBkdXJhdGlvbjogMzAgIyBzZWNvbmRzXG4gIHN0YXJ0RGVsYXk6IDUgIyBzZWNvbmRzLiBJdCB0eXBpY2FsbHkgdGFrZXMgYWJvdXQgMi0zIHNlY29uZHMgZm9yIHRoZSBEYWVtb25zZXQgdG8gcnVuXG4gIGludGVyZmFjZXM6XG4gIC0gXCJlbnMyZjBcIlxuICBpbmdyZXNzOiAjIHVzZXMgaWZiXG4gICAgYmFuZHdpZHRoOiAwICMga2JpdFxuICAgIGxhdGVuY3k6IDEwICMgbXNcbiAgICBsYXRlbmN5T3B0aW9uczpcbiAgICAgIGppdHRlcjogNSAjIG1zXG4gICAgICBqaXR0ZXJDb3JyZWxhdGlvbjogMjUgIyBwZXJjZW50XG4gICAgICBkaXN0cmlidXRpb246IG5vcm1hbFxuICAgICAgcmVvcmRlcjogMjUgIyBwZXJjZW50IG9mIHBhY2tldHMgdGhhdCB3aWxsIHNraXAgdGhlIGRlbGF5XG4gICAgICByZW9yZGVyQ29ycmVsYXRpb246IDI1ICMgcGVyY2VudFxuICAgIGxvc3M6IDAgIyBwZXJjZW50XG4gICAgbG9zc09wdGlvbnM6XG4gICAgICBjb3JyZWxhdGlvbjogMjUgIyBwZXJjZW50XG4gICAgY29ycnVwdGlvbjogMC4xICMgcGVyY2VudFxuICAgIGNvcnJ1cHRpb25PcHRpb25zOlxuICAgICAgY29ycmVsYXRpb246IDI1ICMgcGVyY2VudFxuICAgIGR1cGxpY2F0aW9uOiAxICMgcGVyY2VudFxuICAgIGR1cGxpY2F0aW9uT3B0aW9uczpcbiAgICAgIGNvcnJlbGF0aW9uOiAyNSAjIHBlcmNlbnRcbiAgZWdyZXNzOlxuICAgIGJhbmR3aWR0aDogMCAjIGtiaXRcbiAgICBsYXRlbmN5OiAxMDAgIyBtc1xuICAgIGxvc3M6IDAgIyBwZXJjZW50XG4gIGxpbmtGbGFwcGluZzpcbiAgICBlbmFibGU6IGZhbHNlXG4gICAgZG93blRpbWU6IDMgIyBTZWNvbmRzXG4gICAgdXBUaW1lOiAzICMgU2Vjb25kc1xuICBub2RlU2VsZWN0b3I6XG4gICAga2V5OiBcIm5vZGUtcm9sZS5rdWJlcm5ldGVzLmlvL3dvcmtlclwiXG4gICAgdmFsdWU6IFwiXCJcbiAgICBcbmBgYFxuXG4jIyMjIEludGVyZmFjZXNcblxuVGhlIGludGVyZmFjZXMgY29uZmlndXJhdGlvbiBvcHRpb24gaXMgYSBsaXN0IG9mIGFsbCBpbnRlcmZhY2VzIHRoYXQgdGhlIGltcGFpcm1lbnRzIHNob3VsZCBiZSBhcHBsaWVkIHRvLiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiB3aWxsIGVycm9yIG91dCBvbmNlIGl0IGhpdHMgYW4gaW52YWxpZCBpbnRlcmZhY2UuXG5cbklmIGFuIGludmFsaWQgaW50ZXJmYWNlIGlzIGZvdW5kLCBpdCB3aWxsIHByaW50IG91dCB0aGUgbGlzdCBvZiBpbnRlcmZhY2VzLlxuXG4jIyMjIE5vZGUgU2VsZWN0b3JcblxuVGhlIGRlZmF1bHQgbm9kZSBzZWxlY3RvciBpcyBhbGwgd29ya2VyIG5vZGVzLCBidXQgeW91IGNhbiBjaGFuZ2UgaXQgdG8gd2hhdGV2ZXIgbm9kZSBzZWxlY3RvciB5b3Ugd2FudCBieSBzZXR0aW5nIHRoZSBrZXkgYW5kIHZhbHVlLlxuVGhlcmUgaXMgYSB0b2xlcmF0aW9uIHRvIGFsbG93IGl0IHRvIHJ1biBvbiBtYXN0ZXIgbm9kZXMgaWYgdGhlIG5vZGUgc2VsZWN0b3IgaW5jbHVkZXMgbWFzdGVyIG5vZGVzLlxuXG4jIyMjIER1cmF0aW9uXG5cblRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0aGUgaW1wYWlybWVudHMgc2hvdWxkIHJ1bi4gSXQgd2lsbCB0cnkgdG8gc3luYyB0aGUgc3RhcnQgYW5kIGVuZCB0aW1lIGJldHdlZW4gYWxsIHBvZHMuXG5JZiBzZXQgdG8gLTEsIGl0IHdpbGwgcnVuIGluZGVmaW5pdGVseSAoYSB5ZWFyKSwgdW50aWwgeW91IHJlbW92ZSB0aGUgQ2x1c3RlckltcGFpcm1lbnQgY3VzdG9tIHJlc291cmNlLiBUaGlzIGlzIGdvb2QgZm9yIHRlc3RpbmcgdGhhdCByZXF1aXJlcyBzdGVhZHkgaW1wYWlybWVudHMuXG5cbklmIHRoZSBzY3JpcHQgaXMgbGluayBmbGFwcGluZywgc2V0IHRoaXMgdmFsdWUgdG8gYmUgc2hvcnQgZW5vdWdoIHNvIHRoYXQgaWYgdGhlIGxpbmsgZmxhcCBpbnRlcnJ1cHRzIGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGUgbm9kZXMsIHRoZSBkYWVtb25zZXQgd2lsbCByZW1vdmUgaXRzZWxmLlxuXG4jIyMjIFN0YXJ0IERlbGF5XG5cblRoZSBkZWxheSBiZWZvcmUgc3RhcnRpbmcgdGhlIHNjcmlwdC4gSWYgeW91IHdhbnQgdGhlIHBvZHMgdG8gYmUgaW4gc3luYywgYSBtaW5pbXVtIG9mIGEgZmV3IHNlY29uZHMgc2hvdWxkIGJlIHVzZWQgYmVjYXVzZSB0aGUgcG9kcyB0YWtlIHRpbWUgdG8gc3RhcnQgdXAuXG5cbllvdSBjYW4gYWxzbyB1dGlsaXplIHRoaXMgZmVhdHVyZSB0byBydW4gYW4gc2VwYXJhdGUgaW1wYWlybWVudCBhZnRlciBhbm90aGVyLiBKdXN0IGFwcGx5IHR3byByZXNvdXJjZXMgYXQgdGhlIHNhbWUgdGltZSwgYnV0IGFkZCB0aGUgZHVyYXRpb24gYW5kIHN0YXJ0IGRlbGF5IG9mIHRoZSBmaXJzdCB0byB0aGUgc3RhcnQgZGVsYXkgb2YgdGhlIHNlY29uZC5cblxuIyMjIyBJbmdyZXNzIGFuZCBFZ3Jlc3NcblxuVGhlIGNvbmZpZ3VyYXRpb24gc2VjdGlvbnMgXCJpbmdyZXNzXCIgYW5kIFwiZWdyZXNzXCIgYXBwbHkgdG8gZWFjaCBkaXJlY3Rpb24uXG5cbiMjIyMjIEV4YW1wbGVzOlxuXG4jIyMjIyBFeGFtcGxlIDFcblxuXG5JbiB0aGlzIGV4YW1wbGUsIGVncmVzcyBsYXRlbmN5IGlzIHNldCB0byAxMDBtcywgYnV0IHRoZSBpbmdyZXNzIGxhdGVuY3kgaXMgc2V0IHRvIDEwbXMuIFNvIHRoZSBsYXRlbmN5IHRvIHRoZSBpbnRlcmZhY2Ugd2lsbCBlbmQgdXAgYmVpbmcgMTBtcywgYnV0IDEwMG1zIGdvaW5nIG91dC4gV2hlbiBwaW5naW5nLCB0aGlzIHdpbGwgcmVzdWx0IGluIDExMG1zIG9mIGxhdGVuY3kuXG5cbmBgYFxuXG5hcGlWZXJzaW9uOiBhcHBzLnJlZGhhdC5jb20vdjFhbHBoYTFcbmtpbmQ6IENsdXN0ZXJJbXBhaXJtZW50XG5tZXRhZGF0YTpcbiAgbmFtZTogdW5ldmVuLWxhdGVuY3lcbnNwZWM6XG4gIGR1cmF0aW9uOiA2MFxuICBzdGFydERlbGF5OiA1XG4gIGludGVyZmFjZXM6XG4gIC0gXCJlbnMyZjBcIlxuICBpbmdyZXNzOlxuICAgIGxhdGVuY3k6IDEwICMgbXNcbiAgZWdyZXNzOlxuICAgIGxhdGVuY3k6IDEwMCAjIG1zXG5cbmBgYFxuXG4jIyMjIyBFeGFtcGxlIDJcblxuXG5JbiB0aGlzIGV4YW1wbGUsIGxpbmsgZmxhcHBpbmcgd2lsbCBiZSBlbmFibGVkLCBhbmQgaXQgd2lsbCB0dXJuIHRoZSBpbnRlcmZhY2Ugb24gYW5kIG9mZiBldmVyeSAyIG1pbnV0ZXMuIFRoYXQgaXMgbG9uZyBlbm91Z2ggZm9yIGt1YmVybmV0ZXMgdG8gZGV0ZXJtaW5lIHRoYXQgYSBub2RlIGlzIHVuYXZhaWxhYmxlLlxuXG5gYGBcblxuYXBpVmVyc2lvbjogYXBwcy5yZWRoYXQuY29tL3YxYWxwaGExXG5raW5kOiBDbHVzdGVySW1wYWlybWVudFxubWV0YWRhdGE6XG4gIG5hbWU6IHR3by1taW4tZmxhcFxuc3BlYzpcbiAgZHVyYXRpb246IDQ4MFxuICBzdGFydERlbGF5OiA1XG4gIGludGVyZmFjZXM6XG4gIC0gXCJlbnMyZjBcIlxuICBsaW5rRmxhcHBpbmc6XG4gICAgZW5hYmxlOiB0cnVlXG4gICAgZG93blRpbWU6IDEyMCAjIFNlY29uZHNcbiAgICB1cFRpbWU6IDEyMCAjIFNlY29uZHNcblxuYGBgXG5cbiMjIyMjIEV4YW1wbGUgM1xuXG5cbkluIHRoaXMgZXhhbXBsZSwgYSByZWFsaXN0aWMgc2V0IG9mIGltcGFpcm1lbnRzIGlzIGFwcGxpZWQgdG8gYGVuczJmMGAgYW5kIGBlbm8xYCBmb3IgMzAgc2Vjb25kczpcblxuYGBgXG5cbmFwaVZlcnNpb246IGFwcHMucmVkaGF0LmNvbS92MWFscGhhMVxua2luZDogQ2x1c3RlckltcGFpcm1lbnRcbm1ldGFkYXRhOlxuICBuYW1lOiB0eXBpY2FsLXNjZW5hcmlvXG5zcGVjOlxuICBkdXJhdGlvbjogMzAgIyBzZWNvbmRzXG4gIHN0YXJ0RGVsYXk6IDUgIyBzZWNvbmRzXG4gIGludGVyZmFjZXM6XG4gIC0gXCJlbnMyZjBcIlxuICAtIFwiZW5vMVwiXG4gIGVncmVzczpcbiAgICBsYXRlbmN5OiA1MCAjIG1zLiBCaWRpcmVjdGlvbmFsLCBzbyB0b3RhbCBvZiAxMDBtc1xuICBpbmdyZXNzOlxuICAgIGxhdGVuY3k6IDUwICMgbXMuIEJpZGlyZWN0aW9uYWwsIHNvIHRvdGFsIG9mIDEwMG1zXG4gIGxvc3M6IDAuMDIgIyBwZXJjZW50XG5cbmBgYFxuXG4jIyMjIyBFeGFtcGxlIDRcblxuXG5JbiB0aGlzIGV4YW1wbGUsIGEgY29tYmluYXRpb24gb2YgbGF0ZW5jeSwgcGFja2V0IGxvc3MsIGJhbmR3aWR0aCwgYW5kIGxpbmsgZmxhcHBpbmcgaXMgYXBwbGllZC5cblxuYGBgXG5cbmFwaVZlcnNpb246IGFwcHMucmVkaGF0LmNvbS92MWFscGhhMVxua2luZDogQ2x1c3RlckltcGFpcm1lbnRcbm1ldGFkYXRhOlxuICBuYW1lOiBhbGwtaW1wYWlybWVudHNcbnNwZWM6XG4gIGR1cmF0aW9uOiA0ODAgIyBzZWNvbmRzXG4gIHN0YXJ0RGVsYXk6IDUgIyBzZWNvbmRzXG4gIGludGVyZmFjZXM6XG4gIC0gXCJlbnMyZjBcIlxuICBlZ3Jlc3M6XG4gICAgbGF0ZW5jeTogNTAgIyBtcy4gQmlkaXJlY3Rpb25hbCwgc28gdG90YWwgb2YgMTAwbXNcbiAgICBsb3NzOiAwLjAyICMgcGVyY2VudFxuICAgIGJhbmR3aWR0aDogMTAwMCAjIDEwMDAga2JpdC9zLCBhYm91dCAxIG1iaXQvc1xuICBpbmdyZXNzOlxuICAgIGxhdGVuY3k6IDUwICMgbXMuIEJpZGlyZWN0aW9uYWwsIHNvIHRvdGFsIG9mIDEwMG1zXG4gICAgbG9zczogMC4wMiAjIHBlcmNlbnRcbiAgICBiYW5kd2lkdGg6IDEwMDAgIyAxMDAwIGtiaXQvcywgYWJvdXQgMSBtYml0L3NcbiAgbGlua0ZsYXBwaW5nOlxuICAgIGVuYWJsZTogdHJ1ZVxuICAgIGRvd25UaW1lOiAzMCAjIFNlY29uZHNcbiAgICB1cFRpbWU6IDEyMCAjIFNlY29uZHNcblxuYGBgXG5cbiMjIyMjIEV4YW1wbGUgNVxuXG5cbkluIHRoaXMgZXhhbXBsZSwgcGFja2V0IGR1cGxpY2FpdG9uIGlzIGFwcGxpZWQuXG5cblxuYGBgXG5cbmFwaVZlcnNpb246IGFwcHMucmVkaGF0LmNvbS92MWFscGhhMVxua2luZDogQ2x1c3RlckltcGFpcm1lbnRcbm1ldGFkYXRhOlxuICBuYW1lOiBkdXBsaWNhdGlvblxuc3BlYzpcbiAgZHVyYXRpb246IDYwXG4gIHN0YXJ0RGVsYXk6IDVcbiAgaW50ZXJmYWNlczpcbiAgLSBcImVuczNcIlxuICBpbmdyZXNzOlxuICAgIGR1cGxpY2F0aW9uOiAyNSAjIHBlcmNlbnRcbiAgZWdyZXNzOlxuICAgIGR1cGxpY2F0aW9uOiAyNSAjIHBlcmNlbnRcblxuYGBgXG5cbiMjIFNldHVwXG5cbiMjIyBSZXF1aXJlbWVudHNcblxuMS4gWW91IG5lZWQgYG1ha2VgIGluc3RhbGxlZC5cbjIuIFlvdSBuZWVkIGFjY2VzcyB0byB0aGUga3ViZXJuZXRlcyBjbHVzdGVyIHdpdGggYSBrdWJlY29uZmlnLlxuXG4jIyMgSW5zdGFsbGF0aW9uXG5cblRvIHJ1biB1c2luZyB0aGUgY3VycmVudCBsYXRlc3QgaW1hZ2U6XG4xLiBDbG9uZSB0aGUgcmVwb3NpdG9yeS5cbjIuIFJ1biBgbWFrZSBkZXBsb3lgIHdpdGggS1VCRUNPTkZJRyBlbnZpcm9ubWVudCB2YXJpYWJsZSBzZXQgdG8gdGhlIGxvY2F0aW9uIG9mIHRoZSBrdWJlY29uZmlnLlxuXG5UbyBydW4gd2l0aCB5b3VyIG93biBjb2RlLCB0aGVyZSBhcmUgbW9yZSBzdGVwcy5cbjEuIEZvcmsgdGhlIHJlcG9zaXRvcnkuXG4yLiBDbG9uZSB0byBhIG1hY2hpbmUgdGhhdCBoYXMgYWNjZXNzIHRvIHRoZSBLdWJlcm5ldGVzIGNsdXN0ZXIgYW5kIHRoZSBrdWJlY29uZmlnLlxuMy4gTW9kaWZ5IHRoZSBtYWtlZmlsZSB0byBjaGFuZ2UgdGhlIGBJTUdgIHZhcmlhYmxlIHRvIHlvdXIgaW1hZ2UgcmVwb3NpdG9yeS4gSWYgeW91IGRvIG5vdCBoYXZlIHBvZG1hbiBpbnN0YWxsZWQsIGFsc28gY2hhbmdlIHBvZG1hbiB0byBkb2NrZXIuXG40LiBSdW4gYG1ha2UgZG9ja2VyLWJ1aWxkYCB0aGVuIGBtYWtlIGRvY2tlci1wdXNoYC5cbjUuIFRoZW4gcnVuIGBtYWtlIGRlcGxveWBcblxuIyMjIERlcGxveWluZyBmcm9tIG9wZXJhdG9yLWh1YlxuXG4qSW1wb3J0YW50KiBZb3UgbXVzdCBtYW51YWxseSBhcHBseSB0aGUgc2VydmljZWFjY291bnQhXG5cbkZpcnN0LCBGb2xsb3cgdGhlIGluc3RydWN0aW9ucyBvbiB0aGlzIHNpdGUgdG8gZGVwbG95IGZyb20gaGVyZS5cblxuTmV4dCwgYXBwbHkgdGhlIG1hbmlmZXN0IFwic2VydmljZWFjY291bnQueWFtbFwiIGZyb20gdGhlIG1hbmlmZXN0cyBmb2xkZXIuXG5cblRoZW4geW91IGNhbiBhcHBseSB5b3VyIENsdXN0ZXJJbXBhaXJtZW50IHJlc291cmNlcy5cblxuIyMgUnVubmluZyBpbXBhaXJtZW50c1xuXG5GaXJzdCwgY29uZmlndXJlIGEgQ2x1c3RlckltcGFpcm1lbnQgdHlwZSdzIHNwZWMgd2l0aCB0aGUgaW5mb3JtYXRpb24gZm9yIHRoZSBpbXBhaXJtZW50IHlvdSB3YW50IHRvIHJ1bi4gTW9zdCBpbXBvcnRhbnRseSwgc2V0IHRoZSBpbnRlcmZhY2UocykuIFlvdSBjYW4gbGlzdCB0aGUgaW50ZXJmYWNlcyB3aXRoIGBpZmNvbmZpZ2AuIElmIGFuIGludmFsaWQgaW50ZXJmYWNlIGlzIHNldCwgdGhlIHBvZCdzIGxvZ3Mgd2lsbCBzaG93IGBpZmNvbmZpZ2Agb3V0cHV0LlxuXG5cbk9uY2UgdGhlIGNsdXN0ZXJpbXBhaXJtZW50IHR5cGUgaXMgc2V0LCBhcHBseSBpdCBhbmQgaXQgd2lsbCB3b3JrLlxuXG5cblRvIHJlLXJ1biBhbiBpbXBhaXJtZW50LCBkZWxldGUgdGhlIGltcGFpcm1lbnQgd2l0aCBgb2MgZGVsZXRlIC1mIHBhdGgvdG8vbWFuaWZlc3QueWFtbGAsIHRoZW4gYXBwbHkgaXQgYWdhaW4uXG5cblxuIyMgTGltaXRhdGlvbnNcblxuXG4jIyMgTXVsdGlwbGUgSW1wYWlybWVudHNcblxuXG5Zb3Ugc2hvdWxkIGF2b2lkIGFueSBjb25maWd1cmF0aW9ucyB0aGF0IGFwcGx5IGltcGFpcm1lbnRzIHRvIHRoZSBzYW1lIGludGVyZmFjZSBvbiB0aGUgc2FtZSBub2RlLiBUaGVyZSBhcmUgcG90ZW50aWFsIGNvbmZsaWN0cy4gVGhlIHdvcmtlciBwb2Qgd2lsbCBhdHRlbXB0IHRvIHJlbW92ZSBhbGwgaW1wYWlybWVudHMgb24gdGhhdCBpbnRlcmZhY2UgYmVmb3JlIGFwcGx5aW5nIG5ldyBvbmVzLlxuXG5cbkluc3RlYWQsIHRha2UgYWR2YW50YWdlIG9mIHRoZSBmdWxsIGNvbnRyb2wgb2YgYm90aCBpbmdyZXNzIGFuZCBlZ3Jlc3MgaW1wYWlybWVudHMgZnJvbSB3aXRoaW4gdGhlIHNhbWUgQ2x1c3RlckltcGFpcm1lbnQgcmVzb3VyY2UuXG5cblxuVGhlcmUgaXMgY3VycmVudGx5IGEgY29uZmlndXJlZCBsaW1pdCBvZiAyMCBDbHVzdGVySW1wYWlybWVudCByZXNvdXJjZXMgd29ya2luZyBhdCB0aGUgc2FtZSB0aW1lLiBJZiB0aGF0IGlzIGEgbGltaXRhdGlvbiBmb3IgeW91ciB1c2UgY2FzZSwgeW91IGNhbiBjaGFuZ2UgaXQgaW4gYGNvbmZpZy9tYW5hZ2VyL21hbmFnZXIueWFtbGAgb3IgeW91IGNhbiB0cnkgdG8gZmluZCBhIHdheSB0byBtYWtlIGVhY2ggQ2x1c3RlckltcGFpcm1lbnQgZG8gbW9yZS5cblxuIyMjIFRyYWZmaWMgQ29udHJvbCAoVEMpXG5cblRyYWZmaWMgY29udHJvbCBpcyBob3cgY2x1c3Rlci1pbXBhaXJtZW50LW9wZXJhdG9yIGFwcGxpZXMgdGhlIGxhdGVuY3ksIGJhbmR3aWR0aCwgYW5kIHBhY2tldCBsb3NzIGltcGFpcm1lbnRzLiBUaGUgbGltaXRhdGlvbiBpcyBkdWUgdG8gTGludXggbm90IGJlaW5nIHJlYWx0aW1lIG9wZXJhdGluZyBzeXN0ZW0sIHNvIHRoZSBpbXBhaXJtZW50IHdpbGwgbm90IGJlIHBlcmZlY3RseSBjb25zaXN0ZW50LlxuXG4jIyMgTGluayBGbGFwcGluZ1xuXG5XaGVuIGxpbmsgZmxhcHBpbmcsIGlmIHlvdSBmbGFwIHRoZSBsaW5rIHRoYXQgS3ViZXJuZXRlcyB1c2VzIHRvIGNvbW11bmljYXRlIHdpdGggdGhlIHBvZHMsIHlvdSBtYXkgYmUgdW5hYmxlIHRvIHJlbW92ZSB0aGUgcG9kIHVudGlsIHRoZSBsaW5rIGlzIG9uIGxvbmcgZW5vdWdoIGZvciBLdWJlcm5ldGVzIHRvIGNvbW11bmljYXRlIHdpdGggdGhlIGltcGFpcmVkIG5vZGUuXG5cblxuSW4gdGhpcyBjYXNlLCBpdCBpcyBoZWxwZnVsIHRvIHNldCB0aGUgZHVyYXRpb24gcHJvcGVybHkgaW5zdGVhZCBvZiBydW5uaW5nIGZvciBhbiBpbmRlZmluaXRlIG9yIGxhcmdlIGFtb3VudCBvZiB0aW1lLCBiZWNhdXNlIHRoZSBub2RlIHdpbGwgcHJvcGVybHkgZ28gYmFjayB0byB0aGUgdW5pbXBhaXJlZCBzdGF0ZSBhdCB0aGF0IHRpbWUuXG5cblxuSWYgdGhlIGNsdXN0ZXIgYmVjb21lcyBvZmZsaW5lIGR1ZSB0byB0aGUgbGluayBmbGFwcGluZyB3aGVuIHlvdSBkbyBub3Qgd2FudCBpdCB0byBiZSBvZmZsaW5lLCBzb2Z0IHJlc3RhcnRpbmcgdGhlIG5vZGVzIGFmdGVyIHJlbW92aW5nIHRoZSBjdXN0b20gcmVzb3VyY2Ugc2hvdWxkIHJlbW92ZSBhbGwgaW1wYWlybWVudHMuXG4iLCJkaXNwbGF5TmFtZSI6ImNsdXN0ZXItaW1wYWlybWVudC1vcGVyYXRvciIsImljb24iOlt7ImJhc2U2NGRhdGEiOiJpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBU3dBQUFENUNBWUFBQUNkK1FoZEFBQUJoR2xEUTFCSlEwTWdjSEp2Wm1sc1pRQUFLSkY5a1QxSXcwQWN4VjlUeFNJVkI0T29PR1NvVGhaRVJSeTFDa1dvRUdxRlZoMU1MdjJDSmcxSmlvdWo0RnB3OEdPeDZ1RGlyS3VEcXlBSWZvQzR1VGtwdWtpSi8wc0xMV0k4T083SHUzdVB1M2VBVUNzeDNlNFlCM1REc1pMeG1KVE9yRXBkcndoQmdJaCtEQ3JNTnVka09RSGY4WFdQQUYvdm9qekwvOXlmbzBmTDJnd0lTTVN6ekxRYzRnM2k2VTNINUx4UExMS0NvaEdmRTQ5WmRFSGlSNjZyRFg3am5QZFk0Sm1pbFVyT0U0dkVVcjZOMVRabUJVc25uaUtPYUxwQitVSzZ3UnJuTGM1NnFjS2E5K1F2REdlTmxXV3UweHhHSEl0WWdnd0pLaW9vb2dRSFVWb05VbXdrYVQvbTR4L3kvREs1VkhJVndjaXhnREowS0o0Zi9BOStkMnZuSmljYVNlRVkwUG5pdWg4alFOY3VVSys2N3ZleDY5WlBnT0F6Y0dXMC9PVWFNUE5KZXJXbFJZNkEzbTNnNHJxbHFYdkE1UTR3OEdRcWx1SkpRWnBDTGdlOG45RTNaWUMrVzZCN3JkRmJjeCtuRDBDS3VrcmNBQWVId0dpZXN0ZDkzaDFxNyszZk04MytmZ0F0QjNLTFR6bDBJZ0FBQUFaaVMwZEVBUDhBQUFEQXFFTytRd0FBQUFsd1NGbHpBQUFOMXdBQURkY0JRaWliZUFBQUFBZDBTVTFGQitVSUFoVWxNaXJ0UXljQUFDQUFTVVJCVkhqYTdaMXBjRnpYZGVmL2IrMjkwUXQyTkFCaVg4V2RvcmhKMUw1WlNyUllkcHhVTXBOVUVtYytlR3FTOFpSVG1TbFhNcW1VWjVMS2xEMUx6WGdxenNUamtWV1NiRVhXeGtXU0tYRUJSUklFU0JEN3ZxTzdBVFFhNk9YdGJ6NkFvQ2lKSUxGMnY5ZDlmMVVvczB5S3ZPKysrLzczbkhQUE9aZlNkVjBIZ1VBZ21BQ2FUQUdCUUNDQ1JTQVFDRVN3Q0FRQ0VTd0NnVUF3T0N5WkFnSmhHMUZWYUlJQVhSU2hKNVBRRnhlaExTeEFXMXdFUkJGZ0dGQk9KMmlQQjNST0RpaUhBeFRQZzdMYlFYRWNtVDhpV0FUQzlxRXJDdFRKU2FqVDA1RGIycUJQVFVIOTdEUG9wMCt2L1MrcHJBVHovUE9naW92Qjd0d0p0cXdNYkhrNUtMczk2K2VYSW1rTkJNSW1SVXFTb0F3T1FycHlCY283NzBCcmJRV0docmIyUTMzeVNUQVBQUVR1MkRId3UzYUJkam9CaWlLQ1JTQ3N6K05Sb1dzYVZFMkRxaWlRRlFXcW9rQlJWYWlxQ2tXV0ljc3lGRVdCcHFwUU5RMHJTNDZpS05BMERZWmh3REFNT0k0RHk3SmdXUllNdzRKbEdUQXNDNDVsUVRNTWFKb0dUZE9nalBDaDZqclVZQkJpU3d2a24vOGMyaHR2cE83ZnJxMEY5NTN2d1BMb28yQXJLMEh4UEJFc0FtSDV1MXhlSHBxbVFWVlZDTWtrbHBhV3NCaU5ZaWtXUTJ4cENiR2xKY1JqTVNTVFNRaUNBQ0daaENnSVVCUUZ1cTVEMDdUUC82NHZMN2ViNHJNaVhoUkZnV1lZV0sxV1dLeFdXSzFXMkd3MjJCME91Rnd1T0YwdU9KMU91Tnh1dU4xdTJPMTJNQXdEbW1GQVVkVDJpNW11UXg0YWd2alAvd3o1cHo4RnJsOVA2L3Vodi8xdFdIL25kOEFmT0pBVndrVUVpL0RGNy9HbXRTUWtrNGpINDRoR280aEVJcGdMaHpFOU5ZWDV1VGxJb2doSmtxRGVGS1NWbjIxZnJEZEZqYVpwOEJZTGVKNkh3K2xFWVZFUkNvcUs0UFA3NGZGNDRIUTZZVnNSTW5xTERzSjFIY3JrSkpJLyt4bVUvLzdmZ1lrSjQ3dzBsd3YwaXkvQytpZC9BbjdQbm93V0xpSll4SUtDb2loSUpCS0l6TTlqWm5vYWt4TVRtSitkUlNRU1FTSWVoeWdJcG5nV2p1TmdkemlRNC9YQ241dUxvdUppRkJZVndlZnp3ZWx5Z2VmNURWbGdXalFLNGQxM0lYN3ZlOFlTcWp2QS9QbWZ3L1lIZndDdXFvb0lGaUZ6NGs2SlJBS1JTQVJURXhNWUd4MUZPQmpFYkRnTVNSUlRaakZ0dTd0ME16N205ZnRSVUZTRVFHa3BTZ0lCNU9ibHdlRndnR1h2Y1VpdWFaRGEyNUg4bTcrQjlvdGZtT2ZCZCs0RS85M3Z3djdTUzZCc05pSllCUE5aVWJJc0l4NkxJUmdNWW5ob0NNT0RnNWlmblVVaUhrZTJMQUdLb3NCYkxQRDUvZGhSV1lrZGxaVW9MaW1CNnc3V2x4YUxJZm5hYTVEKzRpK0FVTWljZ3YxSGZ3VEg5NzhQdHJpWUNCYkIrQ0tscWlxaTBTakd4OFl3TWpTRTBlSGhXekVvd3JJTG1lUDFvclM4SEJXVmxkaFJVUUdQMXd0TVRTSHhOMzhEN2NjL052OHovdDNmd2ZyeXkyQkxTd0hhL0lVdFJMQXkwTjJMeFdLWW5wcENmMThmK3JxN0VZMUVicDNZRWU0TXk3Snd1MXg0Mk8xRzFadHZBdWZPWmNhRHVWeEFYaDRzLy9FL3d2YlNTNkFzRmlKWWhQUWppaUpDd1NCNmUzclEzOXVMbWFrcFlrbXRBMGJYOGZqb0tKcFBud1lkaTJXbUtQL2dCM0Q4cTM4RjJ1VWlna1ZJUFpxbVlXbHBDV01qSStqcTdNUmdmejlpaTR2RWtscnZoNnpyZUdaZ0FQVWZmQUNvYW1ZTDgzZS9DK2QvK0ErbUZTMGlXQ1pFVVJRc1JDTG83ZW5COWZaMlRFOU1RSlpsTWpFYnRLeWVHUmhBdzd2dlpzOHovK21md3ZuOTc0TjJ1ODIzdVpBbGF5NmhDZ2FENk9yb1FHZEhCMlpESWFnWmJoRnNKelNBcDRhRzBQRGVlNm14RGw1NEFYUWdzT3J2NjhFZ3ROZGYzL1p4cUgvLzk0anhQSnovL3QrRGRqaUloVVhZV21SWlJqQVl4STNyMTNHdHRSV0wwZWl0Y2hmQ0JoYytnS1BUMDNqZzdiZEJKWk1wK1RmdDU4N0JjdVRJcXI4dnRiY2p2bWRQeXVhQSs5R1A0UGoydDAzVnhvWllXQWEzcU1LaEVOcGFXM0hqK25WRTV1YklwR3dSVFFzTE9QRFJSeWtUS3dEM2ppMm0ySGFRdi9NZEpFdEtZSC9oQmROMGZpQ0NaVUJVVmNYYzNCeXV0YlhoMnRXcm1KK2RKWUgwTGFSWUVQRG94eCtERFllemZpN0VQL2tUTUNVbHNCdzhTQVNMc1A0ZGVIRnhFWjBkSGJqVTBvTFF6QXdScWkzR3BtbDQvUHAxV0VaSHlXUUFRQ2lFNVBlL0QvYi8vQjh3aFlWRXNBaHJReEFFOVBmMTRWSkxDMFlHQjZFb0NwbVViZURvK0RnS3pwOG5FM0g3Um5ueUpPSS8vQ0ZjZi9WWGhvOW5FY0V5Z1BzM016Mk5sblBuME5uUkFTR0ZNWlZzb3lvV3c2NlBQaUlUY2FkMStJTWZRRGg2Rkxabm55V0NSYmd6UzB0TGFMOTZGWmRhV2pCcjBnSmJzOEJyR281ZnV3WTZHaVdUc1FyaVgvODErTDE3d1JRVkdYYU01SnF2TktBb0NnWUhCdkRXRzIvZzFIdnZFYkZLQWZjSGcvQzN0cEtKdUp0cmVQRWlrcSsrQ2hnNFpZWllXS2xjRUxxT3BhVWxYTDF5QlJmT25zVVMyZTFUZ2x0UnNPZktsWXd2dTlrSzVMLzhTMGhQUFFXK3FZbFlXRmtkSTFCVmpJNk00Si9mZkJNZm5UaEJ4Q3FGSEpxWWdHMWdnRXpFMnVJVUVIN3lFK2dHUGZRaGdwVUNrb2tFV2k5Znh1dXZ2b3Flems1eUFwaENQTEtNaHN1WHlVU3NaM1A5KzcrSDNObEpYTUpzZEFIbjUrYnc2Wmt6YUw5eUJaSWtrVWxKTVFjbko4RWJ2QSs3RVJGZWV3MWNVeE1vMWxnU1FTeXNiWFFCaHdZSDhZdlhYOGVWaXhlSldLVUJoNnFpcXJlWFRNUkcxdThQZmdCbGJJeTRoTm1BS0lwb2EyM0Ztei8vT1lZSEJraWhjcHFvVzFpQXM2dUxUTVJHMS9HcFUwU3dNcDJscFNXYytmaGp2UGYyMjFpSVJNaUVwQWtLUU5Qd01KbUlUYUQ4Ny84TnpXQ0hRMFN3dGdoZDF6RWJEdVA5ZDk3QnVWLy9tbVNzcHhtL0pLR2d2WjFNeEdiVzlOV3JrRG82aUdCbG9saE5qSS9qN1YvK0V0ZGFXOGtwb0FHNEx4VEsyTjdzcVVUKzhNT1V0NzBoZ3JXTnFLcUsvcjQrdlBYR0d4am83U1hkRlF4Q3hkaVlvVDQwMDY3djk5K0hhcURRQmtscjJJeVByeWpvNmVyQysrKzhRNXJyR1loY1NZSjdhb3BNeEZaNEQ1Y3ZReDBkQmVQekVRdkwxS2F5TEtPOXJRM3Z2UFVXRVN1REVZakZZQmtmSnhPeFZXdmRRTEZBSWxnYlFKSWtYTGwwQ1NmZWVRZUxwTVRHY0pUUHpvSTRnMXZvU1p3NFlaaFNIU0pZR3hTcjB4OThnRGdKNmhvT1J0ZmhXVmdnRTdHRmFHZk9RSS9IaVdDWlVhd3VYYnlJVSsrL2oyUWlRU2JFZ05nMERiNmhJVElSVzBrb0JNVWdPVzFFc05icXg5KzByRDQ2ZVJLaUlKQUpNU2hPUlFFM1BVMG1Zb3RSRGRLempRaldXbng0UlVIcmxTdjQ4TVFKa2hCcWNBb040cnBrbkZzNE1rSUV5eXhpZGEydERSK2VPRUhjUUJOUXNMaElKbUU3dm9OTGw0aGdHWDVYMFRUMGRIZmoxUHZ2a3dDN1NlQkpsY0gySUlxRzZOaEtCR3NWZEYzSDBPQWdUcno3TGtsZE1CRldJOGNYNzlGaVNEZHdDeUk5SGpmRStFaW0reXBpTlRVNWlSUHZ2b3M1Y2p2dytuWkFtZ2JETUtCb0doekhnZWQ1Y0R3UGhtRkFNd3hvaWdKRjA0Q3UzeXBqVWhUbDFvOHN5NUFsQ1pxcVFsWFZkYmZtc1J2WWJiOVhhb0J1NVBob0pBSmRFRURaYkVTd2pNYjgvRHhPZmZBQnBraW55bnNLRThmejhQcjl5TXZMZzl2amdkdnRoc3Z0aHQxdUI4L3pzRmdzWURrTzdJcGcwVFFvaXJvbFZycXVRMVhWWmNHU1pjaXlERUVRa0Vna2tJakhFWTFHc1RBL2o3blpXY3pQelVFU1JhaXFDdjAyd2JzZDI5SVNFYXp0R0hzb0JOMEExaXNSckM4Umk4WHc2OU9uMGQvVFF3cVpiNE9pS0ZodE52ajhmdVFWRktDZ29BRDVoWVh3Ky8xd09CemdlQjRzeTRLaXFGcy9tN1Z5Z2VVNDRvcmxsVXdtTVJjT1kyWm1CdUZRQ0tGZ0VIUGhNRVJCZ0tacDBBSHdCbzQxNnZjWW0yN2tRNTN4Y2N5T2o0TzNXT0JOWTEwaEVhd3ZoQmdrZk5iU2dtdFhyeEt4QXNCeEhISzhYdVFYRnFLeXFnb2xnUUE4SGc5c042Mm56WXJTdlFRU0FCaUdBY013c0Znc2NEcWR5TXZMUTExRHd5MEJXNGhFTURNOWphSEJRVXhOVElBMjhIdlQ3Mkg5NlVaT3lWaGF3b2YvNjhjUUgzZ0EzL2pXYjhIaGNCREJTaWVxcXFMcnhnMWMrUFRUck81bnhiSXN2SDQvS3F1clVWbGRqY0tpSW5nOEhuQXN1eHg3TW9pMXgvTThlSjVIVGs0T3lzckxzWGYvZml4RUltQSsvUlF3YUtkUi9SNHBGN3FSVDZJcENyRndHRzB0TGFpb3FzU3hCeDhFbTRZTEtvaGc0Zk1HZkIrZVBJbEVGaVllMGpRTnA4dUZIWldWYUdocVFtbFpHZHc1T2JkY1BETzRxeHpISVM4L0g0dlYxVERxZGFsNlBMN2NvMnVWT2RVTkhIL1RlQjRpdzBBVVJaeis0QVFxS2lxd282S0NDRlk2V0ZoWXdNZW5UMmZkaVNETHNpZ3FLVUhUenAyb3JLcENYbjQrTEJhTEtVUnFWZkVxTGpidTRKSko2S3E2NnRWWnVvR1RYaldyRlRHR0FRQk1UMDNoMU1tVCtOYnYvQTZjVGljUnJGUWlpaUphenAzRFFCWmRCOFZiTEtpb3FrTFR6cDJvcmEyRjArVUNjM014bXQ1YUxDdzByaVVmaXdHS0F0eEpzRlFWTUhBT21jcGJzSGpiR3JueTJTVTBOamJoOE5Fam9GTVlLc2hxd2RJMERkMWRYYmg4OFdKV1hNVmxzVnBSV1YyTi9RY1BvcXk4SEE2SHc5VFcxQjBGeStzMTd1RGk4V1VMNjA1aXBtbUdUbXZRT1BZTGdpVkxFajQ2ZlFyVk5jdHhUaUpZS1dCNmVocS9QbjA2NHd1YWVaNUhWVzB0OWg0NGdJcktTdGp0OW93VHFsdWtPYkh4cmhiV3dzTHE1UzJLQWhnNHJVR2pHU1FvQ2pSRmdXR1djL0JDTXpPNGN2a3lubno2YVhBY1J3UnJlemU3T001OThnbkN3V0RHUGlQRE1DZ3NLY0VEaHcram9ha3BzNFZxNVptTkhNT2FtMXRWc0hSVk5YUU1LNXFYQzQ3bndUSDBGMXpBaStmUG83NmhBVlhWMVNsWlcxa3BXS3Fxb3VQNmRYUmR2NTZSK1ZZVVJjR2RrNE9EUjQ1ZzUrN2Q4SHE5S1kwekVNRmF4Y0s2ZW5YMVZzT3FDaGk0Wm5VMk54Yzh4MzdGblYySVJQRHBKNStndUtRRWRydWRDTmEydUlKVFV6aDM1Z3drQXhlYmJoU080MURmM0l3ang0NmhKQkJJUzY1TU9xRnRObEI3OTBLL2V0V1lvclhLbXROVkZmcnNySEV0TEpzTnE5bFBYZGV2bzJmM2J1emV1M2ZiTjhhc0U2eEVJb0VMNTg1aDNzQ0xZNlBrNXVmajZQSGphTDd2dnJSbElxZmR1dVI1TUMrK0NNV2dnaVYrL0RHVU81eGthdEdvY1JOZUdRYjlPVG1yL3I0Z0NMaHcvandxcTZ2aDhYaUlZRzBWbXFhaHU3TVRuZGV1WlpRcnlMSXM2cHFhOE9EeDR5Z0pCREltUldGalBpRURwcUlDUnExVmtINzNkMDAzcFlyUGh4bWV2K3VmR2Vqcnc0M3IxM0hveUpGdFhYOVpKVmh6czdOb09YOCtvMXhCcDh1Rnd3OCtpUDMzM3crWHl3VUN3TzdlRFpGTXc1WXhVMTBOOFI2dW5pTExPUGZwcDZocmFFQmVYdDcydWZ6Wk11bXlMT1BLNWN1WXlwQUxOaW1LUWxGSkNYN2o1WmR4OU1FSGlWamRibVFWRm9JNmZweE14Qll4NmZOaExWbUtVeE1UNkxoMkRlbzJkaWJOR3NFYUd4M0YxY3VYTThJVnBHa2E5VTFOZVBFYjMwQmpVMVBLY21CTUkxZytIK2lEQjhsRWJBRTZ6Nk52amNtNG1xYmgwbWVmWVc0YmIwTFBDc0ZLeE9PNDFOS0N1SUdMUzljS3gzSFkvOEFEZU82RkZ4QUlCTEltWFdHOThJOC9UaVpoQzRoV1YyUE1hbDN6bjU4YUg4ZjFiYlN5TWo2R3BlczZCdnI3MGRQVlpYcnJ5bUsxNHVoREQrSFEwYU5aZXdxNFptSGZ0UXZKUUFBZ1hXTTN4V2dnQUlHaXNKYVVVSmZiamZLS0NuZzhIbWlhdGkzQjk0d1hyS1hGUlZ5OGNBR1NhTzR3ck4zaHdLTlBQb2w5Qnc3QVlyR1FMK2xlYnFIZkQvWVAveERLOTc5UEptT0RhQTRIcnVYbHJTcFdGRVhCWXJHZ3NMZ1lUZmZkaDdyNmVoUVVGc0ptczIyYjVaL1JncVZwR3JxNnVqQnVrRXNnTjRyVDVjSVR6enlEM1h2M2tualZXcUVvOEU4L1RRUnJFOHpWMUdEZ1M5bnJGRVdCWmhqa0Z4U2dvYWtKZGZYMUNKU1d3dWx3Z0VsQmtuSkdDMVowWVFGWEwxMHlkUWRSVjA0T25ucjJXZXpjdFFzc0VhdDF3VGMxUWZqbU42Rzk5cG9oeGtQLzBSK0JycXhjUFh3eE9RbjF2LzVYdzh4ZmUyVWw5TnVFeXVmM283cTJGblVORGFpc3JFU094NVB5RFRSakJVdlROSFIxZHByNjVodW55NFVubjMwV08zZnZ6cm9TbXkweHN1eDJjRi8vT2tTRENKYjFkMzhYbGlOSFZ2MTlxYTBOY1lNSVZyeXFDdTFlTDV3dUZ3SmxaZGk1ZXpjcXE2cVFtNXViMWlhUEdmc1ZST2JuMGRiYXVxMDVJZHVKM2VIQTQwOC9qVjI3ZGhHeDJnU1c0OGNoSFRnQS9mTGx0SS9GVEljK2s3LzVtemoyOE1Pb3JxbEJjVW5KdHNhbHNsNndORTFEWDI4dnBrMXFYZkVXQ3g1KzdESHMyYnVYdUlHYmhQSDV3UC9wbjBMOHJkOGlrN0ZXeS9UclgwZlQ5NzRIbThjTGhqVldtVmRHSnZFc1JxTm92WHpabEYxRVdaYkY0V1BIc1AvZ1FYRDNxTjhpck5FVmUvcHBrdm0rRG16LytsL0RtWnRyT0xIS1NNSFNkUjE5dmIwSVRVK2JidXcwVFdQWHZuMDRjdXdZck90STFpUGNZMTV6Y21EOWk3OGdFN0VXaS9UUC9neThnYXNFTWs2dzRyRVlPcTVmaHl6THBodDdaVTBOSG43c01UaEpYZUNXWXpsNkZQUzN2MDBtNG03azU4UDI3Vyt2ZXFzUEVheHRzSzdHeDhaTW1YZVZWMUNBeDU1OEVyNDBYZ09leVZCV0srei81dDhBK2Zsa01sYUIvOC8vR1Z4VmxiR3Q1VXlhY0ZFVTBkN1dCdEhBMXlYZGlaVXM5dEt5c296dnVaNU91Sm9hV0g3MEl6SVJkeEtDMy9zOTJGNTZhZFZMWG9sZ2JRUEJZQkNEZlgzbVdpZzBqUU9IRHFHaHNaRVVNbSs3bVVYQjl0eHpZTDd6SFRJWHQ5UFlDUHYzdmdjNnhaZWlaclZncWFxS3ZwNGUwMTAxWDFWYml3Y09Id1pQVGdSVG8xbDJPK3ovOXQrQzJyczNEWHBwVE92RitwLytFN2k2T2xPOHY0ekp3MXFNUnRGcnNvNE1IcThYRHozeUNITHUwaStic0EyTHZyUVV0di81UDVINDVqZUJvYUhVaFN4ZWZSWHl4WXVyL3I2V2hyeEI3b2MvaFBXcHB3enZDbWFVWU9tNmp0R1JFUVJObE1yQU1Bd2VPSG9VNVR0MmtMaFZHckRzM3cvdGh6K0U4SzF2QVNucWs2YitqLzhCSTlWZE1OLzlMdXgvOEFlR1BoWE1TSmRRRWtWMGQzV1pxZ3lub3FZR3UvZnVKV1UzYWZNTktWaWZlZ3I4My81dFZqNCsvY29yY1B5N2Z3ZmFaSDNWTWtLdzV1Ym1NRDR5WWhwMzBPRjA0dWlERDhMdGRoUGhTS2Rtc1N6c3YvLzc0SDc0dyt4NjdoZGVnT08vL0Jjd3Vibm1FMXF6VDc2bWFSZ1pIc1pDSkdLU2paM0MzZ01IVUZsWlNWeEJJN3dQam9QamovOFlYSmFrTzlBdnZRVG5mL3R2WUExOFEzWkdDNVlrU2VqdTdEU05kWldibjQ4OSsvZVRPa0VqaVpiRkFzY2Yvekg0SC84NG94Tkw2ZC8vZlZPTFZVWUlWaWdZeEl4Smd1ME13MkRmL2Zjam4yUmJHMCswZUI3MmYva3ZZZjNIZndScWF6UHUrZGkvL211NC91N3Z3TnpoMW1raVdDbDBCMGRIUnBBMFNlNVZjV2twZHUzZW5kMDNNeHRadEZnV3RxZWZodVBuUHdkMWwwWjdwaUkvSC94UGZnTG5uLzBaNkRWZTEwVUVhNXNRQlFFalEwT21PQjFrV1JiNzc3OGZicEp6WlhEVm9zRHYzUXZYRzIrQStlNTN6ZjBveDQvRC92YmJjUHplNzRIS2tPNGZwaGFzeGNWRjA3UkFMZ29FVUZOWFI4cHZUQUpUVkFUWFgvNGxyRysvYlVvWFVmakRQNFQ5WnorRDVZRUhnQXhhYzZaOUVsM1hNVGs1aVpnSkxrZGxHQWI3RGh3Z0dlMW1zMUJzTnRpZWV3NnVEejhFOCtkL0RwaWc3WSswWXdldS92WnY0OVN1WFJCTVVCdVlOWUlseXpLR0J3ZE5jU05PWVVrSnNhNU03Q0t5cGFWdy9kVmZ3WDdxRk9oLzhTOE1PVXcxUHgvRFgvc2Fmdm5DQ3poZlZvYXBVQWpUVTFPbXZ6ejR5NWcyelRxWlNHRE1CSDJ2YUpwR1ExTVRzYTdNcmxzc0M4c0REMEN2cjBmNHNjZkEvZWhIc0Z5NUFxUzVEYmZtY21IMG9ZZHd0YW9LMDNiN3JXdTVGRVhCUUg4L3FtcHFNcXFhd3JSUEVnNkhFVjFZTVB3NDNUazVhR3h1SmllREdZQ21hYmpSMTRkems1T1FIbjRZelUxTnFPdnRSVTV2TDVpNXVWVHVna2cwTkdDa3NSSFhTa3N4WjdGQXYwUElaSHgwRkV1TGkvQm1VRk5JVXdxV3J1dVlucG95eGZYejlVMU55RFZoQ1FUaHp0WnlRV0VoZEYySFFOTzRVbGlJMXNKQ2xPN2JoK3BnRU1WalkvQmV2Z3hzMDZsMXNyNGVvYW9xREFRQ0dNckpnWENQVFRBeU80dFFNQWlQMTVzeFZSV21GQ3habGpFNU1XRjQvOXhpdGFLdW9ZRmNMNTlCRkJZVm9iRzVHWmN1WElDdTY5QUJqRG1kR0hNNndWVlVJT2Z3WVZUUHppSjNmaDZGQXdQZ29sRXcwU2lvUkdMdC93akRRUFg1b05wc21LK3V4bHh1TGdZS0NoQzIyWkJjaDZVdXl6Skdob2RSWFZ1Yk1SYStLUVVySG84akhBeWFZbkVYbTdnTWd2QlZPSTdEZmJ0M283dXpFNHRmQ2tuSU5JMVppd1d6SlNWQVNRbW8rKzZEUTFGUUhJdkJLWXF3U2hJY2dnQjdJZ0ZySWdGR1VhRFJOQ1NyRlFtN0hRbWJEVW1MQlFMSFlkcnBSTVJpZ2JwSnkyaDRjQkNKUkFLdURMbll4SlNDdFJpTlltNTIxdEJqcENnS05YVjFjR1RnMFhLMmsxOVFnSWJtWmx3NmYvNnVWcjRPSU1heTZQTjR2dkQvcmJwbXRtR3MwVWdFd1ptWmpCRXMwNTJ6NjdxT21lbHB5SkprNkhIYTdIWlVWbGVUWUhzR3dySXNHcHFhTm5RZEczV1huMjBKbjBnU3BpY25vWm1vVjF4R0NaYW1hYWJJTHlrc0xrYUJ5UXROQ1hkNXY0V0YyR0h3SzdGV3ZwZkppUWxJSnJ5bk15TUVTeFFFUkNJUnd3dFdkVzB0dWIwNWcrRjRIczA3ZDRLM1dBdy8xbkF3aUhnc1JnUXJIU1NUU1VSU21mT3lBYXcyR3dLbHBTU3pQWU9oS0FwRkpTVW9EZ1FNUDlaNExJWTVnMzh6R1N0WWk0dUxodDh0UEY0di9DVDNLdU54T0J5b2JXZ3cvTVlraVNKbXBxYWdwVGtyUCtzRVM5ZDFMQzR1SXJtZW5KWTBVRlJTa2pHbk1vUzdXMW1WVmRWd21xQTMvK1Q0QkNTREgxUmxwR0F0R0R4K1JkTTBkbFJVa050d3NnU1AxNE1LRXdUZlF6UFRHUkhITXBWZ2FacUdjREJrNkRIeUZndnlDd3JJQlJOWkFzZHh5d1hHQnE5bVNNVGptSitmSjRLVlNsUlZSU2hrN0F4M245K1BuTnNTQlFtWjd4WVdGaGNiL3AycnFvcTUyVm5UdDVzeGxXQUp5YVRoNDFlKzNGelliRGJ5SldjUmJyZmI4S2VGbXFZaEhBcVo2ckpoMHd0V1BCNkhhT0FPRFJSRndaK2JTNHFkczlBdExLK29BRzN3cW9iSTNKd3BPcHhrakdERllqRkRUemhOMC9ENy9hUWNKd3Zkd3BKQUFBNkRYL3NlWFZoQU1wa2tncFVxa3Nra1ZBTzNSR1lZWnNQNVY1cW1RUlFFVTdSOEpueVZISThIZVFVRnh0N3dGeGNSTS9sSm9Xa0VTOWQxSkJNSlF3Y05PWjVmMXpWZXVxNURGRVZNVFU2aTVjSUYvT00vL0FSam82UGs2emNoUE1jaFVGWm02REdxbW9iSS9MeXBBKyttU1JiU05BMkplTnpRayszT3lZRjFEYlZsaXFKZ01SckY4UEF3cnJXM1k2QzNENkZnRUZhYkRVOCsvUlQ1K3Mzb0Z0N3NSc3B4SEdTREZocnJtbmJycE5Dc2FUZW1FU3hkMTVFd3VJWGw4L3RYemNmUk5BMUxTMHVZbkp4RVYyY251bTdjd01UWStCZmE1UEFXSGd4Sk9EV25ZRkVVdkQ0ZjdBNkhZZThhMEhVZGk5RW9WRlhka25JaVNaSWd5M0pLWTNlbUVpeEJFQXd0V0U2WEMreHRBZmNWa1EySHcranQ3c2ExdG5hTURBK3ZtcHJCY2Z3WC9udUN1WEM1WEhCNVBJYStIQ1VlajBPVzVRMmZaQ3VLc3J6eFRremd4dlhyOFBoOGVPTEpKMU5XVDJrcWw5RG9UZnNjRGdjb21vWWtTWmliblVWdmJ5KzZiblNpcjZjSHNhV2xlK2JBc0N4RE9qeVlHS3ZOQnIvZmp3a0RYejhYVzFxQ0pFbXcyKzNyK3ZZRVFjRDQyQmg2ZTNyUTA5Mk55ZkZ4U0tLSTQ0ODlsbElqd2p5Q3BhcUdMdDZrYVJxaUpPRmErelYwZG5UZ1duczdvcEhJdWs3OWRFMG5YNzJKb1drYWhVVkZ1RTVSaHZVRXhHUnlUYWxCbXFaQkVrV0V3MkVNRHcyaDdlcFZqQXdOUVVnbXYvQnNzaXdUd2JyakJPcTY0WTc4S1lvQ1JWSFFBUWlpaEE5UG5vS1FURzQ0dVZYWDlZeTdxVGVib0NnS1hyOGZGRTFETjJoR3VTekxkODNGa21VWmtmbDVEQTRPb3JPakE4T0RnNWlmbTF0MVhTWVRDU2l5bkxKaWYxTzVoS3FpR21aaGdxSWhTU0lFVVlRb2lGc2lwam9Bb2xmbXh1bDB3bTYzSTdhMFpNanhTWkowS3hhOGNsS29xaXFXRmhjeFBqNk9yczVPOUhSMUlUZ3pzNlkrOEpJa1FVMWhueTFUQmQxVkxUMkNkZnNSc0tKcFNDWVNFQVZ4UzQ2dlY2dzBocUZodFZyQXNDVG9ibVpzZGp2c0RvZGhCVXVSWllpaUNFM1RrRXdtRVFvRzBkWFppUnZYcjJOcVl2MDlzeFJGU2VrRkYrWVNyRFNZMlF6RFFGWlVpS0lBVVJRaGl0S1d1RzAwVFlGaEdEQTBBNXFobDBWUjF6UG1kcE5zeFdLeHdMYU9nSFk2TnQ3aHdVR0VReUgwZEhkamVHZ0k4YVdsRGE5cFJWR2drUmpXSFJVckpmN1Npc1dqNlRwa1djRkNOQXBKbExia3BWQVVCWnFtbDRXS1lVRFQxRmZNYTVtVTVwZ2FsbUUyZFAzWGRvdVVEa0JXVllpU2hJOU9uWUtpcWx1eU9XcXFTb0x1NlhpcHk4Rnphamt1SllnUVJYSExndndNODdsSXJmeGJkMEpJSmcyZnVrRzR0MFZ1ZHppVzExTWFBNUxMY1ZacXVVSWtLVUFVQlVpeWJIb0xQcXNGYXlYblNaSVZpSkswZk9TN0pYRXBnS0xvVzBKRjAvU2FTaUVVUllFZ0NPU3JOL09hWXBpMDlVT2pLQXI2VGFFVUpRbkpaQktpSkJtNllVRG1DdGJOSFdNcmQ1OUVVa0Fpa2RpeVhCS2EvcUxMdDVGNnJhV2I4UVRTWXRtODFyckZZa21aaGJXeWxuVmRoeVRMU0FvQ2tvS1FVU0psU3NGYVBrbmIyQWtheTdKd3VkMG9LUzFGWDI4dndzRVFSRW1FcHVsYk5LN1BMYW5OWktycnVvN293Z0lSTEpPVHFzdFZhWVpaVGxPUUpJaUNBRW1TVXU2R1VqU05WSzdVakJVc21xYmhjcnRSVmxHQjZwb2FWRlpWZ1dZWXpBU0RHQnNkMi9SWWFJb0N3OTQ3THJWZXdab05oNkZyR2tCS2RFd3RXQlJOQTF1Y24wUUJvQmdHaXFwQ2xxVGxEcnhwRUtuYjRWaDIrVm1KWUgxVmdOWWlXRGE3SFNXbHBhaXJyMGRsZFRXOFBoK3NWaXNvaW9Jb0NKdTZMT0RMSjN6YllRVXRMQ3hBa21YWVNOY0cwOEt4N0phdGpkdGRQa0dTa0Z4Y05GUmNpbUhabE5hL21rZXdLT3FPNmY4VVJZSGpPT1FYRnFLNnJnN1ZOVFVvS0N4Y0xrVCswcUxoZUI1dWQ4NjY0Z3UzdTN3YmpVdXRoNldsSlNRU0NYS1JoWW5aYkc5M2lxTGdjRHBSRkFoZ2JuWVdJOFBERUVYUmtIMjJlSjVQYVV0dzFreUxnT2Y1endmT3N2RDRmTmhSV1ltNmhnYVVscGJDNlhMZGMvSXNWc3VhRnN6bjFoU2QwaDFrY1dFQnNWZ01mcitmZlBsbUZhd05ibW8ydXgzNWhZV29xS3BDWlhVMWZINC8zdnJGTDNDam84T3dZUnFiM1o3U1M0Tk41Ukx5Rmd1Y0xoZDJWRmFob2JrSmdVQUFIcThYSE1ldHlmS2hLQXBlandjMFRYOGxhMzRsRllIZDRyalVlbDQreDNIdytueWtvREJMb0NnS0RNdkM0L1dpdHFFQkZaV1ZLQ2dzaE4xdUI4MHdVQlhGa0hsNU5FMkRZMW53UEErM3kwVmN3dFVtYWRlZVBUaDQ2QkR5OHZQQjgveTZCWVdpS0JRVUZZRmxXYWlxK25tK0ZFMkRZZGVlTDdYVk1RQi9iaTVxYW10UjM5Q0FpcW9xdUF5VUtVMVlQL2VxaW1CWUZ1NmNISlNXbDZPcXBnWmw1ZVZ3T0oxZnNWUkVVY1NTUVdvU0tZb0N5N0RnT0JZc3k0S2hHVkEwQmJ2ZG50SnZ4alNDeFRBTXFtdHFOdjMzT0oxT1dLd1dxS29DaG1YQnBFR2tLSXFDeSsxR1pYVTFHcHViVVZWVkJZL1hDMHVLanNNSjI4dWRhbDVYM0tlU3NqTFUxdGVqckx3Y09UazVkMDJCU0NTVDJPMFJhd0FBR1d0SlJFRlVhZTFldW5JeXo3SXNPSmI5U2d5WG9xamxyUDRVamlucmpxSWNEZ2RLeThzeE1qaVk4cGR2dFZwUldsNk94dnZ1UTAxdExmTHo4MitkWUJJeUIrVm1JakpGVWVBdEZ1UVhGcUtxcGdZVlZWWEl6Y3RiOHp1WFJCR0plRHkxNnhUTDhlSVZrV0x2Y3VLNWNqZ0FZbUZ0SHphYkRUNi9QMldDWmJGWVVGQlVoT3JhV2pRMk5kMjZjSk8wUXM1Z3dWSVU1T1hubzJ6SERsVFgxYUd3cUdnNUxyWE9keDZMeFZKV3FrWFRORmlHQWNkeFlOZVlxa0JSeENYYy9nZG1XZmo5L20wdG5XQllGbTYzRzQzTnpXaHNia2FndEJRNU9Ua3BQVTBocEk4ZGxaVW9yNmlBMiszZThEdlhkUjF6YzNQYktsaGZqa3V0TjRhYmpyckpyUHVDYUpwR2ZuNytsZ3ZXU21iOWpxb3ExTmZYbzZhMkZqNi9mODBubUlUTXdldjFidnJ2MEhVZEM1SElsbmRYb0NnS0RFMkQ1Ymc3eHFYV2c5UGxndFZxSllLMXJUNDZSY0dmbXd1ZTU3ZGs5N0xaYkFpVWxhR3h1Um0xOWZYSXpjMkZ6V1lqTGg5aFU4aXl2S1czZ0RNMERaWmx3WFBMaVo0VXZmbE4xT0YwcHZ5Z0tDdDlGSy9YQzRmVHVXSEJZamtPaGNYRnFHOW9RRjE5UFlwTFN1QktjVDRLSWJNUkJBR2hZSERUVnY5NjQxTHJ3VzYzcDZ6UU82c0Z5KzV3d0plYmk3bloyWFc5L056OGZGUlVWYUdwdVJrN2R1eUFtOFNsQ050RUtCaEVaSDUrL1NKRlVjdFZJYmVKMUhhRkpISThucFJmL0p1Vlg1dkZZa0ZaZVRuNmUzcnVLVkoyaHdOVk5UWExJbFZaQ2IvZnY2R2tWUUpocmVpNmpwbVptVlZ2Q0w5VG1JT21hWEJiRUpkYUt4UkZ3ZXZ6YmJwdWtnaldXaDZhWlZFU0NJQmgyYTlVdmEva1N3WEt5MUZYWDQrNitub1VGUldCdDFpSXkwZElDYklzWTNobzZKNkhRaXR4S1k3amJ2VmpTeFVVUmNIajlhYjhtOGhhZjJhbG84TmlOTG84RVJ5SGdzSkMxRGMyb3FHeEVVWEZ4WEE2blNtdFJDY1FnT1g4cThueDhWVmN2dVV5TXA3amJsVnFwQVBlWWtGT1RrN3FqWTFzWFJTZW5CejRjM01oU1JJQ3BhVTQ5dEJES0srb2dNZmpJWEVwUWxxWm01MUZPQlQ2Z2pYRE1zeXRWSVIwMUx4K0dadmREamNSck5TWjNJSWdJRDgvSDdJZ0lDODNGNDFOVFlhOVQ0NlFQV2lhaHBIaFlRakpKQmlHQVhlYnkyZWt1S24vWnZvT0VhenRXZ2lxaW5naWdjbnhjUXdQRG1KNGFBZ0w4L05RWkJtUitYbkU0M0VpV0lTMEk0b2lSb2FIWWJmWlVoNlhXZzhGaFlWZjZFOUhCR3NMMEhVZHlXUVNzK0V3aGdZSDBkdlppY2o4UE9RdjljR094MktJUnFQSXpjc2pYd3doclVRWEZoQ2FuZ2JIY1lZZEk4TXd5QzhvU0V0OE4rTUVTOWQxeUpLRVNDU0NrZUZoRFBUMVlYcGk0cTVWNzVJb0loUU1vcktxaXFRckVOSzZkb2VIaHRhY3pwQXVlSXNGK1FVRmFmbFdNa2F3WkZuRzB1SWlKc2JITWREWGgvSFJVU3hGbzlEV2NIT0pydXVZbnB5RW9paUczdGtJbVUweW1jUkFmLzhkKzJrWmlSeVBaMU9YdVdTdFlLbXFpa1FpZ2VETURQcDdlakEwTUlDRlNHUkRONHJNVEUwaEhvL0RrNllYUVNETWhzTVlHeDQyL0RoejgvUFRka21LNlFSTDEzV0lvb2pnekF5R2g0WXcxTitQY0RBSWNaT0Z6SXNMQ3dqT3pCREJJcVJ0OCszdDdrWThGalAwT0dtYVJsRnhjZG84RVZNSTF1MXhxZkd4TVhSM2RpSTROUVVobVZ5VHk3Y1dKRW5DK09nb3FtdHFTTElvSWVWRW8xSDBkbmVuOVZMVU5Ra0d4NkdvdURodDM0aWhCVXRSbEZ0eHFmN2VYa3lNalNFYWlXemJTeDBiR1VFaWtTQ1hRQkJTdmlFUER3NGlPRDF0K0xHNjNHNFVGQmFtVHpDTk5pRXIrVkxCNldrTURneGdlSEFRYytFd05GWGQ5dDFuTGh6R2JEaE1CSXVRVXBMSkpLNjN0ME14eUczT2Q2TTRFRWpyOTJFSXdkSjFIWUlnWUc1MkZrTURBK2p2N1VVNEdJUWtpaWtkaDVCTVlteDBGR1hsNWNRdEpLUnM3WThNRDJQVUJNRjJpcUpRVlZPVDF0STFOcDB2U2xFVXpNL05ZV3gwRklOOWZaZ2NIMGNpSGsrYkg2L3JPdnE3ZTdCdi8zNDRpWlZGU0pGMTFkYmF1dWxEbzFUZ2RMdFJYRnljMWx6RmxBdVdxaWhZWEZ6RTFOUVVlcnU2TUQ0eWdsZ3N0cUZVaE8wZ0hKekJ4TVFFNmhzYXlOZEUyUFlOY21Xek5nUDVCUVhMTjVPbmtaUUsxdHpzTEs1Y3VvVFJvU0dFUXlIRGlOVHRLSXFDL3Q1ZVZGWlZwYVZXaXBBOUNFa0JiVmV1R0Q2emZjVWRMTit4STIzNVZ5dWt0TEpTRUFSMHRMVmhabXJLa0dLMXN1c05Ed3hzcUQwdGdiQ2VkVFk0MEkrZXJpNVRqTmRpdGFMS0FDay9LUlVzZDA0T2ZMbTVobjg1aXdzTEdPanIyN0ljTHdMaHl5d3RMZUd6aXhkVGZyQzBVWXBMU3BDWG41LzJjYVJVc0t4V0s0clNITFJiQzVxbW9ldkdqVnZkU0FtRXJWNWYzWjJkR0JrWU1NVjRLWXBDUlZVVjdBWm92NVJTd2VJNERzVTNlNmtibmRETjBoK2paeDRUekVjNEhNYkY4K2ROa1hjRkFGYWJEWlhWMVlaSTlVbDVkN0Rpa2hMWUhRN0R2eVJWVVhDOXJRM3h1N1NsSVJEV2l5Ukp1SHp4b2lteTJsY0lsSldoTUkzWjdXa1ZMSS9YaStLU0VsTzhxTW1icldxSWxVWFlDblJkeDBCL1A5cXVYREhObW1JWUJnMEdhaCtlY3NGaVdSWlZ0YldtYUpTbnlES3VYYjJLcGFVbDhyVVJOazFrZmg1blAvbmtyczBralliYjQwR0ZnUnBicGx5d0tJcENVWEV4WEdtNGNXUERWbFp2THpreEpHemFGZnpzNGtXTURRMlpac3dVUmFHNnRoWmVyOWN3WTBwTGgzdXZ6NGZDb2lKVHZEUkZsbkgxOG1WRXlZa2hZUk91WUU5WEZ5NjN0SmhxNCtNdEZ0UTNOc0ppc1dTM1lGbXRWbFJVVjV2bUp1V1pxU2wwbUtTYW5tREE5VE05alU4Ky90Z1VHZTIzVTFSU2d2SWRPd3cxcHJRb0JrVlIyRkZSQVpmYmJZb1hwMmthMmx0YkVaeVpJVjhmWVYwc1JxUDQrTU1QTVQwNWFhcHgwelNOUGZ2MndaN21VaHhEQ05hS1cxaHFNUFcrRzlGSUJKZGFXcEJNSnNsWFNGZ1RraVRoWWtzTHVqczZUSGZTWEZCVWhLcnFhbEFHODRMU05ocU80MUJUVjJlS0pOS1ZPRVJ2WnlmNmVucElBSjV3VHhSRndiWDJkclNjUFd2NFczRHVaRjAxM25jZlBBWUt0cWRkc0NpS1FtbFpHZndtcUMyOGZjZHNPWGNPYzdPejVJc2szRFdFME4vYmk0OU9uSUJnUW9zOHgrdEZVM096SVp0WXB0WGVjN25kcUcxb01OWGxwZUdaR2JTY08wZGNROEtxbHZqNDJCaE92djgrb2dzTHBocy9SVkZvM3JuVHNMZWdwMVd3R0laQlRWMGRIRTZucVJaa1YwY0h1bS9jTUoycFQ5ait0VEU5TllVVDc3NkxrRWtQYUp4dU4rN2J0Y3V3RndxblBhS1dsNStQc29vS1U3MVVTUlJ4N3BOUE1Eayt2dTJ1aFN6THBEVElKR0lWQ2dieDNxOStoZEhoWVZPK000cWlzSFAzYnNQVURScFNzQ3dXQytvYUcwM1gzVE1haWVEVE0yZXdFSWxzK2NLWEpBbmo0K000ZC9ZczN2N2xMekU5UFUxRXkraWhnbkFZNzcvekxvWUhCa3o3cmp3K0gzYnYzUXZPd045aTJvL29LSXBDUldVbDhvdUtNREU2YXFvZGRXUmdBQmZPbmNQRGp6MjI2ZGF4c2l4allXRUI0Mk5qdU5iV2hvRytQa1FYRnFBb0NpWW5KL0gxYjN6REZMM0VzdEd5Q3M3TTRMMTMzc0ZnYjY5cHhZcW1hVFR2M0puV093ZE5JVmdBNEhBNHNHdnZYa3hOVEVBelVWeEkwelJjdTNJRlhwOFBCdzRlWFBmMVI2cXFJaDZQWTJKOEhGMDNicUNudXhzelUxTmZ5YWp2dm5FRHIrczZYbno1WlFSS1MwMVRJWkFOWWpVMU5ZWDNmL1VyVTF0V0s5YlZubjM3REJ1N01wUmdyWFEwTENncXd2VEVoS2xldEN6TE9IL21ESnhPSnhyWGNCU3NheHFTZ29DWjZXbjA5ZmFpcTdNVG84UERrRVR4cmd1K3A3TVRyd29DWG56NVpWVFgxQkRSTXNCbU5Ub3lnaFB2dllmeGtSRlRpeFZOMDloLzhDRHlDd29NUDFiRFpHMTZQQjQwN2R5SjRQUzBxYXdzQUVqRTR6ano0WWV3T3h5b3ZFTXJqcFc0MVB6Y0hQcjcrdEZ4L1JwR2g0ZXh0TGk0cm9VK01qaUluLzNUUCtIcjMvZ21HcG9hMDNxaFpUYWpLQXI2ZW5wdzRyMzNFQTRHVGY4OHhZRUFkdTdhWllyTGd5bmRRRnZEL053YzNuajFWVk4xWTd5ZHd1SmlQUDM4OHdpVWxvS2lLS2lLZ3ZsSUJHTWpJK2p1NmtKdmR3OW13NkZONzhaZW53OVBQL2NjN3IvL2ZsZ05WdXVWNllpQ2dQYjJkbng4OG1SRzlQem5PQTdQdi9RUzl1N2Zid3FyM1ZDQ3Bha3FXczZmeDY5UG5USnQrVXVndkJ3UFAvNDRSRWxDWjBjSHVtN2NRRGdZaENSSlcvcnZXRzAySEgvMFVSeC81QkY0UEI2aUpDa2dHbzNpd3JseitPejhlVlBjMUx3V0dwcWI4ZUlycjhCcGtseElRd2tXQU15R3czajkvLzAveklaQ3BubnB0MXhBbW9Zb1NtQllCdEZvZE52TE1taUd3YTQ5ZS9EVU04K2l0SXdFNDdkdEk5VTBURTlQNCtOVHA5RFQyWmt4dGFST2x3dXYvUFp2bzZhMjFqemZtdEVFUzFWVlhHcHB3VWNuVHhvNmxrVlJGRUJSMEhRZHFxSkFFRVVrazBuSXNwenlzWlFFU3ZIVTE1N0ZmVHQzd21xMUVvWFpRZ1JCUUhkWEZ6NzU2Q09FWm1ZeUpoK09wbWtjZS9oaFBQckVFNFkvR1RTMFlBSEx2YS9mZk8wMVE1NFlyZ2lWb2loSTNoUXB4UURaNkRhN0hZZVBIY05EeDQ4ak55K1BXRnViUk5kMXpNL040ZnpaczdoNitYTEd1SUMzaHk2KzhhMXZHYlptY0RVTWVjeVU0L0ZnOTc1OUNBZURVTkpnc2F3cVVxb0tTUlFoQ0FKRVdZS21HTWNDVENZUytQalVLWXdPRCtQUko1NUFRMk1qc2JZMmlDZ0k2TzNwd2ZsUHoySmliRFRqMmdsWmJUWWNmZkJCK1B4KzA0M2RrQllXQU1SaU1iejErdXNZVHRQdHVMZTdmTElzSXhhUFE1WmxxQVp1azB4UkZHaWFSazVPRGc0ZFBZb0hEaDlHYmw0ZXlZNWZSemdpR0F6aXN3c1hjTDJ0elpTdFlkYXlSZzRjT29Sbm5udk9VTDNhVFcxaEFjdlo3L2NmT29UcHljbVVMWndWa1FKRlFaWmx4Qk1KU0pJRWVZdFArTFlqSHNHeUxIaU9BOE13MERVTkxXZlBZblJrQkFjUEhVSkRZeU1jVGljUnJydTRmOUZvRk5mYjIzSGxzODh3R3dwbGJPMW1jU0NBdzhlT21WS3NERzFoclpqbUo5OS9IOWRhVzdkMUFWRzNpWlFveXhDU1NVaVNaT2hGUzlNMEdJWUJ4M0ZnV1JiTUtqRXJqdU5RV1ZPRGc0Y09ZVWRsNWFackhqTk5xT0t4R0FiNisvRlpTd3ZHUjBZeXVtV1F6VzdIYjd6OE1uYnUybVhhemN2UWdnVUFVNU9UK01WcnJ5RXlON2VsZnkvRHNzakp5UUZ2dFdKMFpBVHhlQnlTSkJrNlhrRlIxTEpJc1J3NGpnVk4wMnRlZUZhYkRYVU5EZGgzNEFCS3k4dGhzVml5MXVMU2RSMkpSQUtEL2YyNGN1blNyZEtvVElhbWFSeDU2Q0U4K3NRVHByV3VUQ0ZZcXFyaTRvVUx5OG1rbTl6OWFKcUd3K2xFZVdVbEtxdXJFU2dyZ3l6TGVQV25QMFYvYjY4eFh4Q1c4NjA0bGdWMzArWGJqTkRZSFE3VTF0ZGo1NTQ5S0Mwcmc4UGh5QnJoMGpRTlMwdExHQjRjUlB2VnF4Z2VITXg0b1ZxaHFyWVdMNzN5Q3J3K242bWZ3L0NDQlFDTGk0dDQrODAzTnhTQXB5Z0tOcnNkaGNYRnFLeXBRV1YxTmJ4ZUwzaWVCMFZSeTVkY2RuZmpwei81Q1NMejg0WjVab2Ftd2R3VUtaWmh0anhOd1dLMW9tekhEdXphdXhjVmxaWEl5Y2t4UlMzWlJwQmxHWkZJQkFOOWZiamUxb2JweWNrdHJ6d3dNbDYvSHk5Lzg1dW9xS3cwL2Vaa0NzSFNkUjFEZzRONCs0MDNFRnRhV3ROL3cxc3M4T1htb3JxMkZsVTFOY2pOeTRQZGJyL2pDMU1VQlorZU9ZTzMzbmdqTFltZnR5eEFpZ0xEc09ENFpaRmlhR2JaeE5wT1lXUVlGSldVb0thK0huWDE5Y2d2S0lERllqRjlIcGVxcWhBRUFaTVRFK2pwNnNKQVh4L213dUdzdS9HSXQxand6UFBQWS8vOTkyZkVobVFLd1ZyWkpjK2VPWU1MbjM2NnFtdklzQ3c4UGg5MjNIVDVTa3BLNEhTNTF2VHh4V054dlAzV0wzSDJ6Sm1VQnRzL2owdXhZRmtPREVPblpSZWtLQXBXbXcwVjFkV29yYXREb0t3TVBwL1BWT0sxSWxLaFlCQ2pJeU1ZNk92RCtPZ29aSU1mb0d6YkJralRPSFRzR0I1NzhzbU15Y2t6aldBQndNTENBdjc1alRjd05qejhoWmZpY0RwUlVsYUd1b1lHbEphVndlVjJnMlhaZFgvNHM3T3plUFduUDBYWGpSc3BjZmxZbGdQUGJ6NHV0UjFXbDhQcFhMYTg2dXBRZWxPOHJEYWJvY2FxNnpvVVJVRWlIa2N3R01UWTZDaUdCd1lRbkpsQk1wSEk2dnNqS1lwQ1hXTVRmdVBGRnd4NXYyQldDTmFLYS9pclgvd0NraWlpdUxRVTFiVzFLTit4QXo2L2Y5TW5YeXQvL3ovOXd6OGd0QTE5amxieXBaYXRLZFljN1R3b0NnNm5jL21tN3ZKeUZBY0N5TXZMZzh2dGh0UHB2Q1ZnMnkxaXVxNUQxM1hJa29SWUxJWklKSUpRTUlqcHFTbE1qSTBoTWorZmNlVXptNkU0RU1DTHI3eUNra0FnczRSWU41bXR2Tkk4elc2M0k3K2dBRmFiYlVzL2ZFM1RjSzI5SFQvL3YvOTNTL29kMFNzdUg4ZUI1YmhWODZYTUFzdXlzRml0eVBGNDRQUDdVVlJjREg5ZUh0eHVOeHdPQjZ4V0s5aVYzTENiaHdWckZUTk4wNkJwR2xSVmhhb29FQ1VKeVdRU3lVUUNrZmw1ek16TUlCd01ZaUVTd1dJMENra1V5UzNjZHlESDQ4RnZmdjNycUt1dno3Z1RZTk1KVmlxUVpSbm56NTdGVzIrK3VhRmRlNlZFaHIvdHc4M1UxSUVWNjRybE9MamNidGpzZHRqdGRqaGRMamdjRG5BOEQ1N25ZYkZZbGs5bWFYbzVWWU9tb2FvcVpFV0JJc3VRSkFtaUtFSklKcEZNSmhGYldrSWlIci8xbzZycUxTdUxzRG8ydXgzUFBQODg5dXpibDVHbnZrU3dWaUdaVE9MVWlSTTQvY0VIWDdrVVlsV1JvaWl3TjVNNk54SkR5elFodTVPSXIrYnEzYjRNeVpMY0dEelA0L2pqaitQSXNXT211elp2elJZK2VjMnI3RlEyR3g1NTdESEVZakdjdjh2SjVPZHhLUTRzeTVDMkxxdUlqcTdyeEgzYlJoaUd3ZjJIRCtPQnc0Y3pWcXlJWU4wRGw4dUZaNTU5Rm9JZzRNckZpN2MrUW9xaXdETHNMVXRxUFhFYUFtR3JvV2thZXc0Y3dJTVBQNXp4dGFKRXNPNkIxK2ZEYzg4L0QxRVEwTlhSY2V1VUw1UGpVZ1J6dWQ3TnUzZmowY2NmaDh2bHl2em5KVEdzdGJrM29WQUk3Ly9xSGZUM2RKTVlDOEV3WXRYUTNJeG5ubjhlZmhNMjQ5dVFOVWxlKzlvV1JrRkJBWjU1L2puVVpPQlJNY0djYTdLK3FRbFBmZTFyV1NOV1JMRFdTWDUrUHA1NTdqbFUxeEhSSXFSWHJPb2FtL0QwMTc2R1BKUDFaQ2N1WVpyY3d3L2VlUWQ5M2NROUpLVFl3cUJwMURjMzQ2bG5uODA2c1NLQ3RRblJDb2ZET1BuZWUraStjWU9JRmlGbFl0VzhlemVlZVBycHJISURpV0J0RWZQejh6ajl3UWZvYUcvUDZOYTZoUFRETUF6MkhEaUFSNTk0SXF0ditpYUN0VW1pMFNoKy9lR0hhUDNzc3pWbHhCTUk2NFhuZVJ3OGNnUVBIajhPWnhha0xoREIybWJpOFRoYXpwM0R1VTgrSVIwRENGdUt6VzdIZzQ4OGdvT0hEcEVMUkloZ2JSMmlJT0JxYXlzK1BuVnF6VjFSQ1lTNzRmWDc4ZWdUVCtDK1hic3l1dHlHQ0ZhYVVHUVpQZDNkK1BEa1NRU25wOG1FRURaTVNXa3BubmptR1ZSVlYyZHNyMzBpV0FaQTB6Uk1qSS9qOUlrVEdPcnZKd1cvaEhYQk1BeHFHeHJ3MkpOUG9xaTRtT1Q3RWNIYWZuUmR4L3pjSEQ0OWN3YnRWNjVrMVEwdGhJMWpzVnB4LzZGRE9ITHNHSEt5K0NTUUNGYWFTQ1FTYUd0dHhTY2ZmNHlsTGVoZVNzaGN2SDQvSG5uOGNUVHYzSmt4RjBZUXdUSWhpcUpnY0dBQXZ6NTlHdU9qbzhSRkpIekZCYXlxcThQRGp6Nkswckl5RXE4aWdtVU1GM0Z1ZGhZWHpwM0QxY3VYU2VvREFjRHlMZHdIRGgzQ0E0Y09JY2ZqSWZFcUlsakdRa2dtMGRuWmlVOCsrZ2l6b1JBcDZjbFNhSnBHU1drcEhucmtVZFRVMVpLVUJTSll4a1hUTkV4UFQ2UGw3RmwwWExzR1NSVEpwR1FSTnJzZGV3NGN3QU9IRGlFM0w0OVlWVVN3ekVFeWtVQlhaeWZPbmptRDBNd01zYmF5d0tvcUxTL0hzWWNmUm5WTkRTd1dDNWtVSWxqbXM3WkN3U0F1Zi9ZWjJsdGJrWWpIeWFSazJnZEdVWEM1M2RoLzhDRDJIamdBbjg5SHJDb2lXT1pHRkVVTURneWc1ZHc1akF3T2tpTHFESUhuZWRRMU5lSFFrU01JbEphQzR6Z3lLVVN3TWdOZDE3RzR1SWl1ems1Y1BIY09zNkVRU1lFd0tTekxvaWdRd09GangxQmJXd3U3dzBFbWhRaFc1cnFKNFhBWWJhMnR1TjdXaG9YNWVSTGZNZ2swVFNPdm9BQjdEeHpBZmJ0MndVTlNGWWhnWlF1eUxDTVVES0wxOG1WMHRMZVREaEJHL29nb0NoNmZEM3YyN2NPdVBYdmd6ODBsQ2FCRXNMSVRTWkl3T1RHQnR0WldkSGQySXI2MFJDd3VBd21WMSsvSHp0MjdjZCt1WGNndktBRExrcXMraVdBUklJb2lwcWVtMEg3MUtubzZPeEZkV0NDVGtrYWh5aXNvUUdOek14RXFJbGlFZTFsY3daa1pkSFowb09QYU5VUWpFZEpQUGtWd0hJZmMvSHpzM2I4ZnRmWDE4UG45UktpSVlCSFdncUlvbUp1YlEyOTNON3B2M01EVXhBUnBZN05OMkIwT2xGZFVvTEc1R1ZVMU5jakp5UUZOa3lzOWlXQVIxbzJxcW9qSFloZ2RIVVZYUndjR0J3WVFXMXdrY2E1TlF0TTB2SDQvNmhzYjBkamNqTUxDUXRqc2RuTHFSd1NMc0JYb3VnNUpGREU3TzRlQi9qNzA5ZlJnY253Y2tpZ1M4VnFIU0RsY0xwVHQySUc2K25xVVYxVEE2L1dTaEU4aVdJVHRSTk0wSk9KeFRFOVBvNyszRnlQRHd3Z0hneENTU1RJNVgvNEFLQXBPdHh1RnhjV29xcTVHVlhVMWNuTnpZYkZhaVRWRkJJdVFEcGN4dHJTRVlEQ0kwZUZoOVBYMFlHNTJGcUlnWkdVbVBVVlJZQmdHTm9jRFJTVWxxS3V2UjZDMERQNWNQMncyRzRsTkVjRWlHTVZsMURRTmdpQmdabm9ha3hNVG1CZ2Z4L1RrSkJhalVjaVNsTEd1STAzVHNGaXQ4T2Ztb2pnUVFLQ3NESUZBQUQ2L0h4ekhFWkVpZ2tVd2c5c29TUkppc1JobXcyRk1qbzlqY21JQ3daa1p4R014VThlK1ZnUXF4K05CU1NDQWt0SlNGQlVYdyt2endXNjNnMlZaNHU0UndTS1lYY0JFVVVRaWtVQmtmaDZoVUFpaG1SbUVReUVzUnFOWVhGaUFvaWkzUkN6ZHk0YWlxRnMvVnBzTk9SNFBQRjR2OGdzS2tKZWZEMzl1TGp4ZUwydzJHemlPSXdKRkJJdVE2UzZrcXFxUUpBbnhXQXl4V0F5UitYbk16YzBoTWorUFdDeUcrTklTa29rRUpFbUNMTXZiNGxZeURBT081OEh4UEN3V0N4d09CeHd1RjF3dUYzeCsvN0l3ZVR4d09CeXczYlNlU0IwZkVTd0NBYnF1TDhmQ2JncVpKRWtRUlJISlpCS0NJRUM0K2IvSlpCTEpSQUtDSUVBVVJZaUNBRm1Xb1NyS0Y2dzBtcWJCY2h3NGpnUEg4N0JhcmJCWUxMRGFiTERaYkxEYWJMQmFyY3UvdGxwaHRkbkE4eng0bnI5bE5hMzhFSWhnRVFqckVyT2J2NEIrbTdpdC9Iemx6OTEwNjc3ZzRpMy80aXRDUkFTSlFBU0xRQ0NZRG5LZVN5QVFpR0FSQ0FRQ0VTd0NnVUFFaTBBZ0VJaGdFUWdFQWhFc0FvRkFCSXRBSUJDSVlCRUlCTUxtK1ArZ1pmcXJCcUFYbWdBQUFBQkpSVTVFcmtKZ2dnPT0iLCJtZWRpYXR5cGUiOiJpbWFnZS9wbmcifV0sImluc3RhbGwiOnsic3BlYyI6eyJjbHVzdGVyUGVybWlzc2lvbnMiOlt7InJ1bGVzIjpbeyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJzZWNyZXRzIiwicG9kcyIsInBvZHMvZXhlYyIsInBvZHMvbG9nIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbImFwcHMiXSwicmVzb3VyY2VzIjpbImRlcGxveW1lbnRzIiwiZGFlbW9uc2V0cyIsInJlcGxpY2FzZXRzIiwic3RhdGVmdWxzZXRzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbImltcGFpcm1lbnQucmVkaGF0LmNvbS5yZWRoYXQuY29tIl0sInJlc291cmNlcyI6WyJjbHVzdGVyLWltcGFpcm1lbnRzIiwiY2x1c3Rlci1pbXBhaXJtZW50cy9zdGF0dXMiLCJjbHVzdGVyLWltcGFpcm1lbnRzL2ZpbmFsaXplcnMiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiYXBwcy5yZWRoYXQuY29tIl0sInJlc291cmNlcyI6WyJjbHVzdGVyaW1wYWlybWVudHMiLCJjbHVzdGVyaW1wYWlybWVudHMvc3RhdHVzIiwiY2x1c3RlcmltcGFpcm1lbnRzL2ZpbmFsaXplcnMiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJuYW1lc3BhY2VzIl0sInZlcmJzIjpbImdldCIsImxpc3QiXX0seyJhcGlHcm91cHMiOlsiYXV0aGVudGljYXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJ0b2tlbnJldmlld3MiXSwidmVyYnMiOlsiY3JlYXRlIl19LHsiYXBpR3JvdXBzIjpbImF1dGhvcml6YXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJzdWJqZWN0YWNjZXNzcmV2aWV3cyJdLCJ2ZXJicyI6WyJjcmVhdGUiXX1dLCJzZXJ2aWNlQWNjb3VudE5hbWUiOiJjbHVzdGVyLWltcGFpcm1lbnQtb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyIn1dLCJkZXBsb3ltZW50cyI6W3sibmFtZSI6ImNsdXN0ZXItaW1wYWlybWVudC1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIiLCJzcGVjIjp7InJlcGxpY2FzIjoxLCJzZWxlY3RvciI6eyJtYXRjaExhYmVscyI6eyJjb250cm9sLXBsYW5lIjoiY29udHJvbGxlci1tYW5hZ2VyIn19LCJzdHJhdGVneSI6e30sInRlbXBsYXRlIjp7Im1ldGFkYXRhIjp7ImxhYmVscyI6eyJjb250cm9sLXBsYW5lIjoiY29udHJvbGxlci1tYW5hZ2VyIn19LCJzcGVjIjp7ImNvbnRhaW5lcnMiOlt7ImFyZ3MiOlsiLS1zZWN1cmUtbGlzdGVuLWFkZHJlc3M9MC4wLjAuMDo4NDQzIiwiLS11cHN0cmVhbT1odHRwOi8vMTI3LjAuMC4xOjgwODAvIiwiLS1sb2d0b3N0ZGVycj10cnVlIiwiLS12PTEwIl0sImltYWdlIjoiZ2NyLmlvL2t1YmVidWlsZGVyL2t1YmUtcmJhYy1wcm94eTp2MC44LjAiLCJuYW1lIjoia3ViZS1yYmFjLXByb3h5IiwicG9ydHMiOlt7ImNvbnRhaW5lclBvcnQiOjg0NDMsIm5hbWUiOiJodHRwcyJ9XSwicmVzb3VyY2VzIjp7fX0seyJhcmdzIjpbIi0taGVhbHRoLXByb2JlLWJpbmQtYWRkcmVzcz06Njc4OSIsIi0tbWV0cmljcy1iaW5kLWFkZHJlc3M9MTI3LjAuMC4xOjgwODAiLCItLWxlYWRlci1lbGVjdCIsIi0tbGVhZGVyLWVsZWN0aW9uLWlkPWNsdXN0ZXItaW1wYWlybWVudC1vcGVyYXRvciIsIi0temFwLWxvZy1sZXZlbD1lcnJvciJdLCJlbnYiOlt7Im5hbWUiOiJBTlNJQkxFX0dBVEhFUklORyIsInZhbHVlIjoiZXhwbGljaXQifSx7Im5hbWUiOiJQT0RfTkFNRVNQQUNFIiwidmFsdWVGcm9tIjp7ImZpZWxkUmVmIjp7ImZpZWxkUGF0aCI6Im1ldGFkYXRhLm5hbWVzcGFjZSJ9fX1dLCJpbWFnZSI6InF1YXkuaW8vcmVkaGF0LXBlcmZvcm1hbmNlL2NsdXN0ZXItaW1wYWlybWVudC1vcGVyYXRvcjoxLjAuNCIsImxpdmVuZXNzUHJvYmUiOnsiaHR0cEdldCI6eyJwYXRoIjoiL2hlYWx0aHoiLCJwb3J0Ijo2Nzg5fSwiaW5pdGlhbERlbGF5U2Vjb25kcyI6MTUsInBlcmlvZFNlY29uZHMiOjIwfSwibmFtZSI6Im1hbmFnZXIiLCJyZWFkaW5lc3NQcm9iZSI6eyJodHRwR2V0Ijp7InBhdGgiOiIvcmVhZHl6IiwicG9ydCI6Njc4OX0sImluaXRpYWxEZWxheVNlY29uZHMiOjUsInBlcmlvZFNlY29uZHMiOjEwfSwicmVzb3VyY2VzIjp7fSwic2VjdXJpdHlDb250ZXh0Ijp7ImFsbG93UHJpdmlsZWdlRXNjYWxhdGlvbiI6ZmFsc2V9fV0sInNlY3VyaXR5Q29udGV4dCI6eyJydW5Bc05vblJvb3QiOnRydWV9LCJzZXJ2aWNlQWNjb3VudE5hbWUiOiJjbHVzdGVyLWltcGFpcm1lbnQtb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyIiwidGVybWluYXRpb25HcmFjZVBlcmlvZFNlY29uZHMiOjEwfX19fV0sInBlcm1pc3Npb25zIjpbeyJydWxlcyI6W3siYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsiY29uZmlnbWFwcyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giLCJjcmVhdGUiLCJ1cGRhdGUiLCJwYXRjaCIsImRlbGV0ZSJdfSx7ImFwaUdyb3VwcyI6WyJjb29yZGluYXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJsZWFzZXMiXSwidmVyYnMiOlsiZ2V0IiwibGlzdCIsIndhdGNoIiwiY3JlYXRlIiwidXBkYXRlIiwicGF0Y2giLCJkZWxldGUiXX0seyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJldmVudHMiXSwidmVyYnMiOlsiY3JlYXRlIiwicGF0Y2giXX1dLCJzZXJ2aWNlQWNjb3VudE5hbWUiOiJjbHVzdGVyLWltcGFpcm1lbnQtb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyIn1dfSwic3RyYXRlZ3kiOiJkZXBsb3ltZW50In0sImluc3RhbGxNb2RlcyI6W3sic3VwcG9ydGVkIjpmYWxzZSwidHlwZSI6Ik93bk5hbWVzcGFjZSJ9LHsic3VwcG9ydGVkIjpmYWxzZSwidHlwZSI6IlNpbmdsZU5hbWVzcGFjZSJ9LHsic3VwcG9ydGVkIjpmYWxzZSwidHlwZSI6Ik11bHRpTmFtZXNwYWNlIn0seyJzdXBwb3J0ZWQiOnRydWUsInR5cGUiOiJBbGxOYW1lc3BhY2VzIn1dLCJrZXl3b3JkcyI6WyJuZXR3b3JrIiwiaW1wYWlybWVudCIsImt1YmVybmV0ZXMiLCJvcGVuc2hpZnQiLCJ0YyIsInRyYWZmaWNjb250cm9sIl0sImxpbmtzIjpbeyJuYW1lIjoiQ2x1c3RlciBJbXBhaXJtZW50IE9wZXJhdG9yIiwidXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL3JlZGhhdC1wZXJmb3JtYW5jZS9jbHVzdGVyLWltcGFpcm1lbnQtb3BlcmF0b3IifV0sIm1haW50YWluZXJzIjpbeyJlbWFpbCI6ImpvY29ubmVsQHJlZGhhdC5jb20iLCJuYW1lIjoiSmFyZWQgTydDb25uZWxsIn0seyJlbWFpbCI6ImFrcnpvc0ByZWRoYXQuY29tIiwibmFtZSI6IkFsZXggS3J6b3MifV0sIm1hdHVyaXR5IjoiYmV0YSIsIm1pbkt1YmVWZXJzaW9uIjoiMS4xNi4wIiwicHJvdmlkZXIiOnsibmFtZSI6IlJlZCBIYXQgUGVyZm9ybWFuY2UifSwidmVyc2lvbiI6IjEuMC40In19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZUFjY291bnQiLCJtZXRhZGF0YSI6eyJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im5ldHdvcmstYWNjZXNzLXNhIn19
relatedImages:
  - image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
    name: ""
  - image: quay.io/openshift-community-operators/cluster-impairment-operator@sha256:6fd114eb8f525f670e505373c2999a4e66b53beda988e99b267204d2fe0e1b4f
    name: ""
  - image: quay.io/redhat-performance/cluster-impairment-operator:1.0.4
    name: ""
schema: olm.bundle
