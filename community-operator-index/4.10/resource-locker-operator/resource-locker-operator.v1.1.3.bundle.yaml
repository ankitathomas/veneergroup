image: quay.io/openshift-community-operators/resource-locker-operator@sha256:9cc08639be2af4b72a9b816420d87dfa290a168fb83edc947a04b3e06cdb675b
name: resource-locker-operator.v1.1.3
package: resource-locker-operator
properties:
  - type: olm.gvk
    value:
      group: redhatcop.redhat.io
      kind: ResourceLocker
      version: v1alpha1
  - type: olm.package
    value:
      packageName: resource-locker-operator
      version: 1.1.3
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoibW9uaXRvcmluZy5jb3Jlb3MuY29tL3YxIiwia2luZCI6IlNlcnZpY2VNb25pdG9yIiwibWV0YWRhdGEiOnsibGFiZWxzIjp7ImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifSwibmFtZSI6InJlc291cmNlLWxvY2tlci1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1tb25pdG9yIn0sInNwZWMiOnsiZW5kcG9pbnRzIjpbeyJiZWFyZXJUb2tlbkZpbGUiOiIvdmFyL3J1bi9zZWNyZXRzL2t1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvdG9rZW4iLCJpbnRlcnZhbCI6IjMwcyIsInBvcnQiOiJodHRwcyIsInNjaGVtZSI6Imh0dHBzIiwidGxzQ29uZmlnIjp7ImNhRmlsZSI6Ii9ldGMvcHJvbWV0aGV1cy9jb25maWdtYXBzL3NlcnZpbmctY2VydHMtY2EtYnVuZGxlL3NlcnZpY2UtY2EuY3J0Iiwic2VydmVyTmFtZSI6InJlc291cmNlLWxvY2tlci1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy5yZXNvdXJjZS1sb2NrZXItb3BlcmF0b3Iuc3ZjIn19XSwic2VsZWN0b3IiOnsibWF0Y2hMYWJlbHMiOnsib3BlcmF0b3IiOiJyZXNvdXJjZS1sb2NrZXItb3BlcmF0b3IifX19fQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImFubm90YXRpb25zIjp7InNlcnZpY2UuYWxwaGEub3BlbnNoaWZ0LmlvL3NlcnZpbmctY2VydC1zZWNyZXQtbmFtZSI6InJlc291cmNlLWxvY2tlci1vcGVyYXRvci1jZXJ0cyJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibGFiZWxzIjp7Im9wZXJhdG9yIjoicmVzb3VyY2UtbG9ja2VyLW9wZXJhdG9yIn0sIm5hbWUiOiJyZXNvdXJjZS1sb2NrZXItb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyLW1ldHJpY3MifSwic3BlYyI6eyJwb3J0cyI6W3sibmFtZSI6Imh0dHBzIiwicG9ydCI6ODQ0MywidGFyZ2V0UG9ydCI6Imh0dHBzIn1dLCJzZWxlY3RvciI6eyJvcGVyYXRvciI6InJlc291cmNlLWxvY2tlci1vcGVyYXRvciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoicmVzb3VyY2UtbG9ja2VyLW9wZXJhdG9yLW1ldHJpY3MtcmVhZGVyIn0sInJ1bGVzIjpbeyJub25SZXNvdXJjZVVSTHMiOlsiL21ldHJpY3MiXSwidmVyYnMiOlsiZ2V0Il19XX0=
  - type: olm.bundle.object
    value:
      data: 
relatedImages:
  - image: quay.io/openshift-community-operators/resource-locker-operator@sha256:9cc08639be2af4b72a9b816420d87dfa290a168fb83edc947a04b3e06cdb675b
    name: ""
  - image: quay.io/redhat-cop/kube-rbac-proxy@sha256:c68135620167c41e3d9f6c1d2ca1eb8fa24312b86186d09b8010656b9d25fb47
    name: quay.io/redhat-cop/kube-rbac-proxy
  - image: quay.io/redhat-cop/resource-locker-operator@sha256:2176db02f561c24012c5179495c89c3819500dff21e89a62052d465eb3314b44
    name: quay.io/redhat-cop/resource-locker-operator
schema: olm.bundle
