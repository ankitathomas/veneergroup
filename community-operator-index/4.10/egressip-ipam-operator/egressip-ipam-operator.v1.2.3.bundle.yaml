image: quay.io/openshift-community-operators/egressip-ipam-operator@sha256:89db6c8ec30b39f128bcd0a3a251630e0547906394bf4624d301109d5131143d
name: egressip-ipam-operator.v1.2.3
package: egressip-ipam-operator
properties:
  - type: olm.gvk
    value:
      group: redhatcop.redhat.io
      kind: EgressIPAM
      version: v1alpha1
  - type: olm.package
    value:
      packageName: egressip-ipam-operator
      version: 1.2.3
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoibW9uaXRvcmluZy5jb3Jlb3MuY29tL3YxIiwia2luZCI6IlNlcnZpY2VNb25pdG9yIiwibWV0YWRhdGEiOnsibGFiZWxzIjp7Im9wZXJhdG9yIjoiZWdyZXNzaXAtaXBhbS1vcGVyYXRvciJ9LCJuYW1lIjoiZWdyZXNzaXAtaXBhbS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1tb25pdG9yIn0sInNwZWMiOnsiZW5kcG9pbnRzIjpbeyJiZWFyZXJUb2tlbkZpbGUiOiIvdmFyL3J1bi9zZWNyZXRzL2t1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvdG9rZW4iLCJpbnRlcnZhbCI6IjMwcyIsInBvcnQiOiJodHRwcyIsInNjaGVtZSI6Imh0dHBzIiwidGxzQ29uZmlnIjp7ImNhRmlsZSI6Ii9ldGMvcHJvbWV0aGV1cy9jb25maWdtYXBzL3NlcnZpbmctY2VydHMtY2EtYnVuZGxlL3NlcnZpY2UtY2EuY3J0Iiwic2VydmVyTmFtZSI6ImVncmVzc2lwLWlwYW0tb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyLW1ldHJpY3MuZWdyZXNzaXAtaXBhbS1vcGVyYXRvci5zdmMifX1dLCJzZWxlY3RvciI6eyJtYXRjaExhYmVscyI6eyJvcGVyYXRvciI6ImVncmVzc2lwLWlwYW0tb3BlcmF0b3IifX19fQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImFubm90YXRpb25zIjp7InNlcnZpY2UuYWxwaGEub3BlbnNoaWZ0LmlvL3NlcnZpbmctY2VydC1zZWNyZXQtbmFtZSI6ImVncmVzc2lwLWlwYW0tb3BlcmF0b3ItY2VydHMifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsImxhYmVscyI6eyJvcGVyYXRvciI6ImVncmVzc2lwLWlwYW0tb3BlcmF0b3IifSwibmFtZSI6ImVncmVzc2lwLWlwYW0tb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyLW1ldHJpY3MifSwic3BlYyI6eyJwb3J0cyI6W3sibmFtZSI6Imh0dHBzIiwicG9ydCI6ODQ0MywidGFyZ2V0UG9ydCI6Imh0dHBzIn1dLCJzZWxlY3RvciI6eyJvcGVyYXRvciI6ImVncmVzc2lwLWlwYW0tb3BlcmF0b3IifX0sInN0YXR1cyI6eyJsb2FkQmFsYW5jZXIiOnt9fX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODFcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogOWFlOTQzYmYucmVkaGF0LmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJlZ3Jlc3NpcC1pcGFtLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiZWdyZXNzaXAtaXBhbS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
relatedImages:
  - image: quay.io/openshift-community-operators/egressip-ipam-operator@sha256:89db6c8ec30b39f128bcd0a3a251630e0547906394bf4624d301109d5131143d
    name: ""
  - image: quay.io/redhat-cop/egressip-ipam-operator@sha256:a18d3a593e2b3f2aaf18384be08473a56fc35b9257c7a706ee9f8e8a4d37e064
    name: quay.io/redhat-cop/egressip-ipam-operator
  - image: quay.io/redhat-cop/kube-rbac-proxy@sha256:c68135620167c41e3d9f6c1d2ca1eb8fa24312b86186d09b8010656b9d25fb47
    name: quay.io/redhat-cop/kube-rbac-proxy
schema: olm.bundle
