image: quay.io/openshift-community-operators/ack-kms-controller@sha256:36a8c3e7630eb7ed83b5acb7f955b6625a3a0025705fadc40785d7346cf1599a
name: ack-kms-controller.v0.0.18
package: ack-kms-controller
properties:
  - type: olm.gvk
    value:
      group: kms.services.k8s.aws
      kind: Alias
      version: v1alpha1
  - type: olm.gvk
    value:
      group: kms.services.k8s.aws
      kind: CustomKeyStore
      version: v1alpha1
  - type: olm.gvk
    value:
      group: kms.services.k8s.aws
      kind: Grant
      version: v1alpha1
  - type: olm.gvk
    value:
      group: kms.services.k8s.aws
      kind: Key
      version: v1alpha1
  - type: olm.package
    value:
      packageName: ack-kms-controller
      version: 0.0.18
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiYWNrLWttcy1tZXRyaWNzLXNlcnZpY2UifSwic3BlYyI6eyJwb3J0cyI6W3sibmFtZSI6Im1ldHJpY3Nwb3J0IiwicG9ydCI6ODA4MCwicHJvdG9jb2wiOiJUQ1AiLCJ0YXJnZXRQb3J0IjoiaHR0cCJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXIifSwidHlwZSI6Ik5vZGVQb3J0In0sInN0YXR1cyI6eyJsb2FkQmFsYW5jZXIiOnt9fX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJhY2sta21zLXJlYWRlciJ9LCJydWxlcyI6W3siYXBpR3JvdXBzIjpbImttcy5zZXJ2aWNlcy5rOHMuYXdzIl0sInJlc291cmNlcyI6WyJhbGlhc2VzIiwiY3VzdG9ta2V5c3RvcmVzIiwiZ3JhbnRzIiwia2V5cyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giXX1dfQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJhY2sta21zLXdyaXRlciJ9LCJydWxlcyI6W3siYXBpR3JvdXBzIjpbImttcy5zZXJ2aWNlcy5rOHMuYXdzIl0sInJlc291cmNlcyI6WyJhbGlhc2VzIiwiY3VzdG9ta2V5c3RvcmVzIiwiZ3JhbnRzIiwia2V5cyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJrbXMuc2VydmljZXMuazhzLmF3cyJdLCJyZXNvdXJjZXMiOlsiYWxpYXNlcyIsImN1c3RvbWtleXN0b3JlcyIsImdyYW50cyIsImtleXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX1dfQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjcuMCJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImFsaWFzZXMua21zLnNlcnZpY2VzLms4cy5hd3MifSwic3BlYyI6eyJncm91cCI6Imttcy5zZXJ2aWNlcy5rOHMuYXdzIiwibmFtZXMiOnsia2luZCI6IkFsaWFzIiwibGlzdEtpbmQiOiJBbGlhc0xpc3QiLCJwbHVyYWwiOiJhbGlhc2VzIiwic2luZ3VsYXIiOiJhbGlhcyJ9LCJzY29wZSI6Ik5hbWVzcGFjZWQiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxYWxwaGExIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6IkFsaWFzIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBBbGlhc2VzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiQWxpYXNTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQWxpYXMuIiwicHJvcGVydGllcyI6eyJuYW1lIjp7ImRlc2NyaXB0aW9uIjoiU3BlY2lmaWVzIHRoZSBhbGlhcyBuYW1lLiBUaGlzIHZhbHVlIG11c3QgYmVnaW4gd2l0aCBhbGlhcy8gZm9sbG93ZWQgYnkgYSBuYW1lLCBzdWNoIGFzIGFsaWFzL0V4YW1wbGVBbGlhcy4gXG4gVGhlIEFsaWFzTmFtZSB2YWx1ZSBtdXN0IGJlIHN0cmluZyBvZiAxLTI1NiBjaGFyYWN0ZXJzLiBJdCBjYW4gY29udGFpbiBvbmx5IGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLCBmb3J3YXJkIHNsYXNoZXMgKC8pLCB1bmRlcnNjb3JlcyAoXyksIGFuZCBkYXNoZXMgKC0pLiBUaGUgYWxpYXMgbmFtZSBjYW5ub3QgYmVnaW4gd2l0aCBhbGlhcy9hd3MvLiBUaGUgYWxpYXMvYXdzLyBwcmVmaXggaXMgcmVzZXJ2ZWQgZm9yIEFtYXpvbiBXZWIgU2VydmljZXMgbWFuYWdlZCBrZXlzIChodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20va21zL2xhdGVzdC9kZXZlbG9wZXJndWlkZS9jb25jZXB0cy5odG1sI2F3cy1tYW5hZ2VkLWNtaykuIiwidHlwZSI6InN0cmluZyJ9LCJ0YXJnZXRLZXlJRCI6eyJkZXNjcmlwdGlvbiI6IkFzc29jaWF0ZXMgdGhlIGFsaWFzIHdpdGggdGhlIHNwZWNpZmllZCBjdXN0b21lciBtYW5hZ2VkIGtleSAoaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2ttcy9sYXRlc3QvZGV2ZWxvcGVyZ3VpZGUvY29uY2VwdHMuaHRtbCNjdXN0b21lci1jbWspLiBUaGUgS01TIGtleSBtdXN0IGJlIGluIHRoZSBzYW1lIEFtYXpvbiBXZWIgU2VydmljZXMgUmVnaW9uLiBcbiBBIHZhbGlkIGtleSBJRCBpcyByZXF1aXJlZC4gSWYgeW91IHN1cHBseSBhIG51bGwgb3IgZW1wdHkgc3RyaW5nIHZhbHVlLCB0aGlzIG9wZXJhdGlvbiByZXR1cm5zIGFuIGVycm9yLiBcbiBGb3IgaGVscCBmaW5kaW5nIHRoZSBrZXkgSUQgYW5kIEFSTiwgc2VlIEZpbmRpbmcgdGhlIEtleSBJRCBhbmQgQVJOIChodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20va21zL2xhdGVzdC9kZXZlbG9wZXJndWlkZS92aWV3aW5nLWtleXMuaHRtbCNmaW5kLWNtay1pZC1hcm4pIGluIHRoZSBLZXkgTWFuYWdlbWVudCBTZXJ2aWNlIERldmVsb3BlciBHdWlkZSAuIFxuIFNwZWNpZnkgdGhlIGtleSBJRCBvciBrZXkgQVJOIG9mIHRoZSBLTVMga2V5LiBcbiBGb3IgZXhhbXBsZTogXG4gICAgKiBLZXkgSUQ6IDEyMzRhYmNkLTEyYWItMzRjZC01NmVmLTEyMzQ1Njc4OTBhYiBcbiAgICAqIEtleSBBUk46IGFybjphd3M6a21zOnVzLWVhc3QtMjoxMTExMjIyMjMzMzM6a2V5LzEyMzRhYmNkLTEyYWItMzRjZC01NmVmLTEyMzQ1Njc4OTBhYiBcbiBUbyBnZXQgdGhlIGtleSBJRCBhbmQga2V5IEFSTiBmb3IgYSBLTVMga2V5LCB1c2UgTGlzdEtleXMgb3IgRGVzY3JpYmVLZXkuIiwidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsibmFtZSIsInRhcmdldEtleUlEIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiQWxpYXNTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQWxpYXMiLCJwcm9wZXJ0aWVzIjp7ImFja1Jlc291cmNlTWV0YWRhdGEiOnsiZGVzY3JpcHRpb24iOiJBbGwgQ1JzIG1hbmFnZWQgYnkgQUNLIGhhdmUgYSBjb21tb24gYFN0YXR1cy5BQ0tSZXNvdXJjZU1ldGFkYXRhYCBtZW1iZXIgdGhhdCBpcyB1c2VkIHRvIGNvbnRhaW4gcmVzb3VyY2Ugc3luYyBzdGF0ZSwgYWNjb3VudCBvd25lcnNoaXAsIGNvbnN0cnVjdGVkIEFSTiBmb3IgdGhlIHJlc291cmNlIiwicHJvcGVydGllcyI6eyJhcm4iOnsiZGVzY3JpcHRpb24iOiJBUk4gaXMgdGhlIEFtYXpvbiBSZXNvdXJjZSBOYW1lIGZvciB0aGUgcmVzb3VyY2UuIFRoaXMgaXMgYSBnbG9iYWxseS11bmlxdWUgaWRlbnRpZmllciBhbmQgaXMgc2V0IG9ubHkgYnkgdGhlIEFDSyBzZXJ2aWNlIGNvbnRyb2xsZXIgb25jZSB0aGUgY29udHJvbGxlciBoYXMgb3JjaGVzdHJhdGVkIHRoZSBjcmVhdGlvbiBvZiB0aGUgcmVzb3VyY2UgT1Igd2hlbiBpdCBoYXMgdmVyaWZpZWQgdGhhdCBhbiBcImFkb3B0ZWRcIiByZXNvdXJjZSAoYSByZXNvdXJjZSB3aGVyZSB0aGUgQVJOIGFubm90YXRpb24gd2FzIHNldCBieSB0aGUgS3ViZXJuZXRlcyB1c2VyIG9uIHRoZSBDUikgZXhpc3RzIGFuZCBtYXRjaGVzIHRoZSBzdXBwbGllZCBDUidzIFNwZWMgZmllbGQgdmFsdWVzLiBUT0RPKHZpamF0QCk6IEZpbmQgYSBiZXR0ZXIgc3RyYXRlZ3kgZm9yIHJlc291cmNlcyB0aGF0IGRvIG5vdCBoYXZlIEFSTiBpbiBDcmVhdGVPdXRwdXRSZXNwb25zZSBodHRwczovL2dpdGh1Yi5jb20vYXdzL2F3cy1jb250cm9sbGVycy1rOHMvaXNzdWVzLzI3MCIsInR5cGUiOiJzdHJpbmcifSwib3duZXJBY2NvdW50SUQiOnsiZGVzY3JpcHRpb24iOiJPd25lckFjY291bnRJRCBpcyB0aGUgQVdTIEFjY291bnQgSUQgb2YgdGhlIGFjY291bnQgdGhhdCBvd25zIHRoZSBiYWNrZW5kIEFXUyBzZXJ2aWNlIEFQSSByZXNvdXJjZS4iLCJ0eXBlIjoic3RyaW5nIn0sInJlZ2lvbiI6eyJkZXNjcmlwdGlvbiI6IlJlZ2lvbiBpcyB0aGUgQVdTIHJlZ2lvbiBpbiB3aGljaCB0aGUgcmVzb3VyY2UgZXhpc3RzIG9yIHdpbGwgZXhpc3QuIiwidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsib3duZXJBY2NvdW50SUQiLCJyZWdpb24iXSwidHlwZSI6Im9iamVjdCJ9LCJjb25kaXRpb25zIjp7ImRlc2NyaXB0aW9uIjoiQWxsIENSUyBtYW5hZ2VkIGJ5IEFDSyBoYXZlIGEgY29tbW9uIGBTdGF0dXMuQ29uZGl0aW9uc2AgbWVtYmVyIHRoYXQgY29udGFpbnMgYSBjb2xsZWN0aW9uIG9mIGBhY2t2MWFscGhhMS5Db25kaXRpb25gIG9iamVjdHMgdGhhdCBkZXNjcmliZSB0aGUgdmFyaW91cyB0ZXJtaW5hbCBzdGF0ZXMgb2YgdGhlIENSIGFuZCBpdHMgYmFja2VuZCBBV1Mgc2VydmljZSBBUEkgcmVzb3VyY2UiLCJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IkNvbmRpdGlvbiBpcyB0aGUgY29tbW9uIHN0cnVjdCB1c2VkIGJ5IGFsbCBDUkRzIG1hbmFnZWQgYnkgQUNLIHNlcnZpY2UgY29udHJvbGxlcnMgdG8gaW5kaWNhdGUgdGVybWluYWwgc3RhdGVzICBvZiB0aGUgQ1IgYW5kIGl0cyBiYWNrZW5kIEFXUyBzZXJ2aWNlIEFQSSByZXNvdXJjZSIsInByb3BlcnRpZXMiOnsibGFzdFRyYW5zaXRpb25UaW1lIjp7ImRlc2NyaXB0aW9uIjoiTGFzdCB0aW1lIHRoZSBjb25kaXRpb24gdHJhbnNpdGlvbmVkIGZyb20gb25lIHN0YXR1cyB0byBhbm90aGVyLiIsImZvcm1hdCI6ImRhdGUtdGltZSIsInR5cGUiOiJzdHJpbmcifSwibWVzc2FnZSI6eyJkZXNjcmlwdGlvbiI6IkEgaHVtYW4gcmVhZGFibGUgbWVzc2FnZSBpbmRpY2F0aW5nIGRldGFpbHMgYWJvdXQgdGhlIHRyYW5zaXRpb24uIiwidHlwZSI6InN0cmluZyJ9LCJyZWFzb24iOnsiZGVzY3JpcHRpb24iOiJUaGUgcmVhc29uIGZvciB0aGUgY29uZGl0aW9uJ3MgbGFzdCB0cmFuc2l0aW9uLiIsInR5cGUiOiJzdHJpbmcifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiU3RhdHVzIG9mIHRoZSBjb25kaXRpb24sIG9uZSBvZiBUcnVlLCBGYWxzZSwgVW5rbm93bi4iLCJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOnsiZGVzY3JpcHRpb24iOiJUeXBlIGlzIHRoZSB0eXBlIG9mIHRoZSBDb25kaXRpb24iLCJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJzdGF0dXMiLCJ0eXBlIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjcuMCJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImN1c3RvbWtleXN0b3Jlcy5rbXMuc2VydmljZXMuazhzLmF3cyJ9LCJzcGVjIjp7Imdyb3VwIjoia21zLnNlcnZpY2VzLms4cy5hd3MiLCJuYW1lcyI6eyJraW5kIjoiQ3VzdG9tS2V5U3RvcmUiLCJsaXN0S2luZCI6IkN1c3RvbUtleVN0b3JlTGlzdCIsInBsdXJhbCI6ImN1c3RvbWtleXN0b3JlcyIsInNpbmd1bGFyIjoiY3VzdG9ta2V5c3RvcmUifSwic2NvcGUiOiJOYW1lc3BhY2VkIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MWFscGhhMSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDdXN0b21LZXlTdG9yZSBpcyB0aGUgU2NoZW1hIGZvciB0aGUgQ3VzdG9tS2V5U3RvcmVzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiQ3VzdG9tS2V5U3RvcmVTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ3VzdG9tS2V5U3RvcmUuIiwicHJvcGVydGllcyI6eyJjbG91ZEhzbUNsdXN0ZXJJRCI6eyJkZXNjcmlwdGlvbiI6IklkZW50aWZpZXMgdGhlIENsb3VkSFNNIGNsdXN0ZXIgZm9yIHRoZSBjdXN0b20ga2V5IHN0b3JlLiBFbnRlciB0aGUgY2x1c3RlciBJRCBvZiBhbnkgYWN0aXZlIENsb3VkSFNNIGNsdXN0ZXIgdGhhdCBpcyBub3QgYWxyZWFkeSBhc3NvY2lhdGVkIHdpdGggYSBjdXN0b20ga2V5IHN0b3JlLiBUbyBmaW5kIHRoZSBjbHVzdGVyIElELCB1c2UgdGhlIERlc2NyaWJlQ2x1c3RlcnMgKGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jbG91ZGhzbS9sYXRlc3QvQVBJUmVmZXJlbmNlL0FQSV9EZXNjcmliZUNsdXN0ZXJzLmh0bWwpIG9wZXJhdGlvbi4iLCJ0eXBlIjoic3RyaW5nIn0sImtleVN0b3JlUGFzc3dvcmQiOnsiZGVzY3JpcHRpb24iOiJFbnRlciB0aGUgcGFzc3dvcmQgb2YgdGhlIGttc3VzZXIgY3J5cHRvIHVzZXIgKENVKSBhY2NvdW50IChodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20va21zL2xhdGVzdC9kZXZlbG9wZXJndWlkZS9rZXktc3RvcmUtY29uY2VwdHMuaHRtbCNjb25jZXB0LWttc3VzZXIpIGluIHRoZSBzcGVjaWZpZWQgQ2xvdWRIU00gY2x1c3Rlci4gS01TIGxvZ3MgaW50byB0aGUgY2x1c3RlciBhcyB0aGlzIHVzZXIgdG8gbWFuYWdlIGtleSBtYXRlcmlhbCBvbiB5b3VyIGJlaGFsZi4gXG4gVGhlIHBhc3N3b3JkIG11c3QgYmUgYSBzdHJpbmcgb2YgNyB0byAzMiBjaGFyYWN0ZXJzLiBJdHMgdmFsdWUgaXMgY2FzZSBzZW5zaXRpdmUuIFxuIFRoaXMgcGFyYW1ldGVyIHRlbGxzIEtNUyB0aGUga21zdXNlciBhY2NvdW50IHBhc3N3b3JkOyBpdCBkb2VzIG5vdCBjaGFuZ2UgdGhlIHBhc3N3b3JkIGluIHRoZSBDbG91ZEhTTSBjbHVzdGVyLiIsInR5cGUiOiJzdHJpbmcifSwibmFtZSI6eyJkZXNjcmlwdGlvbiI6IlNwZWNpZmllcyBhIGZyaWVuZGx5IG5hbWUgZm9yIHRoZSBjdXN0b20ga2V5IHN0b3JlLiBUaGUgbmFtZSBtdXN0IGJlIHVuaXF1ZSBpbiB5b3VyIEFtYXpvbiBXZWIgU2VydmljZXMgYWNjb3VudC4iLCJ0eXBlIjoic3RyaW5nIn0sInRydXN0QW5jaG9yQ2VydGlmaWNhdGUiOnsiZGVzY3JpcHRpb24iOiJFbnRlciB0aGUgY29udGVudCBvZiB0aGUgdHJ1c3QgYW5jaG9yIGNlcnRpZmljYXRlIGZvciB0aGUgY2x1c3Rlci4gVGhpcyBpcyB0aGUgY29udGVudCBvZiB0aGUgY3VzdG9tZXJDQS5jcnQgZmlsZSB0aGF0IHlvdSBjcmVhdGVkIHdoZW4geW91IGluaXRpYWxpemVkIHRoZSBjbHVzdGVyIChodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY2xvdWRoc20vbGF0ZXN0L3VzZXJndWlkZS9pbml0aWFsaXplLWNsdXN0ZXIuaHRtbCkuIiwidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY2xvdWRIc21DbHVzdGVySUQiLCJrZXlTdG9yZVBhc3N3b3JkIiwibmFtZSIsInRydXN0QW5jaG9yQ2VydGlmaWNhdGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJDdXN0b21LZXlTdG9yZVN0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBDdXN0b21LZXlTdG9yZSIsInByb3BlcnRpZXMiOnsiYWNrUmVzb3VyY2VNZXRhZGF0YSI6eyJkZXNjcmlwdGlvbiI6IkFsbCBDUnMgbWFuYWdlZCBieSBBQ0sgaGF2ZSBhIGNvbW1vbiBgU3RhdHVzLkFDS1Jlc291cmNlTWV0YWRhdGFgIG1lbWJlciB0aGF0IGlzIHVzZWQgdG8gY29udGFpbiByZXNvdXJjZSBzeW5jIHN0YXRlLCBhY2NvdW50IG93bmVyc2hpcCwgY29uc3RydWN0ZWQgQVJOIGZvciB0aGUgcmVzb3VyY2UiLCJwcm9wZXJ0aWVzIjp7ImFybiI6eyJkZXNjcmlwdGlvbiI6IkFSTiBpcyB0aGUgQW1hem9uIFJlc291cmNlIE5hbWUgZm9yIHRoZSByZXNvdXJjZS4gVGhpcyBpcyBhIGdsb2JhbGx5LXVuaXF1ZSBpZGVudGlmaWVyIGFuZCBpcyBzZXQgb25seSBieSB0aGUgQUNLIHNlcnZpY2UgY29udHJvbGxlciBvbmNlIHRoZSBjb250cm9sbGVyIGhhcyBvcmNoZXN0cmF0ZWQgdGhlIGNyZWF0aW9uIG9mIHRoZSByZXNvdXJjZSBPUiB3aGVuIGl0IGhhcyB2ZXJpZmllZCB0aGF0IGFuIFwiYWRvcHRlZFwiIHJlc291cmNlIChhIHJlc291cmNlIHdoZXJlIHRoZSBBUk4gYW5ub3RhdGlvbiB3YXMgc2V0IGJ5IHRoZSBLdWJlcm5ldGVzIHVzZXIgb24gdGhlIENSKSBleGlzdHMgYW5kIG1hdGNoZXMgdGhlIHN1cHBsaWVkIENSJ3MgU3BlYyBmaWVsZCB2YWx1ZXMuIFRPRE8odmlqYXRAKTogRmluZCBhIGJldHRlciBzdHJhdGVneSBmb3IgcmVzb3VyY2VzIHRoYXQgZG8gbm90IGhhdmUgQVJOIGluIENyZWF0ZU91dHB1dFJlc3BvbnNlIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvYXdzLWNvbnRyb2xsZXJzLWs4cy9pc3N1ZXMvMjcwIiwidHlwZSI6InN0cmluZyJ9LCJvd25lckFjY291bnRJRCI6eyJkZXNjcmlwdGlvbiI6Ik93bmVyQWNjb3VudElEIGlzIHRoZSBBV1MgQWNjb3VudCBJRCBvZiB0aGUgYWNjb3VudCB0aGF0IG93bnMgdGhlIGJhY2tlbmQgQVdTIHNlcnZpY2UgQVBJIHJlc291cmNlLiIsInR5cGUiOiJzdHJpbmcifSwicmVnaW9uIjp7ImRlc2NyaXB0aW9uIjoiUmVnaW9uIGlzIHRoZSBBV1MgcmVnaW9uIGluIHdoaWNoIHRoZSByZXNvdXJjZSBleGlzdHMgb3Igd2lsbCBleGlzdC4iLCJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJvd25lckFjY291bnRJRCIsInJlZ2lvbiJdLCJ0eXBlIjoib2JqZWN0In0sImNvbmRpdGlvbnMiOnsiZGVzY3JpcHRpb24iOiJBbGwgQ1JTIG1hbmFnZWQgYnkgQUNLIGhhdmUgYSBjb21tb24gYFN0YXR1cy5Db25kaXRpb25zYCBtZW1iZXIgdGhhdCBjb250YWlucyBhIGNvbGxlY3Rpb24gb2YgYGFja3YxYWxwaGExLkNvbmRpdGlvbmAgb2JqZWN0cyB0aGF0IGRlc2NyaWJlIHRoZSB2YXJpb3VzIHRlcm1pbmFsIHN0YXRlcyBvZiB0aGUgQ1IgYW5kIGl0cyBiYWNrZW5kIEFXUyBzZXJ2aWNlIEFQSSByZXNvdXJjZSIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiQ29uZGl0aW9uIGlzIHRoZSBjb21tb24gc3RydWN0IHVzZWQgYnkgYWxsIENSRHMgbWFuYWdlZCBieSBBQ0sgc2VydmljZSBjb250cm9sbGVycyB0byBpbmRpY2F0ZSB0ZXJtaW5hbCBzdGF0ZXMgIG9mIHRoZSBDUiBhbmQgaXRzIGJhY2tlbmQgQVdTIHNlcnZpY2UgQVBJIHJlc291cmNlIiwicHJvcGVydGllcyI6eyJsYXN0VHJhbnNpdGlvblRpbWUiOnsiZGVzY3JpcHRpb24iOiJMYXN0IHRpbWUgdGhlIGNvbmRpdGlvbiB0cmFuc2l0aW9uZWQgZnJvbSBvbmUgc3RhdHVzIHRvIGFub3RoZXIuIiwiZm9ybWF0IjoiZGF0ZS10aW1lIiwidHlwZSI6InN0cmluZyJ9LCJtZXNzYWdlIjp7ImRlc2NyaXB0aW9uIjoiQSBodW1hbiByZWFkYWJsZSBtZXNzYWdlIGluZGljYXRpbmcgZGV0YWlscyBhYm91dCB0aGUgdHJhbnNpdGlvbi4iLCJ0eXBlIjoic3RyaW5nIn0sInJlYXNvbiI6eyJkZXNjcmlwdGlvbiI6IlRoZSByZWFzb24gZm9yIHRoZSBjb25kaXRpb24ncyBsYXN0IHRyYW5zaXRpb24uIiwidHlwZSI6InN0cmluZyJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJTdGF0dXMgb2YgdGhlIGNvbmRpdGlvbiwgb25lIG9mIFRydWUsIEZhbHNlLCBVbmtub3duLiIsInR5cGUiOiJzdHJpbmcifSwidHlwZSI6eyJkZXNjcmlwdGlvbiI6IlR5cGUgaXMgdGhlIHR5cGUgb2YgdGhlIENvbmRpdGlvbiIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0YXR1cyIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifSwiY3VzdG9tS2V5U3RvcmVJRCI6eyJkZXNjcmlwdGlvbiI6IkEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBuZXcgY3VzdG9tIGtleSBzdG9yZS4iLCJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
relatedImages:
  - image: public.ecr.aws/aws-controllers-k8s/kms-controller:v0.0.18
    name: ""
  - image: quay.io/openshift-community-operators/ack-kms-controller@sha256:36a8c3e7630eb7ed83b5acb7f955b6625a3a0025705fadc40785d7346cf1599a
    name: ""
schema: olm.bundle
