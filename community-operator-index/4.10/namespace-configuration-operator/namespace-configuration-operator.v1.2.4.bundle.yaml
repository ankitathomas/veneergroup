image: quay.io/openshift-community-operators/namespace-configuration-operator@sha256:33514fd0cb5811954229e6ecd77e2b3e4323df51397d732729e7117348f3b9ed
name: namespace-configuration-operator.v1.2.4
package: namespace-configuration-operator
properties:
  - type: olm.gvk
    value:
      group: redhatcop.redhat.io
      kind: GroupConfig
      version: v1alpha1
  - type: olm.gvk
    value:
      group: redhatcop.redhat.io
      kind: NamespaceConfig
      version: v1alpha1
  - type: olm.gvk
    value:
      group: redhatcop.redhat.io
      kind: UserConfig
      version: v1alpha1
  - type: olm.package
    value:
      packageName: namespace-configuration-operator
      version: 1.2.4
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoibW9uaXRvcmluZy5jb3Jlb3MuY29tL3YxIiwia2luZCI6IlNlcnZpY2VNb25pdG9yIiwibWV0YWRhdGEiOnsibGFiZWxzIjp7ImNvbnRyb2wtcGxhbmUiOiJuYW1lc3BhY2UtY29uZmlndXJhdGlvbi1vcGVyYXRvciJ9LCJuYW1lIjoibmFtZXNwYWNlLWNvbmZpZ3VyYXRpb24tb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyLW1ldHJpY3MtbW9uaXRvciJ9LCJzcGVjIjp7ImVuZHBvaW50cyI6W3siYmVhcmVyVG9rZW5GaWxlIjoiL3Zhci9ydW4vc2VjcmV0cy9rdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3Rva2VuIiwiaW50ZXJ2YWwiOiIzMHMiLCJwb3J0IjoiaHR0cHMiLCJzY2hlbWUiOiJodHRwcyIsInRsc0NvbmZpZyI6eyJjYSI6eyJzZWNyZXQiOnsia2V5IjoidGxzLmNydCIsIm5hbWUiOiJuYW1lc3BhY2UtY29uZmlndXJhdGlvbi1vcGVyYXRvci1jZXJ0cyIsIm9wdGlvbmFsIjpmYWxzZX19LCJzZXJ2ZXJOYW1lIjoibmFtZXNwYWNlLWNvbmZpZ3VyYXRpb24tb3BlcmF0b3ItbWV0cmljcy1zZXJ2aWNlLm5hbWVzcGFjZS1jb25maWd1cmF0aW9uLW9wZXJhdG9yLnN2YyJ9fV0sInNlbGVjdG9yIjp7Im1hdGNoTGFiZWxzIjp7ImNvbnRyb2wtcGxhbmUiOiJuYW1lc3BhY2UtY29uZmlndXJhdGlvbi1vcGVyYXRvciJ9fX19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODFcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogYjBiMmYwODkucmVkaGF0LmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJuYW1lc3BhY2UtY29uZmlndXJhdGlvbi1vcGVyYXRvci1tYW5hZ2VyLWNvbmZpZyJ9fQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibmFtZXNwYWNlLWNvbmZpZ3VyYXRpb24tb3BlcmF0b3ItbWV0cmljcy1yZWFkZXIifSwicnVsZXMiOlt7Im5vblJlc291cmNlVVJMcyI6WyIvbWV0cmljcyJdLCJ2ZXJicyI6WyJnZXQiXX1dfQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImFubm90YXRpb25zIjp7InNlcnZpY2UuYWxwaGEub3BlbnNoaWZ0LmlvL3NlcnZpbmctY2VydC1zZWNyZXQtbmFtZSI6Im5hbWVzcGFjZS1jb25maWd1cmF0aW9uLW9wZXJhdG9yLWNlcnRzIn0sImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6Im5hbWVzcGFjZS1jb25maWd1cmF0aW9uLW9wZXJhdG9yIn0sIm5hbWUiOiJuYW1lc3BhY2UtY29uZmlndXJhdGlvbi1vcGVyYXRvci1tZXRyaWNzLXNlcnZpY2UifSwic3BlYyI6eyJwb3J0cyI6W3sibmFtZSI6Imh0dHBzIiwicG9ydCI6ODQ0MywicHJvdG9jb2wiOiJUQ1AiLCJ0YXJnZXRQb3J0IjoiaHR0cHMifV0sInNlbGVjdG9yIjp7ImNvbnRyb2wtcGxhbmUiOiJuYW1lc3BhY2UtY29uZmlndXJhdGlvbi1vcGVyYXRvciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJuYW1lc3BhY2UtY29uZmlndXJhdGlvbi1vcGVyYXRvci1wcm9tZXRoZXVzLWs4cyJ9LCJydWxlcyI6W3siYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsiZW5kcG9pbnRzIiwicG9kcyIsInNlcnZpY2VzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCJdfV19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlQmluZGluZyIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibmFtZXNwYWNlLWNvbmZpZ3VyYXRpb24tb3BlcmF0b3ItcHJvbWV0aGV1cy1rOHMifSwicm9sZVJlZiI6eyJhcGlHcm91cCI6InJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8iLCJraW5kIjoiUm9sZSIsIm5hbWUiOiJuYW1lc3BhY2UtY29uZmlndXJhdGlvbi1vcGVyYXRvci1wcm9tZXRoZXVzLWs4cyJ9LCJzdWJqZWN0cyI6W3sia2luZCI6IlNlcnZpY2VBY2NvdW50IiwibmFtZSI6InByb21ldGhldXMtazhzIiwibmFtZXNwYWNlIjoib3BlbnNoaWZ0LW1vbml0b3JpbmcifV19
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
relatedImages:
  - image: quay.io/openshift-community-operators/namespace-configuration-operator@sha256:33514fd0cb5811954229e6ecd77e2b3e4323df51397d732729e7117348f3b9ed
    name: ""
  - image: quay.io/redhat-cop/kube-rbac-proxy@sha256:c68135620167c41e3d9f6c1d2ca1eb8fa24312b86186d09b8010656b9d25fb47
    name: quay.io/redhat-cop/kube-rbac-proxy
  - image: quay.io/redhat-cop/namespace-configuration-operator@sha256:e3c685ad04a3d54b8bd67f2843c5189ec489cd45609daeaea1a35368530dc839
    name: quay.io/redhat-cop/namespace-configuration-operator
schema: olm.bundle
