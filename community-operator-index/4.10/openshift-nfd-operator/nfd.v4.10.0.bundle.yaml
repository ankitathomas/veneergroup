image: quay.io/openshift-community-operators/openshift-nfd-operator@sha256:880517267f12e0ca4dd9621aa196c901eb1f754e5ec990a1459d0869a8c17451
name: nfd.v4.10.0
package: openshift-nfd-operator
properties:
  - type: olm.gvk
    value:
      group: nfd.openshift.io
      kind: NodeFeatureDiscovery
      version: v1
  - type: olm.gvk
    value:
      group: nfd.openshift.io
      kind: NodeFeatureRule
      version: v1alpha1
  - type: olm.gvk
    value:
      group: topology.node.k8s.io
      kind: NodeResourceTopology
      version: v1alpha1
  - type: olm.package
    value:
      packageName: openshift-nfd-operator
      version: 4.10.0
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoibW9uaXRvcmluZy5jb3Jlb3MuY29tL3YxIiwia2luZCI6IlByb21ldGhldXNSdWxlIiwibWV0YWRhdGEiOnsibGFiZWxzIjp7InJvbGUiOiJhbGVydC1ydWxlcyJ9LCJuYW1lIjoiY29udHJvbGxlci1tYW5hZ2VyLWFsZXJ0cy1tb25pdG9yIn0sInNwZWMiOnsiZ3JvdXBzIjpbeyJuYW1lIjoibm9kZS1mZWF0dXJlLWRpc2NvdmVyeS1vcGVyYXRvci5ydWxlcyIsInJ1bGVzIjpbeyJhbGVydCI6Ik5GRERlZ3JhZGVkIiwiYW5ub3RhdGlvbnMiOnsibWVzc2FnZSI6IlRoZSBOb2RlIEZlYXR1cmUgRGlzY292ZXJ5IE9wZXJhdG9yIGlzIGRlZ3JhZGVkLiBSZXZpZXcgdGhlIFwiTm9kZUZlYXR1cmVEaXNjb3ZlcnlcIiBDdXN0b21SZXNvdXJjZSBvYmplY3QgZm9yIGZ1cnRoZXIgZGV0YWlscy5cbiJ9LCJleHByIjoibmZkX2RlZ3JhZGVkX2luZm8gPT0gMSIsImZvciI6IjFoIiwibGFiZWxzIjp7InNldmVyaXR5Ijoid2FybmluZyJ9fV19XX19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoibW9uaXRvcmluZy5jb3Jlb3MuY29tL3YxIiwia2luZCI6IlNlcnZpY2VNb25pdG9yIiwibWV0YWRhdGEiOnsibGFiZWxzIjp7ImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifSwibmFtZSI6ImNvbnRyb2xsZXItbWFuYWdlci1tZXRyaWNzLW1vbml0b3IifSwic3BlYyI6eyJlbmRwb2ludHMiOlt7ImJlYXJlclRva2VuRmlsZSI6Ii92YXIvcnVuL3NlY3JldHMva3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC90b2tlbiIsImludGVydmFsIjoiMzBzIiwicGF0aCI6Ii9tZXRyaWNzIiwicG9ydCI6Imh0dHBzIiwic2NoZW1lIjoiaHR0cHMiLCJ0bHNDb25maWciOnsiY2FGaWxlIjoiL2V0Yy9wcm9tZXRoZXVzL2NvbmZpZ21hcHMvc2VydmluZy1jZXJ0cy1jYS1idW5kbGUvc2VydmljZS1jYS5jcnQiLCJzZXJ2ZXJOYW1lIjoibmZkLWNvbnRyb2xsZXItbWFuYWdlci1tZXRyaWNzLXNlcnZpY2Uub3BlbnNoaWZ0LW5mZC5zdmMifX1dLCJzZWxlY3RvciI6eyJtYXRjaExhYmVscyI6eyJjb250cm9sLXBsYW5lIjoiY29udHJvbGxlci1tYW5hZ2VyIn19fX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoibW9uaXRvcmluZy5jb3Jlb3MuY29tL3YxIiwia2luZCI6IlByb21ldGhldXNSdWxlIiwibWV0YWRhdGEiOnsibGFiZWxzIjp7InJvbGUiOiJhbGVydC1ydWxlcyJ9LCJuYW1lIjoibmZkLWNvbnRyb2xsZXItbWFuYWdlci1hbGVydHMtbW9uaXRvciJ9LCJzcGVjIjp7Imdyb3VwcyI6W3sibmFtZSI6Im5vZGUtZmVhdHVyZS1kaXNjb3Zlcnktb3BlcmF0b3IucnVsZXMiLCJydWxlcyI6W3siYWxlcnQiOiJORkREZWdyYWRlZCIsImFubm90YXRpb25zIjp7Im1lc3NhZ2UiOiJUaGUgTm9kZSBGZWF0dXJlIERpc2NvdmVyeSBPcGVyYXRvciBpcyBkZWdyYWRlZC4gUmV2aWV3IHRoZSBcIk5vZGVGZWF0dXJlRGlzY292ZXJ5XCIgQ3VzdG9tUmVzb3VyY2Ugb2JqZWN0IGZvciBmdXJ0aGVyIGRldGFpbHMuXG4ifSwiZXhwciI6Im5mZF9kZWdyYWRlZF9pbmZvID09IDEiLCJmb3IiOiIxaCIsImxhYmVscyI6eyJzZXZlcml0eSI6Indhcm5pbmcifX1dfV19fQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoibW9uaXRvcmluZy5jb3Jlb3MuY29tL3YxIiwia2luZCI6IlNlcnZpY2VNb25pdG9yIiwibWV0YWRhdGEiOnsibGFiZWxzIjp7ImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifSwibmFtZSI6Im5mZC1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1tb25pdG9yIn0sInNwZWMiOnsiZW5kcG9pbnRzIjpbeyJiZWFyZXJUb2tlbkZpbGUiOiIvdmFyL3J1bi9zZWNyZXRzL2t1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvdG9rZW4iLCJpbnRlcnZhbCI6IjMwcyIsInBhdGgiOiIvbWV0cmljcyIsInBvcnQiOiJodHRwcyIsInNjaGVtZSI6Imh0dHBzIiwidGxzQ29uZmlnIjp7ImNhRmlsZSI6Ii9ldGMvcHJvbWV0aGV1cy9jb25maWdtYXBzL3NlcnZpbmctY2VydHMtY2EtYnVuZGxlL3NlcnZpY2UtY2EuY3J0Iiwic2VydmVyTmFtZSI6Im5mZC1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlLm9wZW5zaGlmdC1uZmQuc3ZjIn19XSwic2VsZWN0b3IiOnsibWF0Y2hMYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fX19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImFubm90YXRpb25zIjp7InNlcnZpY2UuYmV0YS5vcGVuc2hpZnQuaW8vc2VydmluZy1jZXJ0LXNlY3JldC1uYW1lIjoibm9kZS1mZWF0dXJlLWRpc2NvdmVyeS1vcGVyYXRvci10bHMifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsImxhYmVscyI6eyJjb250cm9sLXBsYW5lIjoiY29udHJvbGxlci1tYW5hZ2VyIn0sIm5hbWUiOiJuZmQtY29udHJvbGxlci1tYW5hZ2VyLW1ldHJpY3Mtc2VydmljZSJ9LCJzcGVjIjp7InBvcnRzIjpbeyJuYW1lIjoiaHR0cHMiLCJwb3J0Ijo4NDQzLCJ0YXJnZXRQb3J0IjoiaHR0cHMifV0sInNlbGVjdG9yIjp7ImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifX0sInN0YXR1cyI6eyJsb2FkQmFsYW5jZXIiOnt9fX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODFcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogMzlmNWU1YzMubm9kZWZlYXR1cmVkaXNjb3Zlcmllcy5uZmQua3ViZXJuZXRlcy5pb1xuXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJuZmQtbWFuYWdlci1jb25maWcifX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibmZkLW1ldHJpY3MtcmVhZGVyIn0sInJ1bGVzIjpbeyJub25SZXNvdXJjZVVSTHMiOlsiL21ldHJpY3MiXSwidmVyYnMiOlsiZ2V0Il19XX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJuZmQtcHJvbWV0aGV1cy1rOHMifSwicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyIiXSwicmVzb3VyY2VzIjpbInNlcnZpY2VzIiwiZW5kcG9pbnRzIiwicG9kcyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giXX1dfQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlQmluZGluZyIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibmZkLXByb21ldGhldXMtazhzIn0sInJvbGVSZWYiOnsiYXBpR3JvdXAiOiJyYmFjLmF1dGhvcml6YXRpb24uazhzLmlvIiwia2luZCI6IlJvbGUiLCJuYW1lIjoibmZkLXByb21ldGhldXMtazhzIn0sInN1YmplY3RzIjpbeyJraW5kIjoiU2VydmljZUFjY291bnQiLCJuYW1lIjoicHJvbWV0aGV1cy1rOHMiLCJuYW1lc3BhY2UiOiJvcGVuc2hpZnQtbW9uaXRvcmluZyJ9XX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjYuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im5vZGVmZWF0dXJlZGlzY292ZXJpZXMubmZkLm9wZW5zaGlmdC5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibmZkLm9wZW5zaGlmdC5pbyIsIm5hbWVzIjp7ImtpbmQiOiJOb2RlRmVhdHVyZURpc2NvdmVyeSIsImxpc3RLaW5kIjoiTm9kZUZlYXR1cmVEaXNjb3ZlcnlMaXN0IiwicGx1cmFsIjoibm9kZWZlYXR1cmVkaXNjb3ZlcmllcyIsInNpbmd1bGFyIjoibm9kZWZlYXR1cmVkaXNjb3ZlcnkifSwic2NvcGUiOiJOYW1lc3BhY2VkIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJBbiBOb2RlIEZlYXR1cmUgRGlzY292ZXJ5IGNsdXN0ZXIgaW5zdGFuY2UiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IlNwZWNpZmljYXRpb24gb2YgdGhlIGRlc2lyZWQgYmVoYXZpb3Igb2YgdGhlIE5vZGUgRmVhdHVyZSBEaXNjb3ZlcnkiLCJwcm9wZXJ0aWVzIjp7ImN1c3RvbUNvbmZpZyI6eyJkZXNjcmlwdGlvbiI6IldvcmtlckNvbmZpZyBkZXNjcmliZXMgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgTkZEIHdvcmtlci4iLCJwcm9wZXJ0aWVzIjp7ImNvbmZpZ0RhdGEiOnsiZGVzY3JpcHRpb24iOiJCaW5hcnlEYXRhIGhvbGRzIHRoZSBORkQgY29uZmlndXJhdGlvbiBmaWxlIiwidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY29uZmlnRGF0YSJdLCJ0eXBlIjoib2JqZWN0In0sImV4dHJhTGFiZWxOcyI6eyJkZXNjcmlwdGlvbiI6IkV4dHJhTGFiZWxOcyBkZWZpbmVzIHRoZSBsaXN0IG9mIG9mIGFsbG93ZWQgZXh0cmEgbGFiZWwgbmFtZXNwYWNlcyBCeSBkZWZhdWx0LCBvbmx5IGFsbG93IGxhYmVscyBpbiB0aGUgZGVmYXVsdCBgZmVhdHVyZS5ub2RlLmt1YmVybmV0ZXMuaW9gIGxhYmVsIG5hbWVzcGFjZSIsIml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwibnVsbGFibGUiOnRydWUsInR5cGUiOiJhcnJheSJ9LCJpbnN0YW5jZSI6eyJkZXNjcmlwdGlvbiI6IlJ1biBORkQgaW4gbXVsdGlwbGUgZGVwbG95bWVudCBtb2RlIGh0dHBzOi8va3ViZXJuZXRlcy1zaWdzLmdpdGh1Yi5pby9ub2RlLWZlYXR1cmUtZGlzY292ZXJ5L3YwLjgvYWR2YW5jZWQvbWFzdGVyLWNvbW1hbmRsaW5lLXJlZmVyZW5jZS5odG1sIy1pbnN0YW5jZSIsIm51bGxhYmxlIjp0cnVlLCJ0eXBlIjoic3RyaW5nIn0sImxhYmVsV2hpdGVMaXN0Ijp7ImRlc2NyaXB0aW9uIjoiTGFiZWxXaGl0ZUxpc3QgZGVmaW5lcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgZmlsdGVyaW5nIGZlYXR1cmUgbGFiZWxzIGJhc2VkIG9uIHRoZWlyIG5hbWUuIEVhY2ggbGFiZWwgbXVzdCBtYXRjaCBhZ2FpbnN0IHRoZSBnaXZlbiByZXF1bGFyIGV4cHJlc3Npb24gaW4gb3JkZXIgdG8gYmUgcHVibGlzaGVkLiIsIm51bGxhYmxlIjp0cnVlLCJ0eXBlIjoic3RyaW5nIn0sIm9wZXJhbmQiOnsiZGVzY3JpcHRpb24iOiJPcGVyYW5kU3BlYyBkZXNjcmliZXMgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgb3BlcmFuZCIsInByb3BlcnRpZXMiOnsiaW1hZ2UiOnsiZGVzY3JpcHRpb24iOiJJbWFnZSBkZWZpbmVzIHRoZSBpbWFnZSB0byBwdWxsIGZvciB0aGUgTkZEIG9wZXJhbmQiLCJudWxsYWJsZSI6dHJ1ZSwicGF0dGVybiI6IlthLXpBLVowLTlcXC1dKyIsInR5cGUiOiJzdHJpbmcifSwiaW1hZ2VQdWxsUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiSW1hZ2VQdWxsUG9saWN5IGRlZmluZXMgSW1hZ2UgcHVsbCBwb2xpY3kgZm9yIHRoZSBORkQgb3BlcmFuZCBpbWFnZSBbZGVmYXVsdHMgdG8gQWx3YXlzXSIsIm51bGxhYmxlIjp0cnVlLCJ0eXBlIjoic3RyaW5nIn0sInNlcnZpY2VQb3J0Ijp7ImRlc2NyaXB0aW9uIjoiU2VydmljZVBvcnQgc3BlY2lmaWVzIHRoZSBUQ1AgcG9ydCB0aGF0IG5mZC1tYXN0ZXIgbGlzdGVucyBmb3IgaW5jb21pbmcgcmVxdWVzdHMuIiwidHlwZSI6ImludGVnZXIifX0sInR5cGUiOiJvYmplY3QifSwicmVzb3VyY2VMYWJlbHMiOnsiZGVzY3JpcHRpb24iOiJSZXNvdXJjZUxhYmVscyBkZWZpbmVzIHRoZSBsaXN0IG9mIGZlYXR1cmVzIHRvIGJlIGFkdmVydGlzZWQgYXMgZXh0ZW5kZWQgcmVzb3VyY2VzIGluc3RlYWQgb2YgbGFiZWxzLiIsIml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwibnVsbGFibGUiOnRydWUsInR5cGUiOiJhcnJheSJ9LCJ0b3BvbG9neXVwZGF0ZXIiOnsiZGVzY3JpcHRpb24iOiJEZXBsb3kgdGhlIE5GRC1Ub3BvbG9neS1VcGRhdGVyIE5GRC1Ub3BvbG9neS1VcGRhdGVyIGlzIGEgZGFlbW9uIHJlc3BvbnNpYmxlIGZvciBleGFtaW5pbmcgYWxsb2NhdGVkIHJlc291cmNlcyBvbiBhIHdvcmtlciBub2RlIHRvIGFjY291bnQgZm9yIHJlc291cmNlcyBhdmFpbGFibGUgdG8gYmUgYWxsb2NhdGVkIHRvIG5ldyBwb2Qgb24gYSBwZXItem9uZSBiYXNpcyBodHRwczovL2t1YmVybmV0ZXMtc2lncy5naXRodWIuaW8vbm9kZS1mZWF0dXJlLWRpc2NvdmVyeS92MC4xMC9nZXQtc3RhcnRlZC9pbnRyb2R1Y3Rpb24uaHRtbCNuZmQtdG9wb2xvZ3ktdXBkYXRlciIsInR5cGUiOiJib29sZWFuIn0sIndvcmtlckNvbmZpZyI6eyJkZXNjcmlwdGlvbiI6IkNvbmZpZ01hcCBkZXNjcmliZXMgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgTkZEIHdvcmtlciIsInByb3BlcnRpZXMiOnsiY29uZmlnRGF0YSI6eyJkZXNjcmlwdGlvbiI6IkJpbmFyeURhdGEgaG9sZHMgdGhlIE5GRCBjb25maWd1cmF0aW9uIGZpbGUiLCJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJjb25maWdEYXRhIl0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiTm9kZUZlYXR1cmVEaXNjb3ZlcnlTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgTm9kZUZlYXR1cmVEaXNjb3ZlcnkiLCJwcm9wZXJ0aWVzIjp7ImNvbmRpdGlvbnMiOnsiZGVzY3JpcHRpb24iOiJDb25kaXRpb25zIHJlcHJlc2VudHMgdGhlIGxhdGVzdCBhdmFpbGFibGUgb2JzZXJ2YXRpb25zIG9mIGN1cnJlbnQgc3RhdGUuIiwiaXRlbXMiOnsiZGVzY3JpcHRpb24iOiJDb25kaXRpb24gcmVwcmVzZW50cyB0aGUgc3RhdGUgb2YgdGhlIG9wZXJhdG9yJ3MgcmVjb25jaWxpYXRpb24gZnVuY3Rpb25hbGl0eS4iLCJwcm9wZXJ0aWVzIjp7Imxhc3RIZWFydGJlYXRUaW1lIjp7ImZvcm1hdCI6ImRhdGUtdGltZSIsInR5cGUiOiJzdHJpbmcifSwibGFzdFRyYW5zaXRpb25UaW1lIjp7ImZvcm1hdCI6ImRhdGUtdGltZSIsInR5cGUiOiJzdHJpbmcifSwibWVzc2FnZSI6eyJ0eXBlIjoic3RyaW5nIn0sInJlYXNvbiI6eyJ0eXBlIjoic3RyaW5nIn0sInN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOnsiZGVzY3JpcHRpb24iOiJDb25kaXRpb25UeXBlIGlzIHRoZSBzdGF0ZSBvZiB0aGUgb3BlcmF0b3IncyByZWNvbmNpbGlhdGlvbiBmdW5jdGlvbmFsaXR5LiIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0YXR1cyIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJwcm9tZXRoZXVzLWs4cyJ9LCJydWxlcyI6W3siYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsic2VydmljZXMiLCJlbmRwb2ludHMiLCJwb2RzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCJdfV19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlQmluZGluZyIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoicHJvbWV0aGV1cy1rOHMifSwicm9sZVJlZiI6eyJhcGlHcm91cCI6InJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8iLCJraW5kIjoiUm9sZSIsIm5hbWUiOiJwcm9tZXRoZXVzLWs4cyJ9LCJzdWJqZWN0cyI6W3sia2luZCI6IlNlcnZpY2VBY2NvdW50IiwibmFtZSI6InByb21ldGhldXMtazhzIiwibmFtZXNwYWNlIjoib3BlbnNoaWZ0LW1vbml0b3JpbmcifV19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiYXBpLWFwcHJvdmVkLmt1YmVybmV0ZXMuaW8iOiJodHRwczovL2dpdGh1Yi5jb20va3ViZXJuZXRlcy9lbmhhbmNlbWVudHMvcHVsbC8xODcwIiwiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjcuMCJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im5vZGVyZXNvdXJjZXRvcG9sb2dpZXMudG9wb2xvZ3kubm9kZS5rOHMuaW8ifSwic3BlYyI6eyJncm91cCI6InRvcG9sb2d5Lm5vZGUuazhzLmlvIiwibmFtZXMiOnsia2luZCI6Ik5vZGVSZXNvdXJjZVRvcG9sb2d5IiwibGlzdEtpbmQiOiJOb2RlUmVzb3VyY2VUb3BvbG9neUxpc3QiLCJwbHVyYWwiOiJub2RlcmVzb3VyY2V0b3BvbG9naWVzIiwic2hvcnROYW1lcyI6WyJub2RlLXJlcy10b3BvIl0sInNpbmd1bGFyIjoibm9kZXJlc291cmNldG9wb2xvZ3kifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MWFscGhhMSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJOb2RlUmVzb3VyY2VUb3BvbG9neSBkZXNjcmliZXMgbm9kZSByZXNvdXJjZXMgYW5kIHRoZWlyIHRvcG9sb2d5LiIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJ0b3BvbG9neVBvbGljaWVzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sInpvbmVzIjp7ImRlc2NyaXB0aW9uIjoiWm9uZUxpc3QgY29udGFpbnMgYW4gYXJyYXkgb2YgWm9uZSBvYmplY3RzLiIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiWm9uZSByZXByZXNlbnRzIGEgcmVzb3VyY2UgdG9wb2xvZ3kgem9uZSwgZS5nLiBzb2NrZXQsIG5vZGUsIGRpZSBvciBjb3JlLiIsInByb3BlcnRpZXMiOnsiYXR0cmlidXRlcyI6eyJkZXNjcmlwdGlvbiI6IkF0dHJpYnV0ZUxpc3QgY29udGFpbnMgYW4gYXJyYXkgb2YgQXR0cmlidXRlSW5mbyBvYmplY3RzLiIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiQXR0cmlidXRlSW5mbyBjb250YWlucyBvbmUgYXR0cmlidXRlIG9mIGEgWm9uZS4iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJ2YWx1ZSI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJuYW1lIiwidmFsdWUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifSwiY29zdHMiOnsiZGVzY3JpcHRpb24iOiJDb3N0TGlzdCBjb250YWlucyBhbiBhcnJheSBvZiBDb3N0SW5mbyBvYmplY3RzLiIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiQ29zdEluZm8gZGVzY3JpYmVzIHRoZSBjb3N0IChvciBkaXN0YW5jZSkgYmV0d2VlbiB0d28gWm9uZXMuIiwicHJvcGVydGllcyI6eyJuYW1lIjp7InR5cGUiOiJzdHJpbmcifSwidmFsdWUiOnsiZm9ybWF0IjoiaW50NjQiLCJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsibmFtZSIsInZhbHVlIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJwYXJlbnQiOnsidHlwZSI6InN0cmluZyJ9LCJyZXNvdXJjZXMiOnsiZGVzY3JpcHRpb24iOiJSZXNvdXJjZUluZm9MaXN0IGNvbnRhaW5zIGFuIGFycmF5IG9mIFJlc291cmNlSW5mbyBvYmplY3RzLiIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiUmVzb3VyY2VJbmZvIGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IG9uZSByZXNvdXJjZSB0eXBlLiIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGFibGUiOnsiYW55T2YiOlt7InR5cGUiOiJpbnRlZ2VyIn0seyJ0eXBlIjoic3RyaW5nIn1dLCJkZXNjcmlwdGlvbiI6IkFsbG9jYXRhYmxlIHF1YW50aXR5IG9mIHRoZSByZXNvdXJjZSwgY29ycmVzcG9uZGluZyB0byBhbGxvY2F0YWJsZSBpbiBub2RlIHN0YXR1cywgaS5lLiB0b3RhbCBhbW91bnQgb2YgdGhpcyByZXNvdXJjZSBhdmFpbGFibGUgdG8gYmUgdXNlZCBieSBwb2RzLiIsInBhdHRlcm4iOiJeKFxcK3wtKT8oKFswLTldKyhcXC5bMC05XSopPyl8KFxcLlswLTldKykpKChbS01HVFBFXWkpfFtudW1rTUdUUEVdfChbZUVdKFxcK3wtKT8oKFswLTldKyhcXC5bMC05XSopPyl8KFxcLlswLTldKykpKSk/JCIsIngta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nIjp0cnVlfSwiYXZhaWxhYmxlIjp7ImFueU9mIjpbeyJ0eXBlIjoiaW50ZWdlciJ9LHsidHlwZSI6InN0cmluZyJ9XSwiZGVzY3JpcHRpb24iOiJBdmFpbGFibGUgaXMgdGhlIGFtb3VudCBvZiB0aGlzIHJlc291cmNlIGN1cnJlbnRseSBhdmFpbGFibGUgZm9yIG5ldyAodG8gYmUgc2NoZWR1bGVkKSBwb2RzLCBpLmUuIEFsbG9jYXRhYmxlIG1pbnVzIHRoZSByZXNvdXJjZXMgcmVzZXJ2ZWQgYnkgY3VycmVudGx5IHJ1bm5pbmcgcG9kcy4iLCJwYXR0ZXJuIjoiXihcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSgoW0tNR1RQRV1pKXxbbnVta01HVFBFXXwoW2VFXShcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSkpPyQiLCJ4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZyI6dHJ1ZX0sImNhcGFjaXR5Ijp7ImFueU9mIjpbeyJ0eXBlIjoiaW50ZWdlciJ9LHsidHlwZSI6InN0cmluZyJ9XSwiZGVzY3JpcHRpb24iOiJDYXBhY2l0eSBvZiB0aGUgcmVzb3VyY2UsIGNvcnJlc3BvbmRpbmcgdG8gY2FwYWNpdHkgaW4gbm9kZSBzdGF0dXMsIGkuZS4gdG90YWwgYW1vdW50IG9mIHRoaXMgcmVzb3VyY2UgdGhhdCB0aGUgbm9kZSBoYXMuIiwicGF0dGVybiI6Il4oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkoKFtLTUdUUEVdaSl8W251bWtNR1RQRV18KFtlRV0oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkpKT8kIiwieC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmciOnRydWV9LCJuYW1lIjp7ImRlc2NyaXB0aW9uIjoiTmFtZSBvZiB0aGUgcmVzb3VyY2UuIiwidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiYWxsb2NhdGFibGUiLCJhdmFpbGFibGUiLCJjYXBhY2l0eSIsIm5hbWUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifSwidHlwZSI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJuYW1lIiwidHlwZSJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9fSwicmVxdWlyZWQiOlsidG9wb2xvZ3lQb2xpY2llcyIsInpvbmVzIl0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
relatedImages:
  - image: quay.io/openshift-community-operators/openshift-nfd-operator@sha256:880517267f12e0ca4dd9621aa196c901eb1f754e5ec990a1459d0869a8c17451
    name: ""
  - image: quay.io/openshift/origin-cluster-nfd-operator:4.10
    name: ""
  - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy
    name: ""
schema: olm.bundle
