image: quay.io/openshift-community-operators/authorino-operator@sha256:9faf70152efc608e59735258a38462208de42c1b33470d12c3557e7eca3dba1f
name: authorino-operator.v0.0.1
package: authorino-operator
properties:
  - type: olm.gvk
    value:
      group: authorino.3scale.net
      kind: AuthConfig
      version: v1beta1
  - type: olm.gvk
    value:
      group: operator.authorino.kuadrant.io
      kind: Authorino
      version: v1beta1
  - type: olm.package
    value:
      packageName: authorino-operator
      version: 0.0.1
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoiYXV0aG9yaW5vLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci1tZXRyaWNzLXNlcnZpY2UifSwic3BlYyI6eyJwb3J0cyI6W3sibmFtZSI6Imh0dHBzIiwicG9ydCI6ODQ0MywicHJvdG9jb2wiOiJUQ1AiLCJ0YXJnZXRQb3J0IjoiaHR0cHMifV0sInNlbGVjdG9yIjp7ImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifX0sInN0YXR1cyI6eyJsb2FkQmFsYW5jZXIiOnt9fX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODFcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogYWFjM2ExNWQuYXV0aG9yaW5vLmt1YWRyYW50LmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJhdXRob3Jpbm8tb3BlcmF0b3ItbWFuYWdlci1jb25maWcifX0=
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImF1dGhvcmlub3Mub3BlcmF0b3IuYXV0aG9yaW5vLmt1YWRyYW50LmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJvcGVyYXRvci5hdXRob3Jpbm8ua3VhZHJhbnQuaW8iLCJuYW1lcyI6eyJraW5kIjoiQXV0aG9yaW5vIiwibGlzdEtpbmQiOiJBdXRob3Jpbm9MaXN0IiwicGx1cmFsIjoiYXV0aG9yaW5vcyIsInNpbmd1bGFyIjoiYXV0aG9yaW5vIn0sInNjb3BlIjoiTmFtZXNwYWNlZCIsInZlcnNpb25zIjpbeyJuYW1lIjoidjFiZXRhMSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJBdXRob3Jpbm8gaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGF1dGhvcmlub3MgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJBdXRob3Jpbm9TcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQXV0aG9yaW5vIiwicHJvcGVydGllcyI6eyJhdXRoQ29uZmlnTGFiZWxTZWxlY3RvcnMiOnsidHlwZSI6InN0cmluZyJ9LCJjbHVzdGVyV2lkZSI6eyJ0eXBlIjoiYm9vbGVhbiJ9LCJpbWFnZSI6eyJ0eXBlIjoic3RyaW5nIn0sImltYWdlUHVsbFBvbGljeSI6eyJ0eXBlIjoic3RyaW5nIn0sImxpc3RlbmVyIjp7InByb3BlcnRpZXMiOnsicG9ydCI6eyJmb3JtYXQiOiJpbnQzMiIsInR5cGUiOiJpbnRlZ2VyIn0sInRscyI6eyJwcm9wZXJ0aWVzIjp7ImNlcnRTZWNyZXRSZWYiOnsiZGVzY3JpcHRpb24iOiJMb2NhbE9iamVjdFJlZmVyZW5jZSBjb250YWlucyBlbm91Z2ggaW5mb3JtYXRpb24gdG8gbGV0IHlvdSBsb2NhdGUgdGhlIHJlZmVyZW5jZWQgb2JqZWN0IGluc2lkZSB0aGUgc2FtZSBuYW1lc3BhY2UuIiwicHJvcGVydGllcyI6eyJuYW1lIjp7ImRlc2NyaXB0aW9uIjoiTmFtZSBvZiB0aGUgcmVmZXJlbnQuIE1vcmUgaW5mbzogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd29ya2luZy13aXRoLW9iamVjdHMvbmFtZXMvI25hbWVzIFRPRE86IEFkZCBvdGhlciB1c2VmdWwgZmllbGRzLiBhcGlWZXJzaW9uLCBraW5kLCB1aWQ/IiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9LCJlbmFibGVkIjp7InR5cGUiOiJib29sZWFuIn19LCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In0sImxvZ0xldmVsIjp7InR5cGUiOiJzdHJpbmcifSwibG9nTW9kZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm9pZGNTZXJ2ZXIiOnsicHJvcGVydGllcyI6eyJwb3J0Ijp7ImZvcm1hdCI6ImludDMyIiwidHlwZSI6ImludGVnZXIifSwidGxzIjp7InByb3BlcnRpZXMiOnsiY2VydFNlY3JldFJlZiI6eyJkZXNjcmlwdGlvbiI6IkxvY2FsT2JqZWN0UmVmZXJlbmNlIGNvbnRhaW5zIGVub3VnaCBpbmZvcm1hdGlvbiB0byBsZXQgeW91IGxvY2F0ZSB0aGUgcmVmZXJlbmNlZCBvYmplY3QgaW5zaWRlIHRoZSBzYW1lIG5hbWVzcGFjZS4iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG9mIHRoZSByZWZlcmVudC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9vdmVydmlldy93b3JraW5nLXdpdGgtb2JqZWN0cy9uYW1lcy8jbmFtZXMgVE9ETzogQWRkIG90aGVyIHVzZWZ1bCBmaWVsZHMuIGFwaVZlcnNpb24sIGtpbmQsIHVpZD8iLCJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In0sImVuYWJsZWQiOnsidHlwZSI6ImJvb2xlYW4ifX0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifSwicmVwbGljYXMiOnsiZm9ybWF0IjoiaW50MzIiLCJ0eXBlIjoiaW50ZWdlciJ9LCJzZWNyZXRMYWJlbFNlbGVjdG9ycyI6eyJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkF1dGhvcmlub1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBBdXRob3Jpbm8iLCJwcm9wZXJ0aWVzIjp7ImNvbmRpdGlvbnMiOnsiZGVzY3JpcHRpb24iOiJDb25kaXRpb25zIGlzIGFuIGFycmF5IG9mIHRoZSBjdXJyZW50IEF1dGhvcmlubydzIENSIGNvbmRpdGlvbnMgU3VwcG9ydGVkIGNvbmRpdGlvbiB0eXBlczogQ29uZGl0aW9uUmVhZHkiLCJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imxhc3RUcmFuc2l0aW9uVGltZSI6eyJkZXNjcmlwdGlvbiI6Ikxhc3QgdGltZSB0aGUgY29uZGl0aW9uIHRyYW5zaXQgZnJvbSBvbmUgc3RhdHVzIHRvIGFub3RoZXIuIiwiZm9ybWF0IjoiZGF0ZS10aW1lIiwidHlwZSI6InN0cmluZyJ9LCJsYXN0VXBkYXRlZFRpbWUiOnsiZGVzY3JpcHRpb24iOiJMYXN0IHRpbWUgdGhlIGNvbmRpdGlvbiB3YXMgdXBkYXRlZCIsImZvcm1hdCI6ImRhdGUtdGltZSIsInR5cGUiOiJzdHJpbmcifSwibWVzc2FnZSI6eyJkZXNjcmlwdGlvbiI6Ikh1bWFuIHJlYWRhYmxlIG1lc3NhZ2UgaW5kaWNhdGluZyBkZXRhaWxzIGFib3V0IGxhc3QgdHJhbnNpdGlvbi4iLCJ0eXBlIjoic3RyaW5nIn0sInJlYXNvbiI6eyJkZXNjcmlwdGlvbiI6IihicmllZikgcmVhc29uIGZvciB0aGUgY29uZGl0aW9uJ3MgbGFzdCB0cmFuc2l0aW9uLiIsInR5cGUiOiJzdHJpbmcifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiU3RhdHVzIG9mIHRoZSBjb25kaXRpb24sIG9uZSBvZiBUcnVlLCBGYWxzZSwgVW5rbm93bi4iLCJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOnsiZGVzY3JpcHRpb24iOiJUeXBlIG9mIGNvbmRpdGlvbiIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0YXR1cyIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkiLCJ4LWt1YmVybmV0ZXMtbGlzdC1tYXAta2V5cyI6WyJ0eXBlIl0sIngta3ViZXJuZXRlcy1saXN0LXR5cGUiOiJtYXAifSwibGFzdEVycm9yIjp7ImRlc2NyaXB0aW9uIjoiUmVwb3J0cyBhbiBlcnJvciBkdXJpbmcgdGhlIGRlcGxveW1lbnQgb2YgYW4gaW5zdGFuY2UiLCJ0eXBlIjoic3RyaW5nIn0sInJlYWR5Ijp7ImRlc2NyaXB0aW9uIjoiIERlZmluZXMgaWYgdGhlIGF1dGhvcmlubyBpbnRhbmNlIGlzIHJlYWR5IiwidHlwZSI6ImJvb2xlYW4ifX0sInJlcXVpcmVkIjpbImxhc3RFcnJvciIsInJlYWR5Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
relatedImages:
  - image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
    name: ""
  - image: quay.io/3scale/authorino-operator:v0.0.1
    name: ""
  - image: quay.io/openshift-community-operators/authorino-operator@sha256:9faf70152efc608e59735258a38462208de42c1b33470d12c3557e7eca3dba1f
    name: ""
schema: olm.bundle
