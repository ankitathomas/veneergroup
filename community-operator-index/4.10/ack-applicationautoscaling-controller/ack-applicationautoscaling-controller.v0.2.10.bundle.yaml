image: quay.io/openshift-community-operators/ack-applicationautoscaling-controller@sha256:ac18489c2b42d8e1723780ce890713471b3de79cb59ee0bf85d0c080651fc8b5
name: ack-applicationautoscaling-controller.v0.2.10
package: ack-applicationautoscaling-controller
properties:
  - type: olm.gvk
    value:
      group: applicationautoscaling.services.k8s.aws
      kind: ScalableTarget
      version: v1alpha1
  - type: olm.gvk
    value:
      group: applicationautoscaling.services.k8s.aws
      kind: ScalingPolicy
      version: v1alpha1
  - type: olm.package
    value:
      packageName: ack-applicationautoscaling-controller
      version: 0.2.10
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiYWNrLWFwcGxpY2F0aW9uYXV0b3NjYWxpbmctbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJtZXRyaWNzcG9ydCIsInBvcnQiOjgwODAsInByb3RvY29sIjoiVENQIiwidGFyZ2V0UG9ydCI6Imh0dHAifV0sInNlbGVjdG9yIjp7ImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyIn0sInR5cGUiOiJOb2RlUG9ydCJ9LCJzdGF0dXMiOnsibG9hZEJhbGFuY2VyIjp7fX19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJhY2stYXBwbGljYXRpb25hdXRvc2NhbGluZy1yZWFkZXIifSwicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyJhcHBsaWNhdGlvbmF1dG9zY2FsaW5nLnNlcnZpY2VzLms4cy5hd3MiXSwicmVzb3VyY2VzIjpbInNjYWxhYmxldGFyZ2V0cyIsInNjYWxpbmdwb2xpY2llcyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giXX1dfQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJhY2stYXBwbGljYXRpb25hdXRvc2NhbGluZy13cml0ZXIifSwicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyJhcHBsaWNhdGlvbmF1dG9zY2FsaW5nLnNlcnZpY2VzLms4cy5hd3MiXSwicmVzb3VyY2VzIjpbInNjYWxhYmxldGFyZ2V0cyIsInNjYWxpbmdwb2xpY2llcyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJhcHBsaWNhdGlvbmF1dG9zY2FsaW5nLnNlcnZpY2VzLms4cy5hd3MiXSwicmVzb3VyY2VzIjpbInNjYWxhYmxldGFyZ2V0cyIsInNjYWxpbmdwb2xpY2llcyJdLCJ2ZXJicyI6WyJnZXQiLCJwYXRjaCIsInVwZGF0ZSJdfV19
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
relatedImages:
  - image: public.ecr.aws/aws-controllers-k8s/applicationautoscaling-controller:v0.2.10
    name: ""
  - image: quay.io/openshift-community-operators/ack-applicationautoscaling-controller@sha256:ac18489c2b42d8e1723780ce890713471b3de79cb59ee0bf85d0c080651fc8b5
    name: ""
schema: olm.bundle
