image: quay.io/openshift-community-operators/tf-controller@sha256:cdaeb470d9b331a3fa08167e5c904befb00be983e1354651670e21e13560bf9b
name: tf-controller.v0.9.0-rc.8
package: tf-controller
properties:
  - type: olm.gvk
    value:
      group: infra.contrib.fluxcd.io
      kind: Terraform
      version: v1alpha1
  - type: olm.package
    value:
      packageName: tf-controller
      version: 0.9.0-rc.8
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZUJpbmRpbmciLCJtZXRhZGF0YSI6eyJuYW1lIjoidGYtY2x1c3Rlci1yZWNvbmNpbGVyIn0sInJvbGVSZWYiOnsiYXBpR3JvdXAiOiJyYmFjLmF1dGhvcml6YXRpb24uazhzLmlvIiwia2luZCI6IkNsdXN0ZXJSb2xlIiwibmFtZSI6ImNsdXN0ZXItYWRtaW4ifSwic3ViamVjdHMiOlt7ImtpbmQiOiJTZXJ2aWNlQWNjb3VudCIsIm5hbWUiOiJ0Zi1jb250cm9sbGVyIiwibmFtZXNwYWNlIjoiZmx1eC1zeXN0ZW0ifV19
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlIiwibWV0YWRhdGEiOnsibmFtZSI6InRmLWxlYWRlci1lbGVjdGlvbi1yb2xlIn0sInJ1bGVzIjpbeyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJjb25maWdtYXBzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCIsImNyZWF0ZSIsInVwZGF0ZSIsInBhdGNoIiwiZGVsZXRlIl19LHsiYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsiY29uZmlnbWFwcy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwidXBkYXRlIiwicGF0Y2giXX0seyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJldmVudHMiXSwidmVyYnMiOlsiY3JlYXRlIl19LHsiYXBpR3JvdXBzIjpbImNvb3JkaW5hdGlvbi5rOHMuaW8iXSwicmVzb3VyY2VzIjpbImxlYXNlcyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giLCJjcmVhdGUiLCJ1cGRhdGUiLCJwYXRjaCIsImRlbGV0ZSJdfV19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlQmluZGluZyIsIm1ldGFkYXRhIjp7Im5hbWUiOiJ0Zi1sZWFkZXItZWxlY3Rpb24tcm9sZWJpbmRpbmcifSwicm9sZVJlZiI6eyJhcGlHcm91cCI6InJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8iLCJraW5kIjoiUm9sZSIsIm5hbWUiOiJ0Zi1sZWFkZXItZWxlY3Rpb24tcm9sZSJ9LCJzdWJqZWN0cyI6W3sia2luZCI6IlNlcnZpY2VBY2NvdW50IiwibmFtZSI6InRmLWNvbnRyb2xsZXIiLCJuYW1lc3BhY2UiOiJmbHV4LXN5c3RlbSJ9XX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoidGYtbWFuYWdlci1yb2xlIn0sInJ1bGVzIjpbeyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJjb25maWdtYXBzIiwic2VjcmV0cyIsInNlcnZpY2VhY2NvdW50cyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJldmVudHMiXSwidmVyYnMiOlsiY3JlYXRlIiwicGF0Y2giXX0seyJhcGlHcm91cHMiOlsiaW5mcmEuY29udHJpYi5mbHV4Y2QuaW8iXSwicmVzb3VyY2VzIjpbInRlcnJhZm9ybXMiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiaW5mcmEuY29udHJpYi5mbHV4Y2QuaW8iXSwicmVzb3VyY2VzIjpbInRlcnJhZm9ybXMvZmluYWxpemVycyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJwYXRjaCIsInVwZGF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJpbmZyYS5jb250cmliLmZsdXhjZC5pbyJdLCJyZXNvdXJjZXMiOlsidGVycmFmb3Jtcy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsic291cmNlLnRvb2xraXQuZmx1eGNkLmlvIl0sInJlc291cmNlcyI6WyJidWNrZXRzIiwiZ2l0cmVwb3NpdG9yaWVzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJzb3VyY2UudG9vbGtpdC5mbHV4Y2QuaW8iXSwicmVzb3VyY2VzIjpbImJ1Y2tldHMvc3RhdHVzIiwiZ2l0cmVwb3NpdG9yaWVzL3N0YXR1cyJdLCJ2ZXJicyI6WyJnZXQiXX1dfQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZUJpbmRpbmciLCJtZXRhZGF0YSI6eyJuYW1lIjoidGYtbWFuYWdlci1yb2xlYmluZGluZyJ9LCJyb2xlUmVmIjp7ImFwaUdyb3VwIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pbyIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm5hbWUiOiJ0Zi1tYW5hZ2VyLXJvbGUifSwic3ViamVjdHMiOlt7ImtpbmQiOiJTZXJ2aWNlQWNjb3VudCIsIm5hbWUiOiJ0Zi1jb250cm9sbGVyIiwibmFtZXNwYWNlIjoiZmx1eC1zeXN0ZW0ifV19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7Im5hbWUiOiJ0Zi1ydW5uZXItcm9sZSJ9LCJydWxlcyI6W3siYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsiY29uZmlnbWFwcyIsInNlY3JldHMiXSwidmVyYnMiOlsiZ2V0IiwibGlzdCIsIndhdGNoIiwiY3JlYXRlIiwidXBkYXRlIiwicGF0Y2giLCJkZWxldGUiXX0seyJhcGlHcm91cHMiOlsiY29vcmRpbmF0aW9uLms4cy5pbyJdLCJyZXNvdXJjZXMiOlsibGVhc2VzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCIsImNyZWF0ZSIsInVwZGF0ZSIsInBhdGNoIiwiZGVsZXRlIl19XX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZUJpbmRpbmciLCJtZXRhZGF0YSI6eyJuYW1lIjoidGYtcnVubmVyLXJvbGViaW5kaW5nIn0sInJvbGVSZWYiOnsiYXBpR3JvdXAiOiJyYmFjLmF1dGhvcml6YXRpb24uazhzLmlvIiwia2luZCI6IkNsdXN0ZXJSb2xlIiwibmFtZSI6InRmLXJ1bm5lci1yb2xlIn0sInN1YmplY3RzIjpbeyJraW5kIjoiU2VydmljZUFjY291bnQiLCJuYW1lIjoidGYtcnVubmVyIiwibmFtZXNwYWNlIjoiZmx1eC1zeXN0ZW0ifV19
relatedImages:
  - image: ghcr.io/weaveworks/tf-controller:v0.9.0-rc.8
    name: ""
  - image: quay.io/openshift-community-operators/tf-controller@sha256:cdaeb470d9b331a3fa08167e5c904befb00be983e1354651670e21e13560bf9b
    name: ""
schema: olm.bundle
