image: quay.io/openshift-community-operators/gitlab-runner-operator@sha256:de10e28d442f5c27297659372ca6b3ec505534757d0ba09a863bd60632dda494
name: gitlab-runner-operator.v1.9.0
package: gitlab-runner-operator
properties:
  - type: olm.gvk
    value:
      group: apps.gitlab.com
      kind: Runner
      version: v1beta2
  - type: olm.package
    value:
      packageName: gitlab-runner-operator
      version: 1.9.0
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJnaXRsYWItcnVubmVyLWFwcC1yb2xlIn0sInJ1bGVzIjpbeyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJzZWNyZXRzIiwicG9kcyIsInNlcnZpY2VzIiwic2VydmljZXMvc3RhdHVzIiwic2VydmljZXMvcHJveHkiLCJzZXJ2aWNlcy9maW5hbGl6ZXJzIiwicG9kcy9hdHRhY2giLCJwb2RzL2V4ZWMiLCJwb2RzL2xvZyIsInBlcnNpc3RlbnR2b2x1bWVjbGFpbXMiLCJjb25maWdtYXBzIl0sInZlcmJzIjpbImNyZWF0ZSIsImdldCIsImxpc3QiLCJ3YXRjaCIsImRlbGV0ZSIsInBhdGNoIiwidXBkYXRlIl19XX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlQmluZGluZyIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiZ2l0bGFiLXJ1bm5lci1hcHAtcm9sZWJpbmRpbmcifSwicm9sZVJlZiI6eyJhcGlHcm91cCI6InJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8iLCJraW5kIjoiUm9sZSIsIm5hbWUiOiJnaXRsYWItcnVubmVyLWFwcC1yb2xlIn0sInN1YmplY3RzIjpbeyJraW5kIjoiU2VydmljZUFjY291bnQiLCJuYW1lIjoiZ2l0bGFiLXJ1bm5lci1zYSIsIm5hbWVzcGFjZSI6ImdpdGxhYi1ydW5uZXItc3lzdGVtIn1dfQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoiZ2l0bGFiLXJ1bm5lci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlQmluZGluZyIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiZ2l0bGFiLXJ1bm5lci1tYW5hZ2VyLXJvbGViaW5kaW5nIn0sInJvbGVSZWYiOnsiYXBpR3JvdXAiOiJyYmFjLmF1dGhvcml6YXRpb24uazhzLmlvIiwia2luZCI6IlJvbGUiLCJuYW1lIjoibWFuYWdlci1yb2xlIn0sInN1YmplY3RzIjpbeyJraW5kIjoiU2VydmljZUFjY291bnQiLCJuYW1lIjoiZGVmYXVsdCIsIm5hbWVzcGFjZSI6ImdpdGxhYi1ydW5uZXItc3lzdGVtIn1dfQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiZ2l0bGFiLXJ1bm5lci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZUFjY291bnQiLCJtZXRhZGF0YSI6eyJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImdpdGxhYi1ydW5uZXItc2EifX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiZ2l0bGFiLXJ1bm5lci13ZWJob29rLXNlcnZpY2UifSwic3BlYyI6eyJwb3J0cyI6W3sicG9ydCI6NDQzLCJ0YXJnZXRQb3J0Ijo5NDQzfV0sInNlbGVjdG9yIjp7ImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifX0sInN0YXR1cyI6eyJsb2FkQmFsYW5jZXIiOnt9fX0=
relatedImages:
  - image: quay.io/openshift-community-operators/gitlab-runner-operator@sha256:de10e28d442f5c27297659372ca6b3ec505534757d0ba09a863bd60632dda494
    name: ""
  - image: registry.gitlab.com/gitlab-org/gl-openshift/gitlab-runner-operator/gitlab-runner-operator:v1.9.0
    name: ""
schema: olm.bundle
