image: quay.io/openshift-community-operators/microcks@sha256:60feac2230c0cde6b960cbc1769facf4b28c9a2c0cc4cb2968528c8b97c86ca6
name: microcks-operator.v1.5.2
package: microcks
properties:
  - type: olm.gvk
    value:
      group: microcks.github.io
      kind: MicrocksInstall
      version: v1alpha1
  - type: olm.package
    value:
      packageName: microcks
      version: 1.5.2
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsibmFtZSI6Im1pY3JvY2tzaW5zdGFsbHMubWljcm9ja3MuZ2l0aHViLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtaWNyb2Nrcy5naXRodWIuaW8iLCJuYW1lcyI6eyJraW5kIjoiTWljcm9ja3NJbnN0YWxsIiwibGlzdEtpbmQiOiJNaWNyb2Nrc0luc3RhbGxMaXN0IiwicGx1cmFsIjoibWljcm9ja3NpbnN0YWxscyIsInNpbmd1bGFyIjoibWljcm9ja3NpbnN0YWxsIn0sInNjb3BlIjoiTmFtZXNwYWNlZCIsInZlcnNpb25zIjpbeyJuYW1lIjoidjFhbHBoYTEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7InR5cGUiOiJvYmplY3QiLCJ4LWt1YmVybmV0ZXMtcHJlc2VydmUtdW5rbm93bi1maWVsZHMiOnRydWV9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX19
relatedImages:
  - image: quay.io/microcks/microcks-ansible-operator:1.5.2
    name: ""
  - image: quay.io/openshift-community-operators/microcks@sha256:60feac2230c0cde6b960cbc1769facf4b28c9a2c0cc4cb2968528c8b97c86ca6
    name: ""
schema: olm.bundle
