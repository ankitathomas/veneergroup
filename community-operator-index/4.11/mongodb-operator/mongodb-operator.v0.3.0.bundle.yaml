image: quay.io/openshift-community-operators/mongodb-operator@sha256:be8d0d3f7c497354980ffb34f4f504a40be391fcf99786637b216949ae10ec28
name: mongodb-operator.v0.3.0
package: mongodb-operator
properties:
  - type: olm.gvk
    value:
      group: opstreelabs.in
      kind: MongoDB
      version: v1alpha1
  - type: olm.gvk
    value:
      group: opstreelabs.in
      kind: MongoDBCluster
      version: v1alpha1
  - type: olm.package
    value:
      packageName: mongodb-operator
      version: 0.3.0
  - type: olm.bundle.object
    value:
      data: {"apiVersion":"operators.coreos.com/v1alpha1","kind":"ClusterServiceVersion","metadata":{"annotations":{"alm-examples":"[{\"apiVersion\":\"opstreelabs.in/v1alpha1\",\"kind\":\"MongoDB\",\"metadata\":{\"name\":\"mongodb\"},\"spec\":{\"kubernetesConfig\":{\"image\":\"quay.io/opstree/mongo:v5.0.6\",\"imagePullPolicy\":\"IfNotPresent\",\"securityContext\":{\"fsGroup\":1001}},\"storage\":{\"accessModes\":[\"ReadWriteOnce\"],\"storageSize\":\"1Gi\",\"storageClass\":\"gp2\"},\"mongoDBSecurity\":{\"mongoDBAdminUser\":\"admin\",\"secretRef\":{\"name\":\"mongodb-secret\",\"key\":\"password\"}}}},{\"apiVersion\":\"opstreelabs.in/v1alpha1\",\"kind\":\"MongoDBCluster\",\"metadata\":{\"name\":\"mongodb\"},\"spec\":{\"clusterSize\":3,\"kubernetesConfig\":{\"image\":\"quay.io/opstree/mongo:v5.0.6\",\"imagePullPolicy\":\"IfNotPresent\",\"securityContext\":{\"fsGroup\":1001}},\"storage\":{\"accessModes\":[\"ReadWriteOnce\"],\"storageSize\":\"1Gi\",\"storageClass\":\"gp2\"},\"mongoDBSecurity\":{\"mongoDBAdminUser\":\"admin\",\"secretRef\":{\"name\":\"mongodb-secret\",\"key\":\"password\"}}}}]","capabilities":"Seamless Upgrades","categories":"Database,  OpenShift Optional, Storage","certified":"false","containerImage":"quay.io/opstree/mongodb-operator:v0.3.0","createdAt":"05-04-2022","description":"A golang based operator to create and manage MongoDB standalone setup and cluster setup","k8sMaxVersion":"","k8sMinVersion":"1.17.0","repository":"https://github.com/ot-container-kit/mongodb-operator","support":""},"name":"mongodb-operator.v0.3.0","namespace":"placeholder"},"spec":{"customresourcedefinitions":{"owned":[{"description":"Mongo DB Cluster","displayName":"MongoDBCluster","kind":"MongoDBCluster","name":"mongodbclusters.opstreelabs.in","resources":[{"kind":"Deployment","version":"v1"},{"kind":"Service","version":"v1"},{"kind":"ReplicaSet","version":"v1"},{"kind":"Pod","version":"v1"},{"kind":"Secret","version":"v1"},{"kind":"ConfigMap","version":"v1"}],"specDescriptors":[],"statusDescriptors":[],"version":"v1alpha1"},{"description":"Mongo DB","displayName":"MongoDB","kind":"MongoDB","name":"mongodbs.opstreelabs.in","resources":[{"kind":"Deployment","version":"v1"},{"kind":"Service","version":"v1"},{"kind":"ReplicaSet","version":"v1"},{"kind":"Pod","version":"v1"},{"kind":"Secret","version":"v1"},{"kind":"ConfigMap","version":"v1"}],"specDescriptors":[],"statusDescriptors":[],"version":"v1alpha1"}],"required":[]},"description":"MongoDB Operator is an operator created in Golang to create, update, and manage MongoDB standalone, replicated, and arbiter replicated setup on Kubernetes and Openshift clusters. This operator is capable of doing the setup for MongoDB with all the required best practices.\n\n### Supported Features\n\n* MongoDB replicated cluster setup\n* MongoDB standalone setup\n* MongoDB replicated cluster failover and recovery\n* Monitoring support with MongoDB Exporter\n* Password based authentication for MongoDB\n* Kubernetes's resources for MongoDB standalone and cluster\n* Customizable configuration changes in MongoDB\n* Insightful Grafana dashboards\n\n### Documentation\n\n**[Documentation](https://ot-mongodb-operator.netlify.app/)**\n### Getting Help\n\nThis project is managed by OpsTree Solutions. If you have any queries or suggestions, mail us at opensource@opstree.com.\n### Contributing\nYou can contribute to this project by:-\n\n* Raising Bugs and Feature Requests\n* Fixing issue by opening a Pull Request\n* Improving Documentation\n\n### License\n\nMongoDB  Operator is licensed under [Apache License, Version 2.0](https://github.com/OT-CONTAINER-KIT/mongodb-operator/blob/master/LICENSE)\n\n\n","displayName":"MongoDB Operator","icon":[{"base64data":"PHN2ZyBpZD0iZTloeEp5dVdHMWMxIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB2aWV3Qm94PSIxNzAuMjEzMzc0IDE4Mi42MDMyMDIgMjAzLjQ3NjUyNiAyMjQuMDY1OTUxIiBzaGFwZS1yZW5kZXJpbmc9Imdlb21ldHJpY1ByZWNpc2lvbiIgdGV4dC1yZW5kZXJpbmc9Imdlb21ldHJpY1ByZWNpc2lvbiI+PGcgaWQ9ImU5aHhKeXVXRzFjMiIgdHJhbnNmb3JtPSJtYXRyaXgoMC42OSAwIDAgMC43NiAyNTkuNTEgMjc3LjM2KSI+PHBhdGggaWQ9ImU5aHhKeXVXRzFjMyIgZD0iTTgyLjA4NSwyNDQuOTM0Qzc2LjEzOSwyNDQuOTM0LDcwLjUyNCwyNDIuMjkyLDY2LjcyNSwyMzcuNTAyTDguOTIsMTY1LjY1N0M1LjEyMSwxNjAuODY3LDMuNjM1LDE1NC43NTcsNS4xMjEsMTQ4LjgxTDI1Ljc2Niw1OS4xMjhDMjcuMDg3LDUzLjE4MiwzMS4wNTEsNDguMzkyLDM2LjUwMiw0NS43NUwxMjAuMDczLDUuNzhDMTIyLjcxNiw0LjQ2LDEyNS42ODksMy43OTksMTI4LjY2MiwzLjc5OUMxMzEuNjM1LDMuNzk5LDEzNC42MDcsNC40NTksMTM3LjI1LDUuNzgxTDIyMC44MjIsNDUuNTg1QzIyNi4yNzIsNDguMjI3LDIzMC4yMzYsNTMuMDE3LDIzMS41NTcsNTguOTYzTDI1Mi4yMDIsMTQ4LjY0NUMyNTMuNTI0LDE1NC41OTEsMjUyLjIwMiwxNjAuNzAyLDI0OC40MDQsMTY1LjQ5MkwxOTAuNTk3LDIzNy4zMzdDMTg2Ljc5OCwyNDEuOTYxLDE4MS4xODMsMjQ0Ljc2OSwxNzUuMjM3LDI0NC43NjlMODIuMDg3LDI0NC45MzRaIiB0cmFuc2Zvcm09Im1hdHJpeCgxIDAgMCAxIC0xMjguNjMgLTEyNC4zNykiIGZpbGw9InJnYig1MCwxMDksMjMwKSIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjEiLz48L2c+PGcgaWQ9ImU5aHhKeXVXRzFjNCIgdHJhbnNmb3JtPSJtYXRyaXgoMC42OSAwIDAgMC43NiAyNTkuMjUgMjc3LjQ5KSI+PHBhdGggaWQ9ImU5aHhKeXVXRzFjNSIgZD0iTTEyOC40OTUsNy45MjhDMTMwLjgwOCw3LjkyOCwxMzMuMTIsOC40MjMsMTM1LjI2Nyw5LjQxNEwyMTguODM5LDQ5LjIxOEMyMjMuMTMzLDUxLjM2NSwyMjYuNDM2LDU1LjMyOSwyMjcuNDI3LDU5Ljk1NEwyNDguMDcyLDE0OS42MzZDMjQ5LjIyOCwxNTQuNDI2LDI0OC4wNzIsMTU5LjM4MSwyNDQuOTM0LDE2My4xNzlMMTg3LjEyOCwyMzUuMDI1QzE4NC4xNTUsMjM4LjgyMywxNzkuNTMsMjQwLjk3LDE3NC43NDEsMjQwLjk3TDgyLjA4NSwyNDAuOTdDNzcuMjk1LDI0MC45Nyw3Mi42NzEsMjM4LjgyMyw2OS42OTgsMjM1LjAyNUwxMS44OTIsMTYzLjE3OUM4LjkxOSwxNTkuMzgxLDcuNzYyLDE1NC40MjYsOC43NTQsMTQ5LjYzNkwyOS4zOTksNTkuOTU0QzMwLjU1NSw1NS4xNjQsMzMuNjkzLDUxLjIsMzcuOTg3LDQ5LjIxOEwxMjEuNTYsOS4yNUMxMjMuNzA3LDguNDI0LDEyNi4xODQsNy45MjksMTI4LjQ5Niw3LjkyOVpNMTI4LjQ5NSwwLjE2NUMxMjUuMDI3LDAuMTY1LDEyMS41NTksMC45OTEsMTE4LjI1NSwyLjQ3N0wzNC42ODQsNDIuNDQ3QzI4LjA3Nyw0NS41ODUsMjMuNDUzLDUxLjM2NSwyMS44MDEsNTguNDY3TDEuMTU2LDE0OC4xNUMtMC40OTUsMTU1LjI1MiwxLjE1NiwxNjIuNTE5LDUuNzgxLDE2OC4zTDYzLjU4NywyNDAuMTQ1QzY4LjA0NywyNDUuNzYsNzQuODE4LDI0OC44OTgsODEuOTIsMjQ4Ljg5OEwxNzQuNTc1LDI0OC44OThDMTgxLjY3NywyNDguODk4LDE4OC40NDksMjQ1Ljc2LDE5Mi45MDgsMjQwLjE0NUwyNTAuNzE1LDE2OC4yOTlDMjU1LjMzOSwxNjIuNjg0LDI1Ni45OTEsMTU1LjI1MiwyNTUuMzM5LDE0OC4xNDlMMjM0LjY5NCw1OC40NjdDMjMzLjA0Myw1MS4zNjUsMjI4LjQxOCw0NS41ODUsMjIxLjgxMiw0Mi40NDdMMTM4LjU3LDIuNDc2QzEzNS40MzIsMC45OTEsMTMxLjk2NCwwLjE2NSwxMjguNDk1LDAuMTY1WiIgdHJhbnNmb3JtPSJtYXRyaXgoMSAwIDAgMSAtMTI4LjI1IC0xMjQuNTMpIiBmaWxsPSJyZ2IoMjU1LDI1NSwyNTUpIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIvPjwvZz48ZyBpZD0iZTloeEp5dVdHMWM2IiB0cmFuc2Zvcm09Im1hdHJpeCgzLjM1IDAgMCAzLjM1IDI3MS4zNCAyNzAuNTcpIj48cGF0aCBpZD0iZTloeEp5dVdHMWM3IiBkPSJNMTUuOSwwLjA4N0wxNi43NTQsMS42OTFDMTYuOTQ2LDEuOTg3LDE3LjE1NCwyLjI0OSwxNy4zOTksMi40OTNDMTguMTE3Mjg0LDMuMjAyMzI2LDE4Ljc4NjgxLDMuOTU5Mzg0LDE5LjQwMyw0Ljc1OUMyMC44NSw2LjY1OSwyMS44MjYsOC43NjksMjIuNTIzLDExLjA1MUMyMi45NDEsMTIuNDQ1LDIzLjE2OCwxMy44NzUsMjMuMTg1LDE1LjMyMUMyMy4yNTUsMTkuNjQ0LDIxLjc3MywyMy4zNTYsMTguNzg1LDI2LjQ0MUMxOC4yOTg5NywyNi45MzAyMTcsMTcuNzczOTAxLDI3LjM3OTAzNCwxNy4yMTUsMjcuNzgzQzE2LjkxOSwyNy43ODMsMTYuNzc5LDI3LjU1NiwxNi42NTcsMjcuMzQ3QzE2LjQzNDgyOSwyNi45NTk0NDYsMTYuMjg2OTYzLDI2LjUzMzgyMiwxNi4yMjEsMjYuMDkyQzE2LjExNiwyNS41NjksMTYuMDQ3LDI1LjA0NiwxNi4wODEsMjQuNTA2TDE2LjA4MSwyNC4yNjJDMTYuMDU3LDI0LjIxLDE1Ljc5NiwwLjIxLDE1LjksMC4wODdaIiB0cmFuc2Zvcm09Im1hdHJpeCgxIDAgMCAxIC0xOS41MyAtMTMuOTMpIiBmaWxsPSJyZ2IoMjU1LDI1NSwyNTUpIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIvPjwvZz48ZyBpZD0iZTloeEp5dVdHMWM4IiB0cmFuc2Zvcm09Im1hdHJpeCgzLjM1IDAgMCAzLjM1IDI0Ny42MyAyNzAuOTIpIj48cGF0aCBpZD0iZTloeEp5dVdHMWM5IiBkPSJNMTUuOSwwLjAzNEMxNS44NjUsLTAuMDM2LDE1LjgzLDAuMDE3LDE1Ljc5NSwwLjA1MUMxNS44MTIsMC40MDEsMTUuNjksMC43MTMsMTUuNDk5LDEuMDExQzE1LjI4OSwxLjMwNywxNS4wMTEsMS41MzQsMTQuNzMyLDEuNzc4QzEzLjE4MiwzLjEyLDExLjk2Miw0Ljc0MSwxMC45ODUsNi41NTRDOS42ODUsOC45OTQsOS4wMTUsMTEuNjA5LDguODI1LDE0LjM2MkM4LjczOCwxNS4zNTUsOS4xMzksMTguODU5LDkuNDUyLDE5Ljg3QzEwLjMwNiwyMi41NTQsMTEuODQsMjQuODAzLDEzLjgyNywyNi43NTVDMTQuMzE1LDI3LjIyNSwxNC44MzcsMjcuNjYxLDE1LjM3NywyOC4wOEMxNS41MzQsMjguMDgsMTUuNTUxLDI3Ljk0LDE1LjU4NywyNy44MzZDMTUuNjU1ODMyLDI3LjYxMzQ2MiwxNS43MDgzMDYsMjcuMzg2MTg5LDE1Ljc0NCwyNy4xNTZMMTYuMDk0LDI0LjU0MloiIHRyYW5zZm9ybT0ibWF0cml4KDEgMCAwIDEgLTEyLjQ1IC0xNC4wNCkiIGZpbGw9InJnYigyNTUsMjU1LDI1NSkiIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIxIi8+PC9nPjxnIGlkPSJlOWh4Snl1V0cxYzEwIiB0cmFuc2Zvcm09Im1hdHJpeCgzLjM1IDAgMCAzLjM1IDI2MC40NiAzMTcuNzcpIj48cGF0aCBpZD0iZTloeEp5dVdHMWMxMSIgZD0iTTE2Ljc1NCwyOC44NDVDMTYuNzg5LDI4LjQ0NSwxNi45ODEsMjguMTEzLDE3LjE5LDI3Ljc4MkMxNi45OCwyNy42OTUsMTYuODI0LDI3LjUyMiwxNi43MDIsMjcuMzI5QzE2LjU5NjgwMiwyNy4xNDYyNjUsMTYuNTA5NzIxLDI2Ljk1MzY4MiwxNi40NDIsMjYuNzU0QzE2LjE5OCwyNi4wMjIsMTYuMTQ2LDI1LjI1NCwxNi4wNzYsMjQuNTA2TDE2LjA3NiwyNC4wNTNDMTUuOTg5LDI0LjEyMywxNS45NzEsMjQuNzE1LDE1Ljk3MSwyNC44MDNDMTUuOTIwMTE0LDI1LjU5MzU3NiwxNS44MTUyMDIsMjYuMzc5NzQ1LDE1LjY1NywyNy4xNTZDMTUuNjA1LDI3LjQ3LDE1LjU3LDI3Ljc4MywxNS4zNzcsMjguMDYyQzE1LjM3NywyOC4wOTcsMTUuMzc3LDI4LjEzMiwxNS4zOTQsMjguMTg0QzE1LjcwOCwyOS4xMDgsMTUuNzk0LDMwLjA0OSwxNS44NDcsMzEuMDA4TDE1Ljg0NywzMS4zNThDMTUuODQ3LDMxLjc3NiwxNS44MywzMS42ODgsMTYuMTc3LDMxLjgyOEMxNi4zMTcsMzEuODgsMTYuNDczLDMxLjg5OCwxNi42MTMsMzIuMDAyQzE2LjcxOCwzMi4wMDIsMTYuNzM1LDMxLjkxNSwxNi43MzUsMzEuODQ1TDE2LjY4MywzMS4yN0wxNi42ODMsMjkuNjY2QzE2LjY2NiwyOS4zODYsMTYuNzE4LDI5LjEwOCwxNi43NTMsMjguODQ2WiIgdHJhbnNmb3JtPSJtYXRyaXgoMSAwIDAgMSAtMTYuMjggLTI4LjAzKSIgZmlsbD0icmdiKDI1NSwyNTUsMjU1KSIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjEiLz48L2c+PGcgaWQ9ImU5aHhKeXVXRzFjMTIiIHRyYW5zZm9ybT0ibWF0cml4KDEgMCAwIDEgMjU5LjI1IDM4MC43OCkiPjx0ZXh0IGlkPSJlOWh4Snl1V0cxYzEzIiBkeD0iMCIgZHk9IjAiIGZvbnQtZmFtaWx5PSImcXVvdDtlOWh4Snl1V0cxYzE6OjpPcGVuIFNhbnMmcXVvdDsiIGZvbnQtc2l6ZT0iMTQiIGZvbnQtd2VpZ2h0PSI3MDAiIHRyYW5zZm9ybT0ibWF0cml4KDEgMCAwIDEgMCAwLjAwMDAwMSkiIGZpbGw9InJnYigxMiwxMTksMTkwKSIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjEiPjx0c3BhbiBpZD0iZTloeEp5dVdHMWMxNCIgeD0iLTY5Ljk5IiB5PSI0LjQiIGZvbnQtZmFtaWx5PSImcXVvdDtlOWh4Snl1V0cxYzE6OjpPcGVuIFNhbnMmcXVvdDsiIGZvbnQtc2l6ZT0iMTQiIGZvbnQtd2VpZ2h0PSI3MDAiIGZvbnQtc3R5bGU9Im5vcm1hbCIgZmlsbD0icmdiKDEyLDExOSwxOTApIiBzdHJva2Utd2lkdGg9IjEiPjwhW0NEQVRBW01vbmdvREIgT3BlcmF0b3JdXT48L3RzcGFuPjwvdGV4dD48L2c+PGcgaWQ9ImU5aHhKeXVXRzFjMTUiIHRyYW5zZm9ybT0ibWF0cml4KDEgMCAwIDEgMjk4LjE5IDM5OS45NSkiPjx0ZXh0IGlkPSJlOWh4Snl1V0cxYzE2IiBkeD0iMCIgZHk9IjAiIGZvbnQtZmFtaWx5PSImcXVvdDtlOWh4Snl1V0cxYzE6OjpPcGVuIFNhbnMmcXVvdDsiIGZvbnQtc2l6ZT0iMTEiIGZvbnQtd2VpZ2h0PSI2MDAiIHRyYW5zZm9ybT0ibWF0cml4KDEgMCAwIDEgMCAwLjAwMDAwMSkiIGZpbGw9InJnYigzNywxMTgsMTcxKSIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjEiPjx0c3BhbiBpZD0iZTloeEp5dVdHMWMxNyIgeD0iLTc1IiB5PSIzLjQ2IiBmb250LWZhbWlseT0iJnF1b3Q7ZTloeEp5dVdHMWMxOjo6T3BlbiBTYW5zJnF1b3Q7IiBmb250LXNpemU9IjExIiBmb250LXdlaWdodD0iNjAwIiBmb250LXN0eWxlPSJub3JtYWwiIGZpbGw9InJnYigzNywxMTgsMTcxKSIgc3Ryb2tlLXdpZHRoPSIxIj48IVtDREFUQVtCeSBPcHN0cmVlIFNvbHV0aW9uc11dPjwvdHNwYW4+PC90ZXh0PjwvZz48c3R5bGU+PCFbQ0RBVEFbQGZvbnQtZmFjZSB7Zm9udC1mYW1pbHk6ICdlOWh4Snl1V0cxYzE6OjpPcGVuIFNhbnMnO2ZvbnQtc3R5bGU6IG5vcm1hbDtmb250LXdlaWdodDogNjAwO2ZvbnQtc3RyZXRjaDogbm9ybWFsO3NyYzogdXJsKGRhdGE6Zm9udC90dGY7Y2hhcnNldD11dGYtODtiYXNlNjQsQUFFQUFBQVNBUUFBQkFBZ1IwUkZSZ0I0QUFrQUFBSHNBQUFBTEVkUVQxTkVkRXgxQUFBQlBBQUFBQjVIVTFWQzdaN3lqQUFBQWxBQUFBQTZUMU12TXBjSWd5d0FBQU00QUFBQVlGTlVRVlJlK0VFOUFBQUMzQUFBQUZwamJXRndBemtETUFBQUE1Z0FBQUNjWTNaMElEMUVMTWdBQUFRMEFBQUEvR1p3WjIzaUdaNWFBQUFUUkFBQUQ1Um5ZWE53QUJVQUl3QUFBU3dBQUFBUVoyeDVadFlwbElzQUFBcE1BQUFJOW1obFlXUWJuVFM2QUFBQ0dBQUFBRFpvYUdWaERjZ0Vsd0FBQVp3QUFBQWthRzEwZUZrTUNYOEFBQUtNQUFBQVVHeHZZMkVYQkJUTEFBQUJ3QUFBQUNwdFlYaHdBNXNRcFFBQUFWd0FBQUFnYm1GdFpUZFhaR0lBQUFVd0FBQUNmSEJ2YzNUL253QXlBQUFCZkFBQUFDQndjbVZ3aGYxNzZRQUFCNndBQUFLZkFBRUFBd0FJQUFvQURRQUgvLzhBRHdBQkFBQUFDZ0FjQUJ3QUFVUkdURlFBQ0FBRUFBQUFBUC8vQUFBQUFBQUFBQUVBQUFBVUFKRUFGZ0JmQUFVQUFnQVFBQzhBbWdBQUFyNFBnd0FEQUFFQUF3QUFBQUFBQVArY0FESUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCQUFBSWpmMm9BQUFKcHZ1Yy9UUUpuQUFCQUFBQUFBQUFBQUFBQUFBQUFBQUFGQUFBQUFBQUFBQktBSG9Bc3dEMEFVa0JtZ0hhQWwwQ2d3S1ZBc1lEQWdOVUE0VUQwZ1FJQkR3RWV3QUFBQUVBQWdBaUFBQUFBQUFBQUE0QUFRQURBQUFBRUFBQUFCQUFBQUFRQUFFQUFBQUNBQUVBQWdBVEFBRUFBUUFBQUFNQVF1UE5BMGhmRHp6MUFBc0lBQUFBQUFEWnpNTDNBQUFBQU4xM0psSDduUDNUQ1p3SVlnQUFBQVlBQWdBQUFBQUFBQUFCQUFBQUNnQTRBRGdBQlVSR1RGUUFKR041Y213QUlHZHlaV3NBSUdobFluSUFJR3hoZEc0QUlBQUFBQUFBQkFBQUFBRC8vd0FBQUFBQUFBVE5BTUVDRkFBQUJVWUF3QVhkQU1BSFh3REFCa3dBZWdSbUFHUUVwQUJhQkp3QVp3UnZBQk1DT3dDYUFqc0FxQVVWQUtnRTRnQm5CUHNBcUFOMEFLZ0Q1UUJqQXlvQUtBVVZBSjhFU0FBQkFBRUFBUUFJQUFNQUFBQVVBQU1BQUFBc0FBSjNaSFJvQVFFQUFIZG5hSFFCQUFBQmFYUmhiQUVjQUFJQUJnQVNBQjRBQVFBQUFBSUJHZ0JrQUFBQUFRQUJBQUFCQlFKWUFBQUFBd0FDQUFJQkhRQUFBQUFBQVFBQUFBQUFCQVNSQWxnQUJRQUFCVE1FelFBQUFKb0ZNd1ROQUFBQ3pRQXlBcElBQUFBQUFBQUFBQUFBQUFEZ0FBTC9RQUFnR3dBQUFDZ0FBQUFBUjA5UFJ3SEFBQUQvL1FpTi9hZ0FBQWorQW9zQUFBR2ZBQUFBQUFSSUJiWUFBQUFnQUFRQUFBQUNBQUFBQXdBQUFCUUFBd0FCQUFBQUZBQUVBSWdBQUFBZUFCQUFBd0FPQUNBQVFnQkVBRTBBVHdCVEFHRUFaUUJuQUdrQWJBQndBSFVBZWYvL0FBQUFJQUJDQUVRQVRRQlBBRk1BWVFCbEFHY0FhUUJzQUc0QWNnQjUvLy8vNGYvQS83Ly90LysyLzdQL3B2K2ovNkwvb2YrZi81Ny9uZithQUFFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUdGQUFMQmJZQUZnVzJBQllFVFFBVUFBRC82Z0FBLyt3QUFQL3EvaGIvL2dXMkFCVUFBUC9yQUFBQXFBQ3FBSllBbGdDbUFJSUFnZ0NyQUpZQWNRQ2ZBSThBcVFDbUFNZ0FiUUNLQUpvQWF3Q09BSnNBZWdDa0FJMEJPZ0NFQUpvQW9nQ0tBTzRBaFFCNEFVZ0FoUUI2QUpvQW5nQ3FBTE1BbGdCeEFJVUFrQUNaQUo4QXBBQ3BBTEFBbXdDbUFLd0F5QUJ0QUhvQWdnQ0tBSm9BYXdDQ0FJb0FrZ0NiQUtBQXBnQjZBS01BcXdDdkFJTUFqQUNZQVRvQWNRQ0FBSWNBandDYkFLVUFmUUNHQUlzQWxRQ2JBS1VBcmdEdUFIZ0FmZ0NJQUpNQlNBQjVBSUFBaGdDTEFKUUFtZ0NuQnNJRGVnVUtBQlQvT0FLZUE2Y0FBQUFPQUs0QUF3QUJCQWtBQUFDc0FTSUFBd0FCQkFrQUFRQWtBUDRBQXdBQkJBa0FBZ0FPQVBBQUF3QUJCQWtBQXdBNEFMZ0FBd0FCQkFrQUJBQWtBUDRBQXdBQkJBa0FCUUFhQUo0QUF3QUJCQWtBQmdBaUFId0FBd0FCQkFrQURnQTBBRWdBQXdBQkJBa0JBQUFNQUR3QUF3QUJCQWtCQVFBS0FESUFBd0FCQkFrQkJRQVFBQ0lBQXdBQkJBa0JHZ0FNQUJZQUF3QUJCQWtCSEFBTUFBb0FBd0FCQkFrQkhRQUtBQUFBVWdCdkFHMEFZUUJ1QUVrQWRBQmhBR3dBYVFCakFFNEFid0J5QUcwQVlRQnNBRk1BWlFCdEFHa0FRZ0J2QUd3QVpBQlhBR2tBWkFCMEFHZ0FWd0JsQUdrQVp3Qm9BSFFBYUFCMEFIUUFjQUE2QUM4QUx3QnpBR01BY2dCcEFIQUFkQUJ6QUM0QWN3QnBBR3dBTGdCdkFISUFad0F2QUU4QVJnQk1BRThBY0FCbEFHNEFVd0JoQUc0QWN3QXRBRk1BWlFCdEFHa0FRZ0J2QUd3QVpBQldBR1VBY2dCekFHa0Fid0J1QUNBQU13QXVBREFBTUFBd0FETUFMZ0F3QURBQU1BQTdBRWNBVHdCUEFFY0FPd0JQQUhBQVpRQnVBRk1BWVFCdUFITUFMUUJUQUdVQWJRQnBBRUlBYndCc0FHUUFVZ0JsQUdjQWRRQnNBR0VBY2dCUEFIQUFaUUJ1QUNBQVV3QmhBRzRBY3dBZ0FGTUFaUUJ0QUdrQVFnQnZBR3dBWkFCREFHOEFjQUI1QUhJQWFRQm5BR2dBZEFBZ0FESUFNQUF5QURBQUlBQlVBR2dBWlFBZ0FFOEFjQUJsQUc0QUlBQlRBR0VBYmdCekFDQUFVQUJ5QUc4QWFnQmxBR01BZEFBZ0FFRUFkUUIwQUdnQWJ3QnlBSE1BSUFBb0FHZ0FkQUIwQUhBQWN3QTZBQzhBTHdCbkFHa0FkQUJvQUhVQVlnQXVBR01BYndCdEFDOEFad0J2QUc4QVp3QnNBR1VBWmdCdkFHNEFkQUJ6QUM4QWJ3QndBR1VBYmdCekFHRUFiZ0J6QUNsQS8zbzhlVlY1V1hZNFR4OTFPUDhmZERpckgzTTJ6Ujl5TnY4ZmNUYXJIM0EzL3g5dk5mOGZiak5lSDIwei94OXNOS3NmYXpUL0gyb3kveDlwTUdjZmFERC9IMmN3Y2g5bU1FVWZaVEgvSDJReHpSOWpNVThmWWk5ZUgyRXYveDlnTGs4Zlh5NnJIMTR1L3g5ZExqWWZYQzMvSDFzc1hoOWFMUDhmV1N4bkgxZ3JYaDlYSzVNZlZpdi9IMVVxL3g5VUtWNGZVeW1ySDFJcC94OVJLSUFmVUNqL0gwOG9nQjlPSi84ZlRTYi9IMHdsL3g5TEpZQWZTaVZBSDBray94OUlJLzhmUnlLckgwWWkveDlGSWw0ZlJDR1RIME1oL3g5Q0g4MGZRUi8vSDBBZnF4OC9JUDhmUGlCbkh6MGUveDg4SGY4Zk94eHlIem9jL3g4NUhFOGZOMERDTmw0Zk5ETlBIekV3S3g4cEtFOGZLQlViR1Z3bkd5MGZKaVZBSHlVT0dobGNKQm94SHlNWkh4OGlHZjhmSVI5bkh5QWZRQjhmSEJnV1hCNFlIQjhkRi84ZkhCYi9IeHN5R1I5YkdEZ1dOMXNhTWhrZld4YzRGamRiRlJrK0Z2OWFFekVTVlJFeEVGVVNXUkJaRFRJTVZRVXlCRlVNV1FSWkR3Ui9CTzhFQXcvL0RsVUxNZ3BWQnpJR1ZRRmZBRlVPV1FwWkJsblBCdThHQWdCWmJ3Qi9BSzhBN3dBRUVBQUJDVElJVlFNeUFsVUlXUUpaRHdKL0F1OENBeEFBQTBCQUJRRzRBWkN3VkN0THVBZi9Va3V3Q1ZCYnNBR0lzQ1ZUc0FHSXNFQlJXckFHaUxBQVZWcGJXTEVCQVk1WmhZMk5BQjFDUzdDUVUxaXlBd0FBSFVKWnNRSUNRMUZZc1FRRGpsbENjd0FyQUNzckszTnpBQ3R6QUNzQUt3QXJLeXNySzNNQUt3QXJLeXNBS3dBckt5c0JLd0VyQVNzQkt3RXJBU3NBS3lzQkt5c3JBU3NyQUNzQUt5c3JBU3NyQVNzQUt5c0JLeXNyQUNzckt5c3JLeXNyS3dFckt5c3JBQ3NyS3lzckt5c3JLeXNyS3dFckt5c3JBQ3NyS3lzckt5c3JLeXNCS3lzckt5c3JLeXNBS3lzckt5c3JLeXNyS3lzckFDc3JHQUFBQXdEQUFBQUUyQVcyQUJJQUd3QWxBQjlBRHdrSUV4TWNIQUFkRWdoeUd3QUNjZ0FyTWlzeUVqa3ZNeEk1T1RBeEV5RWdCQlVVQmdZSEZSNENGUlFHQmlNaEV6TXlOalUwSmlNakVSRXpNalkxTkNZbUk4QUJzd0ViQVNBN2NGSlZoVTEvNjZIOTgvRG1vMzZWb3REOXFJZzlpblVGdHFUSlZJZFhEd29QVEk1eGhyeGlBMXRxWm1oYy9hcitNSUp2UkdRM0FBSUF3QUFBQldNRnRnQUtBQlFBRUxjUUJnSnlFUVVJY2dBck1pc3lNREVCRkFJRUl5RVJJVElFRWdjMEppWWpJeEV6SUFBRlk3aitvdmYrYWdIQzR3Rkt0UHB4MjZETnFnRUpBUVlDNmZmK3RhY0Z0cVArd2ZLMDZISDcyZ0VPQUFFQXdBQUFCcDhGdGdBWEFCeEFEd3NNRlFFRUNBNEtBbklYRUFnSWNnQXJNaklyTWhJWE9UQXhJUUVqSGdJVkVTTVJJUUV6QVNFUkl4RTBOalkzSXdFRE4vNWJDUU1JQnRvQlVRR1ZCZ0dqQVZEbEJRY0NDUDVMQk1VcGpxSksvTjRGdHZ0eEJJLzZTZ011UTV5TUt2czlBQUlBZXYvc0JkSUZ6UUFSQUNBQUVMY2REZ055RmdVSmNnQXJNaXN5TURFQkZBSUdCQ01pSkNZQ05UUVNKRE15QkJJRkZCWVdNekkyTmpVUUFpTWlCZ1lGMGxXcS93Q3NyLzcvcVZTVkFUSHA1QUV1bC91a1hMK1dsNzVhemVDV3dWd0MzYW4rNjhkc2JNZ0JGcW5pQVZHN3V2NnY1YW4zaFlYM3FRRUJBU09FOVFBQkFHVC83QVFNQmNzQUx3QWNRQkFRQUJRc0tCa0dCQ1FkQTNJTUJBbHlBQ3N5S3pJU0Z6a3dNUUVVQmdZaklpWW1KelVXRmpNeU5qWTFOQ1ltSnk0RE5UUTJOak15RmhjSEppWWpJZ1lHRlJRV0ZoY2VBZ1FNZisya1VKS0JOVm5jY2wxN1BFYU5ha2lEWmp0MzJaRnp5MkpNV3FsWVRHbzNQNFZwZWFsYUFZNkN2R1FTSXhuaUp6OHhXejFCV2tzckhVcGtpVjE4c0Y0d0xNRWxMQzVUT1VCWFNDd3licGtBQUFJQVd2L3NCQU1FYUFBZEFDZ0FJMEFTQnlVbEN4NFRFd0FMQzNJRUNuSVhBQWR5QUNzeUt5c1NPUzh6RVRNUk16QXhBVElXRlJFakp5TU9BaU1pSmlZMU5EWWxOelUwSmlNaUJnY25OallCQndZR0ZSUVdNekkyTlFKYTB0ZW5MUWd2WklOZVk1eGEvd0VDd0d0aFU1eEtURkhQQVRDUHNJNWlVSHFoQkdpNnhmMFhuVHhPSjBtV2M2dXNDUWM2YzJJd0k2WXJOdjJwQlFac1hsSkxpNGNBQUFJQVovL3NCRHNFYUFBWEFCOEFHVUFNR3dZR0FBa1FDM0lZQUFkeUFDc3lLeklTT1M4ek1ERUJNaFlXRlJVaEZoWXpNalkzRlFZR0l5SW1KalUwRWpZWElnWUhJUzRDQW1HVTFITDlIUVNsbFdxcFdsT3NlS1AzaTM3a21HK0pEQUg0QVRWckJHaDY0Sngrb2E0cEtMOG5KSC84dTdvQkJJaXhrSXRUZ0VnQUF3QVQvaFFFVGdScEFDOEFQd0JMQUMxQUZpSU1RRUFnQmprNUtTa0FHaGNYUmhNSGNqQUFEM0lBS3pJck1qSVJNeEU1THpNU09jWXlFVGs1TURFQklpWTFORFkzSmlZMU5EWTNKaVkxTkRZMk16SVdGaGNoRlFjV0ZoVVVCaU1tSndZR0ZSUVdGak16TWhZVkZBUWxNalkyTlRRbUppTWpJZ1lHRlJRV0V6STJOVFFtSXlJR0ZSUVdBZVRoOElCM0xVRkdSbGRwWnNTTEhrYzlFQUYvdkJzZzdkQXlMeVFtSmtzMnY3YkEvc2orNUh1b1ZqWnNVSzVCWkRlSHFtZGtaMlZqWjJmK0ZLS1NabzBiRkZVMFBsZ3BKYWR4ZUtsWkJ3a0ZneU1tWVRtc3hRSUdGalVoR3lFUW1wVzl6YVV3V1QwMk9oWXBUamRNVWdOZWNXZHdjSEp3WlhFQUFBSUFtZ0FBQWFRRit3QURBQThBRUxjRUNnTUdjZ0lLY2dBcks4NHlNREVCRVNNUkV6SVdGUlFHSXlJbU5UUTJBWlByZHpaUFR6WTRUVTBFVS91dEJGTUJxRHBIUmpzN1JrYzZBQUFCQUtnQUFBR1VCaFFBQXdBTXRRSUFjZ0VLY2dBckt6QXhJU01STXdHVTdPd0dGQUFCQUtnQUFBUjFCR2dBRlFBYlFBNFBCbklGRGdweUVoRUpDUUFIY2dBck1oRXpNeXN5S3pBeEFUSVdGUkVqRVRRbUl5SUdGUkVqRVRNWE16NENBdW03MGV0cWI2Rjk2N2NoRFNScmhRUm93ZFg5TGdLbWdZSEd2UDNhQkZPV09rc21BQUlBWi8vc0JId0VhQUFSQUNBQUVMY2VEZ2R5RmdVTGNnQXJNaXN5TURFQkZBNENJeUl1QWpVME5qWXpNaFlTQlJRV0ZqTXlOalkxTkNZbUl5SUdCSHhJaXNKNmNyNkxUSC9zbzVucWhQemRPM3hpWW53Nk9ueGprb1lDTElyV2swMU5rOWFLdC8rR2h2OEF0bm1zVzF1c2VYbXBXY1FBQUFJQXFQNFZCSlFFYUFBWUFDZ0FKVUFVRWdaeUVRNXlDd3dpSWdjTGNoVVVHUmtBQjNJQUt6SVJNek1yTWhFek15c3JNREVCTWhJUkZBSUdJeUltSmljakZoWVZFU01STXhjelBnSVhJZ1lHQnhVVUZoWXpNalkyTlRRbUF1REY3Mi9IaEZSOFdCNE9CUW5zd0NFTEgxbC9GbUYxTlFJemQyWldjVGgvQkdqKzRQN2t2UDcvZ3l4SEtpaGhLUDQ5Qmo2WkwxQXZ3RTJhZENGN3ExbGVybmF6eGdBQUFRQ29BQUFEVHdSb0FCVUFHVUFORHdaeURncHlFaEVIQndBSGNnQXJNaEV6TXlzck1ERUJNaFlYQnlZbUl5SU9BaFVSSXhFekZ6TStBZ0xaSEVJWUZoVTlHRDl5V0RMc3VDQUxJV0ovQkdnR0Jkd0dCaWxUZkZMOXZRUlR3enRpT3dBQkFHUC83QU9RQkdnQUtnQWFRQTRPRWljV0JBUWdHUWR5Q3dRTGNnQXJNaXN5RWhjNU1ERUJGQVlHSXlJbUp6VVdGak15TmpVMEppWW5MZ0kxTkRZek1oWVhCeVltSXlJR0ZSUVdGaGNlQWdPUWFzdVRkS2RLVDhWWWRHWXBiMnRwa0VycHdHYTFWMHBMbDA1Ylh5NXhaV09SVGdFOGJaWk5JU0xMSlRaSlBTUTVQU3NxVkhkZGs1a3BKN0VoS3pnMEp6WTJLQ1pUZUFBQUFRQW8vK3dDOFFWSkFCZ0FIVUFPRGhJTkZSVVFEeElHY2dBSEMzSUFLeklyTXMwekVUTVNPVEF4SlRJMk54VUdCaU1pSmlZMUVTTTFOemN6RlNFVklSRVVGZ0pFTGxvbEozeERYcFpZbDZKTmxBRTkvc05VcWhFTXNoRVlQNXFJQWxOcFUrMzJzLzJ3VkZJQUFRQ2YvK3dFYlFSVEFCY0FHMEFPRncwR2NnTUVFaElJQzNJQkNuSUFLeXN5RVRNekt6SXdNUUVSSXljakRnSWpJaVltTlJFekVSUVdNekkyTmpVUkJHMjVJQTBqYklSSmZiRmU3R2x2YTM0MUJGUDdyWlU1U3lWVnNvMEMwLzFaZ1lCWXJIMENKd0FCQUFIK0ZBUklCRk1BSFFBYVFBNEdIUndOQkFBWUVROXlEQUFHY2dBck1pc3lFaGM1TURFVElSTWVBaGN6TmpZM0V6TUJEZ0lqSWlZbk5SWVdNekkyTmpjM0FRRUE0dzhaRXdZR0NpVVgydjMrSlNsM29tZ3lTaG9WUUNJL1hFQVZKd1JUL1lnclUxQW9OSUZCQW5qN0ZXeVpUd3NHdkFVSU1sczZhQUFBUUVxWm1KZVdoNGFGaElPQ2dZQi9mbjE4ZTNwNWVIZDJkWFJ6Y25Gd2IyNXRiR3RxYVdoblptVmtZMkpoWUY5ZVhWeGJXbGxZVjFaVlZGTlJVRTlPVFV4TFNrbElSMFlvSHhBS0NTd0JzUXNLUXlORFpRb3RMQUN4Q2d0REkwTUxMU3dCc0FaRHNBZERaUW90TExCUEt5Q3dRRkZZSVV0U1dFVkVHeUVoV1JzakliQkFzQVFsUmJBRUpVVmhaSXBqVWxoRlJCc2hJVmxaTFN3QXNBZERzQVpEQ3kwc1MxTWpTMUZhV0NCRmltQkVHeUVoV1Mwc1MxUllJRVdLWUVRYklTRlpMU3hMVXlOTFVWcFlPQnNoSVZrdExFdFVXRGdiSVNGWkxTeXdBa05VV0xCR0t4c2hJU0VoV1Mwc3NBSkRWRml3UnlzYklTRWhXUzBzc0FKRFZGaXdTQ3NiSVNFaElWa3RMTEFDUTFSWXNFa3JHeUVoSVZrdExDTWdzQUJRaW9wa3NRQURKVlJZc0VBYnNRRURKVlJZc0FWRGkxbXdUeXRaSTdCaUt5TWhJMWhsV1Mwc3NRZ0FEQ0ZVWUVNdExMRU1BQXdoVkdCRExTd0JJRWV3QWtNZ3VCQUFZcmdRQUdOWEk3Z0JBR0s0RUFCalYxcFlzQ0JnWmxsSUxTeXhBQUlsc0FJbHNBSWxVN2dBTlNONHNBSWxzQUlsWUxBZ1l5QWdzQVlsSTJKUVdJb2hzQUZnSXhzZ0lMQUdKU05pVWxnakliQUJZUnVLSVNNaElGbFp1UC9CSEdDd0lHTWpJUzBzc1FJQVFyRWpBWWhSc1VBQmlGTmFXTGdRQUxBZ2lGUllzZ0lCQWtOZ1FsbXhKQUdJVVZpNElBQ3dRSWhVV0xJQ0FnSkRZRUt4SkFHSVZGaXlBaUFDUTJCQ0FFc0JTMUpZc2dJSUFrTmdRbGtidUVBQXNJQ0lWRml5QWdRQ1EyQkNXYmhBQUxDQVk3Z0JBSWhVV0xJQ0NBSkRZRUpadVVBQUFRQmp1QUlBaUZSWXNnSVFBa05nUWxteEpnR0lVVmk1UUFBQ0FHTzRCQUNJVkZpeUFrQUNRMkJDV2JsQUFBUUFZN2dJQUloVVdMSUNnQUpEWUVKWnNTZ0JpRkZZdVVBQUNBQmp1QkFBaUZSWXVRQUNBUUN3QWtOZ1FsbFpXVmxaV1ZteEFBSkRWRmhBQ2dWQUNFQUpRQXdDRFFJYnNRRUNRMVJZc2dWQUNMb0JBQUFKQVFDekRBRU5BUnV4Z0FKRFVsaXlCVUFJdUFHQXNRbEFHN2dCQUxBQ1ExSllzZ1ZBQ0xvQmdBQUpBVUFidUFHQXNBSkRVbGl5QlVBSXVBSUFzUWxBRzdJRlFBaTZBUUFBQ1FFQVdWbFp1RUFBc0lDSVZibEFBQUlBWTdnRUFJaFZXbGl6REFBTkFSdXpEQUFOQVZsWldVSkNRa0pDTFN4RnNRSk9LeU93VHlzZ3NFQlJXQ0ZMVVZpd0FpVkZzUUZPSzJCWkd5TkxVVml3QXlWRklHU0tZN0JBVTFpeEFrNHJZQnNoV1JzaFdWbEVMU3dnc0FCUUlGZ2paUnNqV2JFVUZJcHdSYkVRRUVOTGlrTlJXbGl3UUJ1d1R5dFpJN0ZoQmlaZ0s0cFlzQVZEaTFraldHVlpJeEE2TFN5d0F5VkpZeU5HWUxCUEt5T3dCQ1d3QkNWSnNBTWxZMVlnWUxCaVlDdXdBeVVnRUVhS1JtQ3dJR05oT2kwc3NBQVdzUUlESmJFQkJDVUJQZ0Erc1FFQ0JneXdDaU5sUXJBTEkwS3hBZ01sc1FFRUpRRS9BRCt4QVFJR0RMQUdJMlZDc0FjalFyQUJGckVBQWtOVVdFVWpSU0FZYVlwakkySWdJTEJBVUZobkcyWlpZYkFnWTdCQUkyR3dCQ05DRzdFRUFFSWhJVmtZQVMwc0lFV3hBRTRyUkMwc1MxR3hRRThyVUZ0WUlFV3hBVTRySUlxS1JDQ3hRQVFtWVdOaHNRRk9LMFFoR3lNaGlrV3hBVTRySUlvalJFUlpMU3hMVWJGQVR5dFFXMWhGSUlxd1FHRmpZQnNqSVVWWnNRRk9LMFF0TENORklJcEZJMkVnWkxCQVViQUVKU0N3QUZNanNFQlJXbHF4UUU4clZGcFlpZ3hrSTJRalUxaXhRRUNLWVNCallSc2dZMWtiaWxsanNRSk9LMkJFTFN3QkxTd0FMU3dGc1FzS1F5TkRaUW90TExFS0MwTWpRd3NDTFN5d0FpVmpackFDSmJnZ0FHSmdJMkl0TExBQ0pXT3dJR0Jtc0FJbHVDQUFZbUFqWWkwc3NBSWxZMmV3QWlXNElBQmlZQ05pTFN5d0FpVmpackFnWUxBQ0piZ2dBR0pnSTJJdExDTktzUUpPS3kwc0kwcXhBVTRyTFN3amlrb2pSV1N3QWlWa3NBSWxZV1N3QTBOU1dDRWdaRm14QWs0ckk3QUFVRmhsV1Mwc0k0cEtJMFZrc0FJbFpMQUNKV0Zrc0FORFVsZ2hJR1Jac1FGT0t5T3dBRkJZWlZrdExDQ3dBeVZLc1FKT0s0b1FPeTBzSUxBREpVcXhBVTRyaWhBN0xTeXdBeVd3QXlXS3NHY3JpaEE3TFN5d0F5V3dBeVdLc0dncmloQTdMU3l3QXlWR3NBTWxSbUN3QkNVdXNBUWxzQVFsc0FRbUlMQUFVRmdoc0dvYnNHeFpLN0FESlVhd0F5VkdZR0d3Z0dJZ2lpQVFJem9qSUJBak9pMHNzQU1sUjdBREpVZGdzQVVsUjdDQVkyR3dBaVd3QmlWSll5T3dCU1ZLc0lCaklGaGlHeUZac0FRbVJtQ0tSb3BHWUxBZ1kyRXRMTEFFSnJBRUpiQUVKYkFFSnJCdUt5Q0tJQkFqT2lNZ0VDTTZMU3dqSUxBQlZGZ2hzQUlsc1FKT0s3Q0FVQ0JnV1NCZ1lDQ3dBVkZZSVNFYklMQUZVVmdoSUdaaHNFQWpZYkVBQXlWUXNBTWxzQU1sVUZwWUlMQURKV0dLVTFnaHNBQlpHeUZaRzdBSFZGZ2dabUZsSXlFYklTR3dBRmxaV2JFQ1Rpc3RMTEFDSmJBRUpVcXdBRk5Zc0FBYmlvb2ppckFCV2JBRUpVWWdabUVnc0FVbXNBWW1TYkFGSnJBRkpyQndLeU5oWmJBZ1lDQm1ZYkFnWVdVdExMQUNKVVlnaWlDd0FGQllJYkVDVGlzYlJTTWhXV0Zsc0FJbEVEc3RMTEFFSmlDNEFnQmlJTGdDQUdPS0kyRWdzRjFnSzdBRkpSR0tFb29nT1lwWXVRQmRFQUN3QkNaalZtQXJJeUVnRUNCR0lMRUNUaXNqWVJzaklTQ0tJQkJKc1FKT0sxazdMU3k1QUYwUUFMQUpKV05XWUN1d0JTV3dCU1d3QlNhd2JTdXhYUWNsWUN1d0JTV3dCU1d3QlNXd0JTV3dieXU1QUYwUUFMQUlKbU5XWUNzZ3NBQlNXTEJRSzdBRkpiQUZKYkFISmJBSEpiQUZKYkJ4SzdBQ0Z6aXdBRkt3QWlXd0FWSmFXTEFFSmJBR0pVbXdBeVd3QlNWSllDQ3dRRkpZSVJ1d0FGSllJTEFDVkZpd0JDV3dCQ1d3QnlXd0J5VkpzQUlYT0J1d0JDV3dCQ1d3QkNXd0JpVkpzQUlYT0ZsWldWbFpJU0VoSVNFdExMa0FYUkFBc0FzbFkxWmdLN0FISmJBSEpiQUdKYkFHSmJBTUpiQU1KYkFKSmJBSUpiQnVLN0FFRnppd0J5V3dCeVd3Qnlhd2JTdXdCQ1d3QkNXd0JDYXdiU3V3VUN1d0JpV3dCaVd3QXlXd2NTdXdCU1d3QlNXd0F5V3dBaGM0SUxBR0piQUdKYkFGSmJCeEsyQ3dCaVd3QmlXd0JDVmxzQUlYT0xBQ0piQUNKV0Fnc0VCVFdDR3dRR0Vqc0VCaEl4dTQvOEJRV0xCQVlDT3dRR0FqV1Ztd0NDV3dDQ1d3QkNhd0FoYzRzQVVsc0FVbGlyQUNGemdnc0FCU1dMQUdKYkFJSlVtd0F5V3dCU1ZKWUNDd1FGSllJUnV3QUZKWXNBWWxzQVlsc0FZbHNBWWxzQXNsc0FzbFNiQUVGeml3QmlXd0JpV3dCaVd3QmlXd0NpV3dDaVd3QnlXd2NTdXdCQmM0c0FRbHNBUWxzQVVsc0FjbHNBVWxzSEVyc0FJWE9CdXdCQ1d3QkNXNC84Q3dBaGM0V1ZsWklTRWhJU0VoSVNFdExMQUVKYkFESllld0F5V3dBeVdLSUxBQVVGZ2hzR1Vic0doWksyU3dCQ1d3QkNVR3NBUWxzQVFsU1NBZ1k3QURKU0JqVWJFQUF5VlVXMWdoSVNNaEJ4c2dZN0FDSlNCallTQ3dVeXVLWTdBRkpiQUZKWWV3QkNXd0JDWktzQUJRV0dWWnNBUW1JQUZHSXdCR3NBVW1JQUZHSXdCR3NBQVdBTEFBSTBnQnNBQWpTQUFnc0FFalNMQUNJMGdCSUxBQkkwaXdBaU5JSTdJQ0FBRUlJeml5QWdBQkNTTTRzUUlCQjdBQkZsa3RMQ01RRFF5S1l5T0tZMkJrdVVBQUJBQmpVRml3QURnYlBGa3RMTEFHSmJBSkpiQUpKYkFISnJCMkt5T3dBRlJZQlJzRVdiQUVKYkFHSnJCM0s3QUZKYkFGSnJBRkpiQUZKckIySzdBQVZGZ0ZHd1Jac0hjckxTeXdCeVd3Q2lXd0NpV3dDQ2F3ZGl1S3NBQlVXQVViQkZtd0JTV3dCeWF3ZHl1d0JpV3dCaWF3QmlXd0JpYXdkaXNJc0hjckxTeXdCeVd3Q2lXd0NpV3dDQ2F3ZGl1S2lnaXdCQ1d3Qmlhd2R5dXdCU1d3QlNhd0JTV3dCU2F3ZGl1d0FGUllCUnNFV2JCM0t5MHNzQWdsc0FzbHNBc2xzQWttc0hZcnNBUW1zQVFtQ0xBRkpiQUhKckIzSzdBR0piQUdKckFHSmJBR0pyQjJLd2l3ZHlzdExBT3dBeVd3QXlWS3NBUWxzQU1sU2dLd0JTV3dCU1pLc0FVbXNBVW1TckFFSm1PS2ltTmhMU3l4WFE0bFlDdXdEQ1lSc0FVbUVyQUtKVG13QnlVNXNBb2xzQW9sc0FrbHNId3JzQUJRc0FzbHNBZ2xzQW9sc0h3cnNBQlFWRml3QnlXd0N5V0hzQVFsc0FRbEM3QUtKUkN3Q1NYQnNBSWxzQUlsQzdBSEpSQ3dCaVhCRzdBSEpiQUxKYkFMSmJqLy83QjJLN0FFSmJBRUpRdXdCeVd3Q2lXd2R5dXdDaVd3Q0NXd0NDVzQvLyt3ZGl1d0FpV3dBaVVMc0FvbHNBY2xzSGNyV2JBS0pVYXdDaVZHWUxBSUpVYXdDQ1ZHWUxBR0piQUdKUXV3RENXd0RDV3dEQ1lnc0FCUVdDR3dhaHV3YkZrcnNBUWxzQVFsQzdBSkpiQUpKYkFKSmlDd0FGQllJYkJxRzdCc1dTc2pzQW9sUnJBS0pVWmdZYkFnWXlPd0NDVkdzQWdsUm1CaHNDQmpzUUVNSlZSWUJCc0ZXYkFLSmlBUXNBTWxPckFHSnJBR0pndXdCeVlnRUlvNnNRRUhKbFJZQkJzRldiQUZKaUFRc0FJbE9vcUtDeU1nRUNNNkxTd2pzQUZVV0xrQUFFQUFHN2hBQUxBQVdZcXdBVlJZdVFBQVFBQWJ1RUFBc0FCWnNIMHJMU3lLaWdnTmlyQUJWRmk1QUFCQUFCdTRRQUN3QUZtd2ZTc3RMQWl3QVZSWXVRQUFRQUFidUVBQXNBQlpEYkI5S3kwc3NBUW1zQVFtQ0Eyd0JDYXdCQ1lJRGJCOUt5MHNJQUZHSXdCR3NBcERzQXREaW1NalltRXRMTEFKSzdBR0pTNndCU1Y5eGJBR0piQUZKYkFFSlNDd0FGQllJYkJxRzdCc1dTdXdCU1d3QkNXd0F5VWdzQUJRV0NHd2FodXdiRmtyR0xBSUpiQUhKYkFHSmJBS0piQnZLN0FHSmJBRkpiQUVKaUN3QUZCWUliQm1HN0JvV1N1d0JTV3dCQ1d3QkNZZ3NBQlFXQ0d3Wmh1d2FGa3JWRmg5c0FRbEVMQURKY1d3QWlVUXNBRWx4YkFGSmlHd0JTWWhHN0FHSnJBRUpiQURKYkFJSnJCdksxbXhBQUpEVkZoOXNBSWxzSUlyc0FVbHNJSXJJQ0JwWWJBRVF3RWpZYkJnWUNCcFliQWdZU0N3Q0Nhd0NDYUtzQUlYT0lxS1lTQnBZV0d3QWhjNEd5RWhJU0ZaR0Mwc1MxS3hBUUpEVTFwWUl4QWdBVHdBUEJzaElWa3RMQ093QWlXd0FpVlRXQ0N3QkNWWVBCczVXYkFCWUxqLzZSeFpJU0VoTFN5d0FpVkhzQUlsUjFTS0lDQVFFYkFCWUlvZ0VyQUJZYkNGS3kwc3NBUWxSN0FDSlVkVUl5QVNzQUZoSXlDd0JpWWdJQkFSc0FGZ3NBWW1zSVVyaW9xd2hTc3RMTEFDUTFSWURBS0tTMU93QkNaTFVWcFlDamdiQ2lFaFdSc2hJU0VoV1Mwc3NKZ3JXQXdDaWt0VHNBUW1TMUZhV0FvNEd3b2hJVmtiSVNFaElWa3RMQ0N3QWtOVXNBRWp1QUJvSTNnaHNRQUNRN2dBWGlONUliQUNReU93SUNCY1dDRWhJYkFBdUFCTkhGbUtpaUNLSUlvanVCQUFZMVpZdUJBQVkxWllJU0Voc0FHNEFEQWNXUnNoV2JDQVlpQmNXQ0VoSWJBQXVBQWRIRmtqc0lCaUlGeFlJU0Voc0FDNEFBd2NXWXF3QVdHNC82c2NJeUV0TENDd0FrTlVzQUVqdUFDQkkzZ2hzUUFDUTdnQWR5TjVJYkVBQWtPS3NDQWdYRmdoSVNHNEFHY2NXWXFLSUlvZ2lpTzRFQUJqVmxpNEVBQmpWbGl3QkNhd0FWdXdCQ2F3QkNhd0JDWWJJU0VoSWJnQU9MQUFJeHhaR3lGWnNBUW1JN0NBWWlCY1dJcGNpbG9qSVNNaHVBQWVIRm1Lc0lCaUlGeFlJU0VqSWJnQURoeFpzQVFtc0FGaHVQK1RIQ01oTFE9PSkgZm9ybWF0KCd0cnVldHlwZScpO31AZm9udC1mYWNlIHtmb250LWZhbWlseTogJ2U5aHhKeXVXRzFjMTo6Ok9wZW4gU2Fucyc7Zm9udC1zdHlsZTogbm9ybWFsO2ZvbnQtd2VpZ2h0OiA3MDA7Zm9udC1zdHJldGNoOiBub3JtYWw7c3JjOiB1cmwoZGF0YTpmb250L3R0ZjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxBQUVBQUFBU0FRQUFCQUFnUjBSRlJnQjRBQWtBQUFIc0FBQUFMRWRRVDFORWRFeDFBQUFCUEFBQUFCNUhVMVZDN1o3eWpBQUFBbEFBQUFBNlQxTXZNcGRzZ3d3QUFBTTRBQUFBWUZOVVFWUmUrVUdoQUFBQzNBQUFBRnBqYldGd0F6a0RNQUFBQTVnQUFBQ2NZM1owSUQxSkxNZ0FBQVEwQUFBQS9HWndaMjNpR1o1YUFBQVRNQUFBRDVSbllYTndBQlVBSXdBQUFTd0FBQUFRWjJ4NVptQXhIbUFBQUFvd0FBQUpBR2hsWVdRYm5qUzZBQUFDR0FBQUFEWm9hR1ZoRGNnRWx3QUFBWndBQUFBa2FHMTBlRnVlQ1FvQUFBS01BQUFBVUd4dlkyRVhHQlRmQUFBQndBQUFBQ3B0WVhod0E1c1FwUUFBQVZ3QUFBQWdibUZ0WlRUOVlMQUFBQVV3QUFBQ1lIQnZjM1QvbndBeUFBQUJmQUFBQUNCd2NtVndoZjE3NlFBQUI1QUFBQUtmQUFFQUF3QUlBQW9BRFFBSC8vOEFEd0FCQUFBQUNnQWNBQndBQVVSR1RGUUFDQUFFQUFBQUFQLy9BQUFBQUFBQUFBRUFBQUFVQUpFQUZnQmZBQVVBQWdBUUFDOEFtZ0FBQXI0UGd3QURBQUVBQXdBQUFBQUFBUCtjQURJQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJBQUFJamYyb0FBQUpwdnVjL1RRSm5BQUJBQUFBQUFBQUFBQUFBQUFBQUFBQUZBQUFBQUFBQUFCTEFIb0F0QUQxQVVvQm1nSGJBbDRDaEFLWEFza0RCUU5YQTRrRDFnUU1CRUVFZ0FBQUFBRUFBZ0FpQUFBQUFBQUFBQTRBQVFBREFBQUFFQUFBQUJBQUFBQVFBQUVBQUFBQ0FBRUFBZ0FUQUFFQUFRQUFBQU1BUXM1UDk1cGZEenoxQUFzSUFBQUFBQURaek1MM0FBQUFBTjEzSmxIN25QM1RDWndJWWdBQkFBWUFBZ0FBQUFBQUFBQUJBQUFBQ2dBNEFEZ0FCVVJHVEZRQUpHTjVjbXdBSUdkeVpXc0FJR2hsWW5JQUlHeGhkRzRBSUFBQUFBQUFCQUFBQUFELy93QUFBQUFBQUFUTkFNRUNGQUFBQldBQXVBWHNBTGdIaXdDNEJsNEFkd1JvQUY0RTFRQldCTG9BWEFTRkFBWUNjUUNUQW5FQW9BVkNBS0FFOUFCY0JSQUFvQU9pQUtBRCtnQmNBM2tBTHdWQ0FKb0VqUUFBQUFFQUFRQUlBQU1BQUFBVUFBTUFBQUFzQUFKM1pIUm9BUUVBQUhkbmFIUUJBQUFCYVhSaGJBRWNBQUlBQmdBU0FCNEFBUUFBQUFJQkdnQmtBQUFBQVFBQkFBQUJCZ0s4QUFBQUF3QUNBQUlCSFFBQUFBQUFBUUFBQUFBQUJBU1JBcndBQlFBQUJUTUV6UUFBQUpvRk13VE5BQUFDelFBeUFwSUFBQUFBQUFBQUFBQUFBQURnQUFML1FBQWdHd0FBQUNnQUFBQUFSMDlQUndHZ0FBRC8vUWlOL2FnQUFBaitBb3NBQUFHZkFBQUFBQVJJQmJZQUFBQWdBQVFBQUFBQ0FBQUFBd0FBQUJRQUF3QUJBQUFBRkFBRUFJZ0FBQUFlQUJBQUF3QU9BQ0FBUWdCRUFFMEFUd0JUQUdFQVpRQm5BR2tBYkFCd0FIVUFlZi8vQUFBQUlBQkNBRVFBVFFCUEFGTUFZUUJsQUdjQWFRQnNBRzRBY2dCNS8vLy80Zi9BLzcvL3QvKzIvN1AvcHYrai82TC9vZitmLzU3L25mK2FBQUVBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBR0ZBQUxCYllBRmdXMkFCWUVVZ0FVQUFELzZnQUEvK3dBQVAvcS9oYi8vZ1cyQUJVQUFQL3JBQUFBcUFDcUFKWUFsZ0NtQUlJQWdnQ3JBSllBY1FDZkFJOEFxUUNtQU1nQWJRQ0tBSm9BYXdDT0FKc0FlZ0NrQUkwQk9nQ0VBSm9Bb2dDS0FPNEFoUUI0QVVnQWhRQjZBSm9BbmdDcUFMTUFsZ0J4QUlVQWtBQ1pBSjhBcEFDcEFMQUFtd0NtQUt3QXlBQnRBSG9BZ2dDS0FKb0Fhd0NDQUlvQWtnQ2JBS0FBcGdCNkFLTUFxd0N2QUlNQWpBQ1lBVG9BY1FDQUFJY0Fqd0NiQUtVQWZRQ0dBSXNBbFFDYkFLVUFyZ0R1QUhnQWZnQ0lBSk1CU0FCNUFJQUFoZ0NMQUpRQW1nQ25Cc0lEZWdVS0FCVC9PQUtlQTZjQUFBQU9BSzRBQXdBQkJBa0FBQUNzQVFZQUF3QUJCQWtBQVFBU0FQUUFBd0FCQkFrQUFnQUlBT3dBQXdBQkJBa0FBd0F3QUx3QUF3QUJCQWtBQkFBY0FLQUFBd0FCQkFrQUJRQWFBSVlBQXdBQkJBa0FCZ0FhQUd3QUF3QUJCQWtBRGdBMEFEZ0FBd0FCQkFrQkFBQU1BQ3dBQXdBQkJBa0JBUUFLQUNJQUF3QUJCQWtCQmdBSUFPd0FBd0FCQkFrQkdnQU1BQllBQXdBQkJBa0JIQUFNQUFvQUF3QUJCQWtCSFFBS0FBQUFVZ0J2QUcwQVlRQnVBRWtBZEFCaEFHd0FhUUJqQUU0QWJ3QnlBRzBBWVFCc0FGY0FhUUJrQUhRQWFBQlhBR1VBYVFCbkFHZ0FkQUJvQUhRQWRBQndBRG9BTHdBdkFITUFZd0J5QUdrQWNBQjBBSE1BTGdCekFHa0FiQUF1QUc4QWNnQm5BQzhBVHdCR0FFd0FUd0J3QUdVQWJnQlRBR0VBYmdCekFDMEFRZ0J2QUd3QVpBQldBR1VBY2dCekFHa0Fid0J1QUNBQU13QXVBREFBTUFBd0FFOEFjQUJsQUc0QUlBQlRBR0VBYmdCekFDQUFRZ0J2QUd3QVpBQXpBQzRBTUFBd0FEQUFPd0JIQUU4QVR3QkhBRHNBVHdCd0FHVUFiZ0JUQUdFQWJnQnpBQzBBUWdCdkFHd0FaQUJDQUc4QWJBQmtBRThBY0FCbEFHNEFJQUJUQUdFQWJnQnpBRU1BYndCd0FIa0FjZ0JwQUdjQWFBQjBBQ0FBTWdBd0FESUFNQUFnQUZRQWFBQmxBQ0FBVHdCd0FHVUFiZ0FnQUZNQVlRQnVBSE1BSUFCUUFISUFid0JxQUdVQVl3QjBBQ0FBUVFCMUFIUUFhQUJ2QUhJQWN3QWdBQ2dBYUFCMEFIUUFjQUJ6QURvQUx3QXZBR2NBYVFCMEFHZ0FkUUJpQUM0QVl3QnZBRzBBTHdCbkFHOEFid0JuQUd3QVpRQm1BRzhBYmdCMEFITUFMd0J2QUhBQVpRQnVBSE1BWVFCdUFITUFLVUQvZWp4NVZYbFpkamhQSDNVNC94OTBPS3NmY3piTkgzSTIveDl4TnFzZmNEZi9IMjgxL3g5dU0xNGZiVFAvSDJ3MHF4OXJOUDhmYWpML0gya3daeDlvTVA4Zlp6QnlIMll3UlI5bE1mOGZaREhOSDJNeFR4OWlMMTRmWVMvL0gyQXVUeDlmTHFzZlhpNy9IMTB1Tmg5Y0xmOGZXeXhlSDFvcy94OVpMR2NmV0N0ZUgxY3JreDlXSy84ZlZTci9IMVFwWGg5VEthc2ZVaW4vSDFFb2dCOVFLUDhmVHlpQUgwNG4veDlOSnY4ZlRDWC9IMHNsZ0I5S0pVQWZTU1QvSDBnai94OUhJcXNmUmlML0gwVWlYaDlFSVpNZlF5SC9IMElmelI5QkgvOGZRQitySHo4Zy94OCtJR2NmUFI3L0h6d2QveDg3SEhJZk9oei9IemtjVHg4M1FNSTJYaDgwTTA4Zk1UQXJIeWtvVHg4b0ZSc1pYQ2NiTFI4bUpVQWZKUTRhR1Z3a0dqRWZJeGtmSHlJWi94OGhIMmNmSUI5QUh4OGNHQlpjSGhnY0h4MFgveDhjRnY4Zkd6SVpIMXNZT0JZM1d4b3lHUjliRnpnV04xc1ZHVDRXLzFvVE1SSlZFVEVRVlJKWkVGa05NZ3hWQlRJRVZReFpCRmtQQkg4RTd3UURELzhPVlFzeUNsVUhNZ1pWQVY4QVZRNVpDbGtHV2M4Rzd3WUNBRmx2QUg4QXJ3RHZBQVFRQUFFSk1naFZBeklDVlFoWkFsa1BBbjhDN3dJREVBQURRRUFGQWJnQmtMQlVLMHU0Qi85U1M3QUpVRnV3QVlpd0pWT3dBWWl3UUZGYXNBYUlzQUJWV2x0WXNRRUJqbG1GalkwQUhVSkxzSkJUV0xJREFBQWRRbG14QWdKRFVWaXhCQU9PV1VKekFDc0FLeXNyYzNNQUszTUFLd0FyQUNzckt5c3Jjd0FyQUNzckt3QXJBQ3NyS3dFckFTc0JLd0VyQVNzQkt3QXJLd0VyS3lzQkt5c0FLd0FyS3lzQkt5c0JLd0FyS3dFckt5c0FLeXNyS3lzckt5c3JBU3NyS3lzQUt5c3JLeXNyS3lzckt5c3JBU3NyS3lzQUt5c3JLeXNyS3lzckt3RXJLeXNyS3lzckt3QXJLeXNyS3lzckt5c3JLeXNBS3lzWUFBQURBTGdBQUFUMEJiWUFFZ0FiQUNVQUgwQVBDUWdURXh3Y0FCMFNDSEliQUFKeUFDc3lLeklTT1M4ekVqazVNREVUSVNBRUZSUUdCZ2NWSGdJVkZBWUdJeUVCTXpJMk5UUW1JeU1SRVRNeU5qVTBKaVlqdUFISEFTUUJMRFZrU0VsMlI0THhwdjNkQVRhMGgyaDdoYVBLakc0d2NXTUZ0cVRPVTRaV0RRb1BTWXR6aGI1bEEzTlZVMVJKL2NYK2cyeGJObEl1QUFBQ0FMZ0FBQVYxQmJZQUNnQVVBQkMzRUFZQ2NoRUZDSElBS3pJck1qQXhBUlFDQkNNaEVTRXlCQklGTkNZbUl5TVJNekkyQlhXOS9wcjgvbUlCeStZQlVycit2bCs1aUtXRjQ5MEM2ZmYrdGFjRnRxUCt3Zk9pMFdUOFNQSUFBUUM0QUFBRzB3VzJBQmNBSEVBUEN3d1ZBUVFJRGdvQ2NoY1FDQWh5QUNzeU1pc3lFaGM1TURFaEFTTWVBaFVSSVJFaEFUTUJJUkVoRVRRMk5qY2pBUU1qL3FBSkFna0kvdXNCcGdGYUJnRnZBYWIrM3dVSUFnbitod1I3S2FXNlMvMVlCYmI3b2dSZStrb0N0RVcwb3luN2h3QUNBSGYvN0FYbkJjMEFFUUFnQUJDM0hRNERjaFlGQ1hJQUt6SXJNakF4QVJRQ0JnUWpJaVFtQWpVMEVpUXpNZ1FTQlJRV0ZqTXlOalkxTkFJaklnWUdCZWRVcS83NnM3UCsrcXRVbFFFMjcrNEJNNVg3MVUya2dvU2tTNnpGZzZWTkF0MnAvdXZJYTJ2SUFSYXE0d0ZSdXJyK3J1U1ozWGQzM1pubUFRaDMzUUFBQVFCZS8rd0VGd1hMQUM4QUhFQVFFQUFVTENnWkJnUWtIUU55REFRSmNnQXJNaXN5RWhjNU1ERUJGQVlHSXlJbUppY1JGaFl6TWpZMk5UUW1KaWN1QXpVME5qWXpNaFlYQnlZbUl5SUdCaFVVRmhZWEhnSUVGMzd4ckV5UmhUeG80RzVNWFNwS2dWRXplR3hGZU4rWWNzOXhaR1dnVXpwU0tqMTdYSENmVmdHV2dzQm9GQ2NkQVNBdVNpaEdMVGRPUkNjWVJXU1BaSU82WXpVeThTa3RKVU1zTkVkQ0xEVnptd0FDQUZiLzdBUTdCSFVBSFFBb0FDTkFFZ2NsSlFzZUV4TUFDd3R5QkFweUZ3QUhjZ0FyTWlzckVqa3ZNeEV6RVRNd01RRXlGaFVSSXljakRnSWpJaVltTlRRMk56YzFOQ1lqSWdZSEp6WTJBUWNHQmhVVUZqTXlOalVDYXVIdzFUc0lNR1NDWFdPZFd2cjZ3bHhTVVp4T1pWbmRBUmgybEhOU1FtS0hCSFhFeVAwWG1EeE1KRXlkZWJLcENRWXhXRkl1STg0dk52MlJCQVJpVUVZN2RHc0FBZ0JjLyt3RVlnUnpBQmNBSHdBWlFBd2JCZ1lBQ1JBTGNoZ0FCM0lBS3pJck1oSTVMek13TVFFeUZoWVZGU0VXRmpNeU5qY1ZCZ1lqSWlRbU5UUVNOaGNpQmdjaExnSUNiWnZnZXYwdkJaR0JhN0plVTdXQnFQNzlrNFh1b0ZsMUNRR3NBUzlkQkhOMzRxT1VnWk1zTE93cEpueit3Y1FCQllQWmNucEVhajRBQUFNQUJ2NFVCRzBFY3dBdkFEOEFTd0F0UUJZaURFQkFJQVk1T1NrcEFCb1hGMFlUQjNJd0FBOXlBQ3N5S3pJeUVUTVJPUzh6RWpuR01oRTVPVEF4QVNJbU5UUTJOeVltTlRRMk55WW1OVFEyTmpNeUZoWVhJUlVIRmhZVkZBWWpKaWNHQmhVVUZoWXpNeklXRlJRRUpUSTJOalUwSmlZakl5SUdCaFVVRmhNeU5qVTBKaU1pQmhVVUZnSG42dmQrZWk5R1NrWllaMnZOa3g5U1JRd0JocThZR1B2Zk5TOFhHQ1ZMT0w2NHdmNjUvdHR0blZReFkwMmVPRmswZVo1V1VGTlRWRlJUL2hTamsyV0lIUlJiTTBCVktTYW9jbnFyV2dnS0E1c3RKVlF2dE1rREJSSW9GaFlkRDU2WnhOakhLVXMwS2pFVUpFRXJQMGdEVUdwYlpXVmxaVnRxQUFBQ0FKTUFBQUhmQmhRQUF3QVBBQkMzQkFvREJuSUNDbklBS3l2T01qQXhBUkVoRVJNeUZoVVVCaU1pSmpVME5nSFIvcytaUkdKaVJFVmhZUVJlKzZJRVhnRzJQMVpWUVVGVlZqOEFBUUNnQUFBQjBRWVVBQU1BRExVQ0FISUJDbklBS3lzd01TRWhFU0VCMGY3UEFURUdGQUFCQUtBQUFBU29CSE1BRlFBYlFBNFBCbklGRGdweUVoRUpDUUFIY2dBck1oRXpNeXN5S3pBeEFUSVdGUkVoRVRRbUl5SUdGUkVoRVRNWE16NENBeHV6MnY3UFYxMk1adjdQNlNrUkpHdURCSFBEMS8wbkFvMTRlcjZ6L2ZJRVhvODZTQ0lBQWdCYy8rd0VtQVJ6QUJFQUlBQVF0eDRPQjNJV0JRdHlBQ3N5S3pJd01RRVVEZ0lqSWk0Q05UUVNOak15RmhJRkZCWVdNekkyTmpVMEppWWpJZ1lFbUV1UHlYNTJ4WkZQaFBTcG5mT0wvUHN3WmxKUlpTOHZabEo1YlFJeGpOaVZURXlWMkl5NkFRS0dodjcrdW02V1RFeVdibStUU3FZQUFnQ2cvaFFFdEFSekFCZ0FLQUFsUUJRU0JuSVJEbklMRENJaUJ3dHlGUlFaR1FBSGNnQXJNaEV6TXlzeUVUTXpLeXN3TVFFeUVoRVVBZ1lqSWlZbUp5TVdGaFVSSVJFekZ6TStBZ2NpQmdZSEZSUVdGak15TmpZMU5DWUREcjNwYnNKK1VYUlNIaEFJQ1A3UCtDc09IbFo1RWxCZUt3SXBZVlZHV2kxbUJIUCsydjdrdnY3OWhDbEJKU2hVS1A0OUJrcVJMVXd0OUVLRVpTRnNsazVPbDIya3BnQUJBS0FBQUFOM0JITUFGUUFaUUEwUEJuSU9DbklTRVFjSEFBZHlBQ3N5RVRNekt5c3dNUUV5RmhjREppWWpJZzRDRlJFaEVUTVhNejRDQXhBWFBSTVhEemNVTzI5WU0vN1A1eTBQSVdOL0JITUZCUDdpQlFVZVEyMVAvY2NFWHJ3NVh6a0FBUUJjLyt3RHJBUnpBQ29BR2tBT0RoSW5GZ1FFSUJrSGNnc0VDM0lBS3pJck1oSVhPVEF4QVJRR0JpTWlKaWMxRmhZek1qWTFOQ1ltSnk0Q05UUTJNeklXRndjbUppTWlCaFVVRmhZWEhnSURyR3ZVbm5XblZWdlJUMWxOSDJadGFZZEI4Y3BvdldSY1U1Tk1RMFFqWldKZmpFd0JUSEtkVVI0ai9DazFOU3NjTFRrdUxGcDdYNXVkS2k3Y0pDNGtKUnNxTXlnblZYMEFBQUVBTC8vc0F6Y0ZUQUFZQUIxQURnNFNEUlVWRUE4U0JuSUFCd3R5QUNzeUt6TE5NeEV6RWprd01TVXlOamNWQmdZaklpWW1OUkVqTlRjM014VWhGU0VSRkJZQ2R6SmZMekdSVm1TZlc1S29XTU1CT2Y3SFNkOFVEK01XSFVHaGtBSWJnV2JzN3VYOTVVQS9BQUVBbXYvc0JLSUVYZ0FYQUJ0QURoY05CbklEQkJJU0NBdHlBUXB5QUNzck1oRXpNeXN5TURFQkVTTW5JdzRDSXlJbUpqVVJJUkVVRmpNeU5qWTFFUVNpNmlrUUpHeUNSbml5WXdFeFZsNWRhaXNFWHZ1aWp6bElJbFcwa0FMWi9YTjRlbFdsZHdJT0FBQUJBQUQrRkFTTkJGNEFIUUFhUUE0R0hSd05CQUFZRVE5eURBQUdjZ0FyTWlzeUVoYzVNREVSSVJNZUFoY3pOalkzRXlFQkRnSWpJaVluTlJZV016STJOamMzQVU3VENnNEtBd1lHRlJEUEFVZitKeXVLczJzMFRCc1ZRQ05BWEQ0U0VnUmUvWXNlUGtJa05sNHVBblg3RTNTYlRnc0c4Z1VJTmxzMk4wQkttWmlYbG9lR2hZU0Rnb0dBZjM1OWZIdDZlWGgzZG5WMGMzSnhjRzl1Yld4cmFtbG9aMlpsWkdOaVlXQmZYbDFjVzFwWldGZFdWVlJUVVZCUFRrMU1TMHBKU0VkR0tCOFFDZ2tzQWJFTENrTWpRMlVLTFN3QXNRb0xReU5EQ3kwc0FiQUdRN0FIUTJVS0xTeXdUeXNnc0VCUldDRkxVbGhGUkJzaElWa2JJeUd3UUxBRUpVV3dCQ1ZGWVdTS1kxSllSVVFiSVNGWldTMHNBTEFIUTdBR1F3c3RMRXRUSTB0UldsZ2dSWXBnUkJzaElWa3RMRXRVV0NCRmltQkVHeUVoV1Mwc1MxTWpTMUZhV0RnYklTRlpMU3hMVkZnNEd5RWhXUzBzc0FKRFZGaXdSaXNiSVNFaElWa3RMTEFDUTFSWXNFY3JHeUVoSVZrdExMQUNRMVJZc0Vnckd5RWhJU0ZaTFN5d0FrTlVXTEJKS3hzaElTRlpMU3dqSUxBQVVJcUtaTEVBQXlWVVdMQkFHN0VCQXlWVVdMQUZRNHRac0U4cldTT3dZaXNqSVNOWVpWa3RMTEVJQUF3aFZHQkRMU3l4REFBTUlWUmdReTBzQVNCSHNBSkRJTGdRQUdLNEVBQmpWeU80QVFCaXVCQUFZMWRhV0xBZ1lHWlpTQzBzc1FBQ0piQUNKYkFDSlZPNEFEVWplTEFDSmJBQ0pXQ3dJR01nSUxBR0pTTmlVRmlLSWJBQllDTWJJQ0N3QmlVallsSllJeUd3QVdFYmlpRWpJU0JaV2JqL3dSeGdzQ0JqSXlFdExMRUNBRUt4SXdHSVViRkFBWWhUV2xpNEVBQ3dJSWhVV0xJQ0FRSkRZRUpac1NRQmlGRll1Q0FBc0VDSVZGaXlBZ0lDUTJCQ3NTUUJpRlJZc2dJZ0FrTmdRZ0JMQVV0U1dMSUNDQUpEWUVKWkc3aEFBTENBaUZSWXNnSUVBa05nUWxtNFFBQ3dnR080QVFDSVZGaXlBZ2dDUTJCQ1dibEFBQUVBWTdnQ0FJaFVXTElDRUFKRFlFSlpzU1lCaUZGWXVVQUFBZ0JqdUFRQWlGUllzZ0pBQWtOZ1FsbTVRQUFFQUdPNENBQ0lWRml5QW9BQ1EyQkNXYkVvQVloUldMbEFBQWdBWTdnUUFJaFVXTGtBQWdFQXNBSkRZRUpaV1ZsWldWbFpzUUFDUTFSWVFBb0ZRQWhBQ1VBTUFnMENHN0VCQWtOVVdMSUZRQWk2QVFBQUNRRUFzd3dCRFFFYnNZQUNRMUpZc2dWQUNMZ0JnTEVKUUJ1NEFRQ3dBa05TV0xJRlFBaTZBWUFBQ1FGQUc3Z0JnTEFDUTFKWXNnVkFDTGdDQUxFSlFCdXlCVUFJdWdFQUFBa0JBRmxaV2JoQUFMQ0FpRlc1UUFBQ0FHTzRCQUNJVlZwWXN3d0FEUUVic3d3QURRRlpXVmxDUWtKQ1FpMHNSYkVDVGlzanNFOHJJTEJBVVZnaFMxRllzQUlsUmJFQlRpdGdXUnNqUzFGWXNBTWxSU0JraW1Pd1FGTllzUUpPSzJBYklWa2JJVmxaUkMwc0lMQUFVQ0JZSTJVYkkxbXhGQlNLY0VXeEVCQkRTNHBEVVZwWXNFQWJzRThyV1NPeFlRWW1ZQ3VLV0xBRlE0dFpJMWhsV1NNUU9pMHNzQU1sU1dNalJtQ3dUeXNqc0FRbHNBUWxTYkFESldOV0lHQ3dZbUFyc0FNbElCQkdpa1pnc0NCallUb3RMTEFBRnJFQ0F5V3hBUVFsQVQ0QVByRUJBZ1lNc0FvalpVS3dDeU5Dc1FJREpiRUJCQ1VCUHdBL3NRRUNCZ3l3QmlObFFyQUhJMEt3QVJheEFBSkRWRmhGSTBVZ0dHbUtZeU5pSUNDd1FGQllaeHRtV1dHd0lHT3dRQ05oc0FRalFodXhCQUJDSVNGWkdBRXRMQ0JGc1FCT0swUXRMRXRSc1VCUEsxQmJXQ0JGc1FGT0t5Q0tpa1Fnc1VBRUptRmpZYkVCVGl0RUlSc2pJWXBGc1FGT0t5Q0tJMFJFV1Mwc1MxR3hRRThyVUZ0WVJTQ0tzRUJoWTJBYkl5RkZXYkVCVGl0RUxTd2pSU0NLUlNOaElHU3dRRkd3QkNVZ3NBQlRJN0JBVVZwYXNVQlBLMVJhV0lvTVpDTmtJMU5Zc1VCQWltRWdZMkViSUdOWkc0cFpZN0VDVGl0Z1JDMHNBUzBzQUMwc0JiRUxDa01qUTJVS0xTeXhDZ3RESTBNTEFpMHNzQUlsWTJhd0FpVzRJQUJpWUNOaUxTeXdBaVZqc0NCZ1pyQUNKYmdnQUdKZ0kySXRMTEFDSldObnNBSWx1Q0FBWW1BallpMHNzQUlsWTJhd0lHQ3dBaVc0SUFCaVlDTmlMU3dqU3JFQ1Rpc3RMQ05Lc1FGT0t5MHNJNHBLSTBWa3NBSWxaTEFDSldGa3NBTkRVbGdoSUdSWnNRSk9LeU93QUZCWVpWa3RMQ09LU2lORlpMQUNKV1N3QWlWaFpMQURRMUpZSVNCa1diRUJUaXNqc0FCUVdHVlpMU3dnc0FNbFNyRUNUaXVLRURzdExDQ3dBeVZLc1FGT0s0b1FPeTBzc0FNbHNBTWxpckJuSzRvUU95MHNzQU1sc0FNbGlyQm9LNG9RT3kwc3NBTWxSckFESlVaZ3NBUWxMckFFSmJBRUpiQUVKaUN3QUZCWUliQnFHN0JzV1N1d0F5VkdzQU1sUm1CaHNJQmlJSW9nRUNNNkl5QVFJem90TExBREpVZXdBeVZIWUxBRkpVZXdnR05oc0FJbHNBWWxTV01qc0FVbFNyQ0FZeUJZWWhzaFdiQUVKa1pnaWthS1JtQ3dJR05oTFN5d0JDYXdCQ1d3QkNXd0JDYXdiaXNnaWlBUUl6b2pJQkFqT2kwc0l5Q3dBVlJZSWJBQ0piRUNUaXV3Z0ZBZ1lGa2dZR0Fnc0FGUldDRWhHeUN3QlZGWUlTQm1ZYkJBSTJHeEFBTWxVTEFESmJBREpWQmFXQ0N3QXlWaGlsTllJYkFBV1JzaFdSdXdCMVJZSUdaaFpTTWhHeUVoc0FCWldWbXhBazRyTFN5d0FpV3dCQ1ZLc0FCVFdMQUFHNHFLSTRxd0FWbXdCQ1ZHSUdaaElMQUZKckFHSmttd0JTYXdCU2F3Y0NzallXV3dJR0FnWm1Hd0lHRmxMU3l3QWlWR0lJb2dzQUJRV0NHeEFrNHJHMFVqSVZsaFpiQUNKUkE3TFN5d0JDWWd1QUlBWWlDNEFnQmppaU5oSUxCZFlDdXdCU1VSaWhLS0lEbUtXTGtBWFJBQXNBUW1ZMVpnS3lNaElCQWdSaUN4QWs0ckkyRWJJeUVnaWlBUVNiRUNUaXRaT3kwc3VRQmRFQUN3Q1NWalZtQXJzQVVsc0FVbHNBVW1zRzByc1YwSEpXQXJzQVVsc0FVbHNBVWxzQVVsc0c4cnVRQmRFQUN3Q0NaalZtQXJJTEFBVWxpd1VDdXdCU1d3QlNXd0J5V3dCeVd3QlNXd2NTdXdBaGM0c0FCU3NBSWxzQUZTV2xpd0JDV3dCaVZKc0FNbHNBVWxTV0Fnc0VCU1dDRWJzQUJTV0NDd0FsUllzQVFsc0FRbHNBY2xzQWNsU2JBQ0Z6Z2JzQVFsc0FRbHNBUWxzQVlsU2JBQ0Z6aFpXVmxaV1NFaElTRWhMU3k1QUYwUUFMQUxKV05XWUN1d0J5V3dCeVd3QmlXd0JpV3dEQ1d3RENXd0NTV3dDQ1d3Yml1d0JCYzRzQWNsc0FjbHNBY21zRzByc0FRbHNBUWxzQVFtc0cwcnNGQXJzQVlsc0FZbHNBTWxzSEVyc0FVbHNBVWxzQU1sc0FJWE9DQ3dCaVd3QmlXd0JTV3djU3Rnc0FZbHNBWWxzQVFsWmJBQ0Z6aXdBaVd3QWlWZ0lMQkFVMWdoc0VCaEk3QkFZU01idVAvQVVGaXdRR0Fqc0VCZ0kxbFpzQWdsc0FnbHNBUW1zQUlYT0xBRkpiQUZKWXF3QWhjNElMQUFVbGl3QmlXd0NDVkpzQU1sc0FVbFNXQWdzRUJTV0NFYnNBQlNXTEFHSmJBR0piQUdKYkFHSmJBTEpiQUxKVW13QkJjNHNBWWxzQVlsc0FZbHNBWWxzQW9sc0FvbHNBY2xzSEVyc0FRWE9MQUVKYkFFSmJBRkpiQUhKYkFGSmJCeEs3QUNGemdic0FRbHNBUWx1UC9Bc0FJWE9GbFpXU0VoSVNFaElTRWhMU3l3QkNXd0F5V0hzQU1sc0FNbGlpQ3dBRkJZSWJCbEc3Qm9XU3Rrc0FRbHNBUWxCckFFSmJBRUpVa2dJR093QXlVZ1kxR3hBQU1sVkZ0WUlTRWpJUWNiSUdPd0FpVWdZMkVnc0ZNcmltT3dCU1d3QlNXSHNBUWxzQVFtU3JBQVVGaGxXYkFFSmlBQlJpTUFSckFGSmlBQlJpTUFSckFBRmdDd0FDTklBYkFBSTBnQUlMQUJJMGl3QWlOSUFTQ3dBU05Jc0FJalNDT3lBZ0FCQ0NNNHNnSUFBUWtqT0xFQ0FRZXdBUlpaTFN3akVBME1pbU1qaW1OZ1pMbEFBQVFBWTFCWXNBQTRHenhaTFN5d0JpV3dDU1d3Q1NXd0J5YXdkaXNqc0FCVVdBVWJCRm13QkNXd0JpYXdkeXV3QlNXd0JTYXdCU1d3QlNhd2RpdXdBRlJZQlJzRVdiQjNLeTBzc0FjbHNBb2xzQW9sc0FnbXNIWXJpckFBVkZnRkd3UlpzQVVsc0FjbXNIY3JzQVlsc0FZbXNBWWxzQVltc0hZckNMQjNLeTBzc0FjbHNBb2xzQW9sc0FnbXNIWXJpb29Jc0FRbHNBWW1zSGNyc0FVbHNBVW1zQVVsc0FVbXNIWXJzQUJVV0FVYkJGbXdkeXN0TExBSUpiQUxKYkFMSmJBSkpyQjJLN0FFSnJBRUpnaXdCU1d3Qnlhd2R5dXdCaVd3Qmlhd0JpV3dCaWF3ZGlzSXNIY3JMU3dEc0FNbHNBTWxTckFFSmJBREpVb0NzQVVsc0FVbVNyQUZKckFGSmtxd0JDWmppb3BqWVMwc3NWME9KV0Fyc0F3bUViQUZKaEt3Q2lVNXNBY2xPYkFLSmJBS0piQUpKYkI4SzdBQVVMQUxKYkFJSmJBS0piQjhLN0FBVUZSWXNBY2xzQXNsaDdBRUpiQUVKUXV3Q2lVUXNBa2x3YkFDSmJBQ0pRdXdCeVVRc0FZbHdSdXdCeVd3Q3lXd0N5VzQvLyt3ZGl1d0JDV3dCQ1VMc0FjbHNBb2xzSGNyc0FvbHNBZ2xzQWdsdVAvL3NIWXJzQUlsc0FJbEM3QUtKYkFISmJCM0sxbXdDaVZHc0FvbFJtQ3dDQ1ZHc0FnbFJtQ3dCaVd3QmlVTHNBd2xzQXdsc0F3bUlMQUFVRmdoc0dvYnNHeFpLN0FFSmJBRUpRdXdDU1d3Q1NXd0NTWWdzQUJRV0NHd2FodXdiRmtySTdBS0pVYXdDaVZHWUdHd0lHTWpzQWdsUnJBSUpVWmdZYkFnWTdFQkRDVlVXQVFiQlZtd0NpWWdFTEFESlRxd0JpYXdCaVlMc0FjbUlCQ0tPckVCQnlaVVdBUWJCVm13QlNZZ0VMQUNKVHFLaWdzaklCQWpPaTBzSTdBQlZGaTVBQUJBQUJ1NFFBQ3dBRm1Lc0FGVVdMa0FBRUFBRzdoQUFMQUFXYkI5S3kwc2lvb0lEWXF3QVZSWXVRQUFRQUFidUVBQXNBQlpzSDByTFN3SXNBRlVXTGtBQUVBQUc3aEFBTEFBV1Eyd2ZTc3RMTEFFSnJBRUpnZ05zQVFtc0FRbUNBMndmU3N0TENBQlJpTUFSckFLUTdBTFE0cGpJMkpoTFN5d0NTdXdCaVV1c0FVbGZjV3dCaVd3QlNXd0JDVWdzQUJRV0NHd2FodXdiRmtyc0FVbHNBUWxzQU1sSUxBQVVGZ2hzR29ic0d4Wkt4aXdDQ1d3QnlXd0JpV3dDaVd3Ynl1d0JpV3dCU1d3QkNZZ3NBQlFXQ0d3Wmh1d2FGa3JzQVVsc0FRbHNBUW1JTEFBVUZnaHNHWWJzR2haSzFSWWZiQUVKUkN3QXlYRnNBSWxFTEFCSmNXd0JTWWhzQVVtSVJ1d0JpYXdCQ1d3QXlXd0NDYXdieXRac1FBQ1ExUllmYkFDSmJDQ0s3QUZKYkNDS3lBZ2FXR3dCRU1CSTJHd1lHQWdhV0d3SUdFZ3NBZ21zQWdtaXJBQ0Z6aUtpbUVnYVdGaHNBSVhPQnNoSVNFaFdSZ3RMRXRTc1FFQ1ExTmFXQ01RSUFFOEFEd2JJU0ZaTFN3anNBSWxzQUlsVTFnZ3NBUWxXRHdiT1Ztd0FXQzQvK2tjV1NFaElTMHNzQUlsUjdBQ0pVZFVpaUFnRUJHd0FXQ0tJQkt3QVdHd2hTc3RMTEFFSlVld0FpVkhWQ01nRXJBQllTTWdzQVltSUNBUUViQUJZTEFHSnJDRks0cUtzSVVyTFN5d0FrTlVXQXdDaWt0VHNBUW1TMUZhV0FvNEd3b2hJVmtiSVNFaElWa3RMTENZSzFnTUFvcExVN0FFSmt0UldsZ0tPQnNLSVNGWkd5RWhJU0ZaTFN3Z3NBSkRWTEFCSTdnQWFDTjRJYkVBQWtPNEFGNGplU0d3QWtNanNDQWdYRmdoSVNHd0FMZ0FUUnhaaW9vZ2lpQ0tJN2dRQUdOV1dMZ1FBR05XV0NFaEliQUJ1QUF3SEZrYklWbXdnR0lnWEZnaElTR3dBTGdBSFJ4Wkk3Q0FZaUJjV0NFaEliQUF1QUFNSEZtS3NBRmh1UCtySENNaExTd2dzQUpEVkxBQkk3Z0FnU040SWJFQUFrTzRBSGNqZVNHeEFBSkRpckFnSUZ4WUlTRWh1QUJuSEZtS2lpQ0tJSW9qdUJBQVkxWll1QkFBWTFaWXNBUW1zQUZic0FRbXNBUW1zQVFtR3lFaElTRzRBRGl3QUNNY1dSc2hXYkFFSmlPd2dHSWdYRmlLWElwYUl5RWpJYmdBSGh4WmlyQ0FZaUJjV0NFaEl5RzRBQTRjV2JBRUpyQUJZYmova3h3aklTMD0pIGZvcm1hdCgndHJ1ZXR5cGUnKTt9XV0+PC9zdHlsZT48L3N2Zz4=","mediatype":"image/svg+xml"}],"install":{"spec":{"clusterPermissions":[{"rules":[{"apiGroups":[""],"resources":["configmaps","events","secrets","services"],"verbs":["create","delete","get","list","patch","update","watch"]},{"apiGroups":["apps"],"resources":["statefulsets"],"verbs":["create","delete","get","list","patch","update","watch"]},{"apiGroups":["coordination.k8s.io"],"resources":["leases"],"verbs":["create","delete","get","list","patch","update","watch"]},{"apiGroups":["opstreelabs.in"],"resources":["mongodbclusters"],"verbs":["create","delete","get","list","patch","update","watch"]},{"apiGroups":["opstreelabs.in"],"resources":["mongodbclusters/finalizers"],"verbs":["update"]},{"apiGroups":["opstreelabs.in"],"resources":["mongodbclusters/status"],"verbs":["get","patch","update"]},{"apiGroups":["opstreelabs.in"],"resources":["mongodbs"],"verbs":["create","delete","get","list","patch","update","watch"]},{"apiGroups":["opstreelabs.in"],"resources":["mongodbs/finalizers"],"verbs":["update"]},{"apiGroups":["opstreelabs.in"],"resources":["mongodbs/status"],"verbs":["get","patch","update"]},{"apiGroups":["policy"],"resources":["poddisruptionbudgets"],"verbs":["create","delete","get","list","patch","update","watch"]}],"serviceAccountName":"mongodb-operator"}],"deployments":[{"name":"mongodb-operator","spec":{"replicas":1,"selector":{"matchLabels":{"control-plane":"mongodb-operator"}},"template":{"metadata":{"labels":{"control-plane":"mongodb-operator"}},"spec":{"containers":[{"args":["--leader-elect"],"command":["/manager"],"image":"quay.io/opstree/mongodb-operator:v0.3.0","imagePullPolicy":"Always","livenessProbe":{"httpGet":{"path":"/healthz","port":8081},"initialDelaySeconds":15,"periodSeconds":20},"name":"manager","readinessProbe":{"httpGet":{"path":"/readyz","port":8081},"initialDelaySeconds":5,"periodSeconds":10},"resources":{"limits":{"cpu":"200m","memory":"400Mi"},"requests":{"cpu":"200m","memory":"400Mi"}},"securityContext":{"allowPrivilegeEscalation":false}}],"securityContext":{"runAsNonRoot":true},"serviceAccountName":"mongodb-operator","terminationGracePeriodSeconds":10}}}}],"permissions":[]},"strategy":"deployment"},"installModes":[{"supported":true,"type":"OwnNamespace"},{"supported":true,"type":"SingleNamespace"},{"supported":true,"type":"MultiNamespace"},{"supported":true,"type":"AllNamespaces"}],"keywords":["DevOps","Kubernetes","Database","MongoDB","Opstree","Operatork","Cloud Native"],"labels":{},"links":[{"name":"Blog","url":"https://blog.opstree.com"},{"name":"GitHub","url":"https://github.com/opstree"},{"name":"Opensource","url":"https://opstree.github.io"},{"name":"Documentation","url":"https://ot-mongodb-operator.netlify.app/"},{"name":"Buildpiper","url":"https://buildpiper.io"}],"maintainers":[{"email":"abhishek.dubey@opstree.com","name":"Abhishek Dubey"},{"email":"sandeep@opstree.com","name":"Sandeep Rawat"}],"maturity":"alpha","minKubeVersion":"1.17.0","provider":{"name":"Opstree Solutions"},"replaces":"","selector":{"matchLabels":{}},"skips":[],"version":"0.3.0"}}
  - type: olm.bundle.object
    value:
      data: {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.7.0"},"creationTimestamp":null,"name":"mongodbclusters.opstreelabs.in"},"spec":{"group":"opstreelabs.in","names":{"kind":"MongoDBCluster","listKind":"MongoDBClusterList","plural":"mongodbclusters","singular":"mongodbcluster"},"scope":"Namespaced","versions":[{"name":"v1alpha1","schema":{"openAPIV3Schema":{"description":"MongoDBCluster is the Schema for the mongodbclusters API","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"MongoDBClusterSpec defines the desired state of MongoDBCluster","properties":{"clusterSize":{"format":"int32","type":"integer"},"enableMongoArbiter":{"type":"boolean"},"kubernetesConfig":{"description":"KubernetesConfig will be the JSON struct for Basic MongoDB Config","properties":{"image":{"type":"string"},"imagePullPolicy":{"description":"PullPolicy describes a policy for if/when to pull a container image","type":"string"},"imagePullSecret":{"type":"string"},"mongoAffinity":{"description":"Affinity is a group of affinity scheduling rules.","properties":{"nodeAffinity":{"description":"Describes node affinity scheduling rules for the pod.","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.","items":{"description":"An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).","properties":{"preference":{"description":"A node selector term, associated with the corresponding weight.","properties":{"matchExpressions":{"description":"A list of node selector requirements by node's labels.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchFields":{"description":"A list of node selector requirements by node's fields.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"}},"type":"object"},"weight":{"description":"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["preference","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.","properties":{"nodeSelectorTerms":{"description":"Required. A list of node selector terms. The terms are ORed.","items":{"description":"A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.","properties":{"matchExpressions":{"description":"A list of node selector requirements by node's labels.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchFields":{"description":"A list of node selector requirements by node's fields.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"}},"type":"object"},"type":"array"}},"required":["nodeSelectorTerms"],"type":"object"}},"type":"object"},"podAffinity":{"description":"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.","items":{"description":"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)","properties":{"podAffinityTerm":{"description":"Required. A pod affinity term, associated with the corresponding weight.","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"weight":{"description":"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["podAffinityTerm","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.","items":{"description":"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"type":"array"}},"type":"object"},"podAntiAffinity":{"description":"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.","items":{"description":"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)","properties":{"podAffinityTerm":{"description":"Required. A pod affinity term, associated with the corresponding weight.","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"weight":{"description":"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["podAffinityTerm","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.","items":{"description":"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"type":"array"}},"type":"object"}},"type":"object"},"nodeSelector":{"additionalProperties":{"type":"string"},"type":"object"},"priorityClassName":{"type":"string"},"resources":{"description":"ResourceRequirements describes the compute resource requirements.","properties":{"limits":{"additionalProperties":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$","x-kubernetes-int-or-string":true},"description":"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/","type":"object"},"requests":{"additionalProperties":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$","x-kubernetes-int-or-string":true},"description":"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/","type":"object"}},"type":"object"},"securityContext":{"description":"PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.","properties":{"fsGroup":{"description":"A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume.","format":"int64","type":"integer"},"fsGroupChangePolicy":{"description":"fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.","type":"string"},"runAsGroup":{"description":"The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.","format":"int64","type":"integer"},"runAsNonRoot":{"description":"Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.","type":"boolean"},"runAsUser":{"description":"The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.","format":"int64","type":"integer"},"seLinuxOptions":{"description":"The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.","properties":{"level":{"description":"Level is SELinux level label that applies to the container.","type":"string"},"role":{"description":"Role is a SELinux role label that applies to the container.","type":"string"},"type":{"description":"Type is a SELinux type label that applies to the container.","type":"string"},"user":{"description":"User is a SELinux user label that applies to the container.","type":"string"}},"type":"object"},"seccompProfile":{"description":"The seccomp options to use by the containers in this pod.","properties":{"localhostProfile":{"description":"localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\".","type":"string"},"type":{"description":"type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.","type":"string"}},"required":["type"],"type":"object"},"supplementalGroups":{"description":"A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.","items":{"format":"int64","type":"integer"},"type":"array"},"sysctls":{"description":"Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.","items":{"description":"Sysctl defines a kernel parameter to be set","properties":{"name":{"description":"Name of a property to set","type":"string"},"value":{"description":"Value of a property to set","type":"string"}},"required":["name","value"],"type":"object"},"type":"array"},"windowsOptions":{"description":"The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.","properties":{"gmsaCredentialSpec":{"description":"GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.","type":"string"},"gmsaCredentialSpecName":{"description":"GMSACredentialSpecName is the name of the GMSA credential spec to use.","type":"string"},"hostProcess":{"description":"HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.","type":"boolean"},"runAsUserName":{"description":"The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.","type":"string"}},"type":"object"}},"type":"object"},"tolerations":{"items":{"description":"The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.","properties":{"effect":{"description":"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.","type":"string"},"key":{"description":"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.","type":"string"},"operator":{"description":"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.","type":"string"},"tolerationSeconds":{"description":"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.","format":"int64","type":"integer"},"value":{"description":"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.","type":"string"}},"type":"object"},"type":"array"}},"required":["image"],"type":"object"},"mongoDBAdditionalConfig":{"type":"string"},"mongoDBMonitoring":{"description":"MongoDBMonitoring is the JSON struct for monitoring MongoDB","properties":{"enableExporter":{"type":"boolean"},"image":{"type":"string"},"imagePullPolicy":{"description":"PullPolicy describes a policy for if/when to pull a container image","type":"string"},"resources":{"description":"ResourceRequirements describes the compute resource requirements.","properties":{"limits":{"additionalProperties":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$","x-kubernetes-int-or-string":true},"description":"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/","type":"object"},"requests":{"additionalProperties":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$","x-kubernetes-int-or-string":true},"description":"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/","type":"object"}},"type":"object"}},"required":["image"],"type":"object"},"mongoDBSecurity":{"description":"MongoDBSecurity is the JSON struct for MongoDB security configuration","properties":{"mongoDBAdminUser":{"type":"string"},"secretRef":{"description":"ExistingPasswordSecret is the struct to access the existing secret","properties":{"key":{"type":"string"},"name":{"type":"string"}},"type":"object"}},"required":["mongoDBAdminUser","secretRef"],"type":"object"},"podDisruptionBudget":{"description":"MongoDBPodDisruptionBudget defines the struct for MongoDB cluster","properties":{"enabled":{"type":"boolean"},"maxUnavailable":{"format":"int32","type":"integer"},"minAvailable":{"format":"int32","type":"integer"}},"type":"object"},"storage":{"description":"Storage is the inteface to add pvc and pv support in MongoDB","properties":{"accessModes":{"items":{"type":"string"},"type":"array"},"storageClass":{"type":"string"},"storageSize":{"type":"string"}},"type":"object"}},"required":["clusterSize","kubernetesConfig","mongoDBSecurity"],"type":"object"},"status":{"description":"MongoDBClusterStatus defines the observed state of MongoDBCluster","type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
  - type: olm.bundle.object
    value:
      data: {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.7.0"},"creationTimestamp":null,"name":"mongodbs.opstreelabs.in"},"spec":{"group":"opstreelabs.in","names":{"kind":"MongoDB","listKind":"MongoDBList","plural":"mongodbs","singular":"mongodb"},"scope":"Namespaced","versions":[{"name":"v1alpha1","schema":{"openAPIV3Schema":{"description":"MongoDB is the Schema for the mongodbs API","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"MongoDBSpec defines the desired state of MongoDB","properties":{"kubernetesConfig":{"description":"KubernetesConfig will be the JSON struct for Basic MongoDB Config","properties":{"image":{"type":"string"},"imagePullPolicy":{"description":"PullPolicy describes a policy for if/when to pull a container image","type":"string"},"imagePullSecret":{"type":"string"},"mongoAffinity":{"description":"Affinity is a group of affinity scheduling rules.","properties":{"nodeAffinity":{"description":"Describes node affinity scheduling rules for the pod.","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.","items":{"description":"An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).","properties":{"preference":{"description":"A node selector term, associated with the corresponding weight.","properties":{"matchExpressions":{"description":"A list of node selector requirements by node's labels.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchFields":{"description":"A list of node selector requirements by node's fields.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"}},"type":"object"},"weight":{"description":"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["preference","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.","properties":{"nodeSelectorTerms":{"description":"Required. A list of node selector terms. The terms are ORed.","items":{"description":"A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.","properties":{"matchExpressions":{"description":"A list of node selector requirements by node's labels.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchFields":{"description":"A list of node selector requirements by node's fields.","items":{"description":"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"The label key that the selector applies to.","type":"string"},"operator":{"description":"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.","type":"string"},"values":{"description":"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"}},"type":"object"},"type":"array"}},"required":["nodeSelectorTerms"],"type":"object"}},"type":"object"},"podAffinity":{"description":"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.","items":{"description":"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)","properties":{"podAffinityTerm":{"description":"Required. A pod affinity term, associated with the corresponding weight.","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"weight":{"description":"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["podAffinityTerm","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.","items":{"description":"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"type":"array"}},"type":"object"},"podAntiAffinity":{"description":"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).","properties":{"preferredDuringSchedulingIgnoredDuringExecution":{"description":"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.","items":{"description":"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)","properties":{"podAffinityTerm":{"description":"Required. A pod affinity term, associated with the corresponding weight.","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"weight":{"description":"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.","format":"int32","type":"integer"}},"required":["podAffinityTerm","weight"],"type":"object"},"type":"array"},"requiredDuringSchedulingIgnoredDuringExecution":{"description":"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.","items":{"description":"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running","properties":{"labelSelector":{"description":"A label query over a set of resources, in this case pods.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaceSelector":{"description":"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"namespaces":{"description":"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"","items":{"type":"string"},"type":"array"},"topologyKey":{"description":"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.","type":"string"}},"required":["topologyKey"],"type":"object"},"type":"array"}},"type":"object"}},"type":"object"},"nodeSelector":{"additionalProperties":{"type":"string"},"type":"object"},"priorityClassName":{"type":"string"},"resources":{"description":"ResourceRequirements describes the compute resource requirements.","properties":{"limits":{"additionalProperties":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$","x-kubernetes-int-or-string":true},"description":"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/","type":"object"},"requests":{"additionalProperties":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$","x-kubernetes-int-or-string":true},"description":"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/","type":"object"}},"type":"object"},"securityContext":{"description":"PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.","properties":{"fsGroup":{"description":"A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume.","format":"int64","type":"integer"},"fsGroupChangePolicy":{"description":"fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.","type":"string"},"runAsGroup":{"description":"The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.","format":"int64","type":"integer"},"runAsNonRoot":{"description":"Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.","type":"boolean"},"runAsUser":{"description":"The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.","format":"int64","type":"integer"},"seLinuxOptions":{"description":"The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.","properties":{"level":{"description":"Level is SELinux level label that applies to the container.","type":"string"},"role":{"description":"Role is a SELinux role label that applies to the container.","type":"string"},"type":{"description":"Type is a SELinux type label that applies to the container.","type":"string"},"user":{"description":"User is a SELinux user label that applies to the container.","type":"string"}},"type":"object"},"seccompProfile":{"description":"The seccomp options to use by the containers in this pod.","properties":{"localhostProfile":{"description":"localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\".","type":"string"},"type":{"description":"type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.","type":"string"}},"required":["type"],"type":"object"},"supplementalGroups":{"description":"A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.","items":{"format":"int64","type":"integer"},"type":"array"},"sysctls":{"description":"Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.","items":{"description":"Sysctl defines a kernel parameter to be set","properties":{"name":{"description":"Name of a property to set","type":"string"},"value":{"description":"Value of a property to set","type":"string"}},"required":["name","value"],"type":"object"},"type":"array"},"windowsOptions":{"description":"The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.","properties":{"gmsaCredentialSpec":{"description":"GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.","type":"string"},"gmsaCredentialSpecName":{"description":"GMSACredentialSpecName is the name of the GMSA credential spec to use.","type":"string"},"hostProcess":{"description":"HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.","type":"boolean"},"runAsUserName":{"description":"The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.","type":"string"}},"type":"object"}},"type":"object"},"tolerations":{"items":{"description":"The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.","properties":{"effect":{"description":"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.","type":"string"},"key":{"description":"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.","type":"string"},"operator":{"description":"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.","type":"string"},"tolerationSeconds":{"description":"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.","format":"int64","type":"integer"},"value":{"description":"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.","type":"string"}},"type":"object"},"type":"array"}},"required":["image"],"type":"object"},"mongoDBAdditionalConfig":{"type":"string"},"mongoDBMonitoring":{"description":"MongoDBMonitoring is the JSON struct for monitoring MongoDB","properties":{"enableExporter":{"type":"boolean"},"image":{"type":"string"},"imagePullPolicy":{"description":"PullPolicy describes a policy for if/when to pull a container image","type":"string"},"resources":{"description":"ResourceRequirements describes the compute resource requirements.","properties":{"limits":{"additionalProperties":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$","x-kubernetes-int-or-string":true},"description":"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/","type":"object"},"requests":{"additionalProperties":{"anyOf":[{"type":"integer"},{"type":"string"}],"pattern":"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$","x-kubernetes-int-or-string":true},"description":"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/","type":"object"}},"type":"object"}},"required":["image"],"type":"object"},"mongoDBSecurity":{"description":"MongoDBSecurity is the JSON struct for MongoDB security configuration","properties":{"mongoDBAdminUser":{"type":"string"},"secretRef":{"description":"ExistingPasswordSecret is the struct to access the existing secret","properties":{"key":{"type":"string"},"name":{"type":"string"}},"type":"object"}},"required":["mongoDBAdminUser","secretRef"],"type":"object"},"storage":{"description":"Storage is the inteface to add pvc and pv support in MongoDB","properties":{"accessModes":{"items":{"type":"string"},"type":"array"},"storageClass":{"type":"string"},"storageSize":{"type":"string"}},"type":"object"}},"required":["kubernetesConfig","mongoDBSecurity"],"type":"object"},"status":{"description":"MongoDBStatus defines the observed state of MongoDB","type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]},"status":{"acceptedNames":{"kind":"","plural":""},"conditions":[],"storedVersions":[]}}
relatedImages:
  - image: quay.io/openshift-community-operators/mongodb-operator@sha256:be8d0d3f7c497354980ffb34f4f504a40be391fcf99786637b216949ae10ec28
    name: ""
  - image: quay.io/opstree/mongodb-operator:v0.3.0
    name: ""
schema: olm.bundle
