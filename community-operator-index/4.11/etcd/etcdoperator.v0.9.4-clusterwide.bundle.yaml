image: quay.io/openshift-community-operators/etcd@sha256:3bc855e2b0eb9950854f6e36f4d697eb424a9dbe6e331ff3cf7924a0d8e3ecab
name: etcdoperator.v0.9.4-clusterwide
package: etcd
properties:
  - type: olm.gvk
    value:
      group: etcd.database.coreos.com
      kind: EtcdBackup
      version: v1beta2
  - type: olm.gvk
    value:
      group: etcd.database.coreos.com
      kind: EtcdCluster
      version: v1beta2
  - type: olm.gvk
    value:
      group: etcd.database.coreos.com
      kind: EtcdRestore
      version: v1beta2
  - type: olm.package
    value:
      packageName: etcd
      version: 0.9.4-clusterwide
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsibmFtZSI6ImV0Y2RiYWNrdXBzLmV0Y2QuZGF0YWJhc2UuY29yZW9zLmNvbSJ9LCJzcGVjIjp7Imdyb3VwIjoiZXRjZC5kYXRhYmFzZS5jb3Jlb3MuY29tIiwibmFtZXMiOnsia2luZCI6IkV0Y2RCYWNrdXAiLCJsaXN0S2luZCI6IkV0Y2RCYWNrdXBMaXN0IiwicGx1cmFsIjoiZXRjZGJhY2t1cHMiLCJzaW5ndWxhciI6ImV0Y2RiYWNrdXAifSwic2NvcGUiOiJOYW1lc3BhY2VkIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MWJldGEyIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7InR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7InR5cGUiOiJvYmplY3QiLCJ4LWt1YmVybmV0ZXMtcHJlc2VydmUtdW5rbm93bi1maWVsZHMiOnRydWV9LCJzdGF0dXMiOnsidHlwZSI6Im9iamVjdCIsIngta3ViZXJuZXRlcy1wcmVzZXJ2ZS11bmtub3duLWZpZWxkcyI6dHJ1ZX19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWV9XX19
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsibmFtZSI6ImV0Y2RjbHVzdGVycy5ldGNkLmRhdGFiYXNlLmNvcmVvcy5jb20ifSwic3BlYyI6eyJncm91cCI6ImV0Y2QuZGF0YWJhc2UuY29yZW9zLmNvbSIsIm5hbWVzIjp7ImtpbmQiOiJFdGNkQ2x1c3RlciIsImxpc3RLaW5kIjoiRXRjZENsdXN0ZXJMaXN0IiwicGx1cmFsIjoiZXRjZGNsdXN0ZXJzIiwic2hvcnROYW1lcyI6WyJldGNkY2x1cyIsImV0Y2QiXSwic2luZ3VsYXIiOiJldGNkY2x1c3RlciJ9LCJzY29wZSI6Ik5hbWVzcGFjZWQiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxYmV0YTIiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7InByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsidHlwZSI6Im9iamVjdCIsIngta3ViZXJuZXRlcy1wcmVzZXJ2ZS11bmtub3duLWZpZWxkcyI6dHJ1ZX0sInN0YXR1cyI6eyJ0eXBlIjoib2JqZWN0IiwieC1rdWJlcm5ldGVzLXByZXNlcnZlLXVua25vd24tZmllbGRzIjp0cnVlfX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZX1dfX0=
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsibmFtZSI6ImV0Y2RyZXN0b3Jlcy5ldGNkLmRhdGFiYXNlLmNvcmVvcy5jb20ifSwic3BlYyI6eyJncm91cCI6ImV0Y2QuZGF0YWJhc2UuY29yZW9zLmNvbSIsIm5hbWVzIjp7ImtpbmQiOiJFdGNkUmVzdG9yZSIsImxpc3RLaW5kIjoiRXRjZFJlc3RvcmVMaXN0IiwicGx1cmFsIjoiZXRjZHJlc3RvcmVzIiwic2luZ3VsYXIiOiJldGNkcmVzdG9yZSJ9LCJzY29wZSI6Ik5hbWVzcGFjZWQiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxYmV0YTIiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7InByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsidHlwZSI6Im9iamVjdCIsIngta3ViZXJuZXRlcy1wcmVzZXJ2ZS11bmtub3duLWZpZWxkcyI6dHJ1ZX0sInN0YXR1cyI6eyJ0eXBlIjoib2JqZWN0IiwieC1rdWJlcm5ldGVzLXByZXNlcnZlLXVua25vd24tZmllbGRzIjp0cnVlfX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZX1dfX0=
relatedImages:
  - image: quay.io/coreos/etcd-operator@sha256:66a37fd61a06a43969854ee6d3e21087a98b93838e284a6086b13917f96b0d9b
    name: ""
  - image: quay.io/openshift-community-operators/etcd@sha256:3bc855e2b0eb9950854f6e36f4d697eb424a9dbe6e331ff3cf7924a0d8e3ecab
    name: ""
schema: olm.bundle
