image: quay.io/openshift-community-operators/ack-rds-controller@sha256:e8ba826e2e7e2ddc64582cebb13568985172828a1eb33bd68df3ab399b1df58f
name: ack-rds-controller.v0.0.27
package: ack-rds-controller
properties:
  - type: olm.gvk
    value:
      group: rds.services.k8s.aws
      kind: DBCluster
      version: v1alpha1
  - type: olm.gvk
    value:
      group: rds.services.k8s.aws
      kind: DBClusterParameterGroup
      version: v1alpha1
  - type: olm.gvk
    value:
      group: rds.services.k8s.aws
      kind: DBInstance
      version: v1alpha1
  - type: olm.gvk
    value:
      group: rds.services.k8s.aws
      kind: DBParameterGroup
      version: v1alpha1
  - type: olm.gvk
    value:
      group: rds.services.k8s.aws
      kind: DBSubnetGroup
      version: v1alpha1
  - type: olm.gvk
    value:
      group: rds.services.k8s.aws
      kind: GlobalCluster
      version: v1alpha1
  - type: olm.package
    value:
      packageName: ack-rds-controller
      version: 0.0.27
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoiYWNrLXJkcy1tZXRyaWNzLXNlcnZpY2UifSwic3BlYyI6eyJwb3J0cyI6W3sibmFtZSI6Im1ldHJpY3Nwb3J0IiwicG9ydCI6ODA4MCwicHJvdG9jb2wiOiJUQ1AiLCJ0YXJnZXRQb3J0IjoiaHR0cCJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXIifSwidHlwZSI6Ik5vZGVQb3J0In0sInN0YXR1cyI6eyJsb2FkQmFsYW5jZXIiOnt9fX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJhY2stcmRzLXJlYWRlciJ9LCJydWxlcyI6W3siYXBpR3JvdXBzIjpbInJkcy5zZXJ2aWNlcy5rOHMuYXdzIl0sInJlc291cmNlcyI6WyJkYmNsdXN0ZXJzIiwiZGJjbHVzdGVycGFyYW1ldGVyZ3JvdXBzIiwiZGJpbnN0YW5jZXMiLCJkYnBhcmFtZXRlcmdyb3VwcyIsImRic3VibmV0Z3JvdXBzIiwiZ2xvYmFsY2x1c3RlcnMiXSwidmVyYnMiOlsiZ2V0IiwibGlzdCIsIndhdGNoIl19XX0=
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJSb2xlIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJhY2stcmRzLXdyaXRlciJ9LCJydWxlcyI6W3siYXBpR3JvdXBzIjpbInJkcy5zZXJ2aWNlcy5rOHMuYXdzIl0sInJlc291cmNlcyI6WyJkYmNsdXN0ZXJzIiwiZGJjbHVzdGVycGFyYW1ldGVyZ3JvdXBzIiwiZGJpbnN0YW5jZXMiLCJkYnBhcmFtZXRlcmdyb3VwcyIsImRic3VibmV0Z3JvdXBzIiwiZ2xvYmFsY2x1c3RlcnMiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsicmRzLnNlcnZpY2VzLms4cy5hd3MiXSwicmVzb3VyY2VzIjpbImRiY2x1c3RlcnMiLCJkYmNsdXN0ZXJwYXJhbWV0ZXJncm91cHMiLCJkYmluc3RhbmNlcyIsImRicGFyYW1ldGVyZ3JvdXBzIiwiZGJzdWJuZXRncm91cHMiLCJnbG9iYWxjbHVzdGVycyJdLCJ2ZXJicyI6WyJnZXQiLCJwYXRjaCIsInVwZGF0ZSJdfV19
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjcuMCJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRic3VibmV0Z3JvdXBzLnJkcy5zZXJ2aWNlcy5rOHMuYXdzIn0sInNwZWMiOnsiZ3JvdXAiOiJyZHMuc2VydmljZXMuazhzLmF3cyIsIm5hbWVzIjp7ImtpbmQiOiJEQlN1Ym5ldEdyb3VwIiwibGlzdEtpbmQiOiJEQlN1Ym5ldEdyb3VwTGlzdCIsInBsdXJhbCI6ImRic3VibmV0Z3JvdXBzIiwic2luZ3VsYXIiOiJkYnN1Ym5ldGdyb3VwIn0sInNjb3BlIjoiTmFtZXNwYWNlZCIsInZlcnNpb25zIjpbeyJuYW1lIjoidjFhbHBoYTEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiREJTdWJuZXRHcm91cCBpcyB0aGUgU2NoZW1hIGZvciB0aGUgREJTdWJuZXRHcm91cHMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEQlN1Ym5ldEdyb3VwU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIERCU3VibmV0R3JvdXAuIFxuIENvbnRhaW5zIHRoZSBkZXRhaWxzIG9mIGFuIEFtYXpvbiBSRFMgREIgc3VibmV0IGdyb3VwLiBcbiBUaGlzIGRhdGEgdHlwZSBpcyB1c2VkIGFzIGEgcmVzcG9uc2UgZWxlbWVudCBpbiB0aGUgRGVzY3JpYmVEQlN1Ym5ldEdyb3VwcyBhY3Rpb24uIiwicHJvcGVydGllcyI6eyJkZXNjcmlwdGlvbiI6eyJkZXNjcmlwdGlvbiI6IlRoZSBkZXNjcmlwdGlvbiBmb3IgdGhlIERCIHN1Ym5ldCBncm91cC4iLCJ0eXBlIjoic3RyaW5nIn0sIm5hbWUiOnsiZGVzY3JpcHRpb24iOiJUaGUgbmFtZSBmb3IgdGhlIERCIHN1Ym5ldCBncm91cC4gVGhpcyB2YWx1ZSBpcyBzdG9yZWQgYXMgYSBsb3dlcmNhc2Ugc3RyaW5nLiBcbiBDb25zdHJhaW50czogXG4gICAgKiBNdXN0IGNvbnRhaW4gbm8gbW9yZSB0aGFuIDI1NSBsZXR0ZXJzLCBudW1iZXJzLCBwZXJpb2RzLCB1bmRlcnNjb3JlcywgICAgc3BhY2VzLCBvciBoeXBoZW5zLiBcbiAgICAqIE11c3Qgbm90IGJlIGRlZmF1bHQuIFxuICAgICogRmlyc3QgY2hhcmFjdGVyIG11c3QgYmUgYSBsZXR0ZXIuIFxuIEV4YW1wbGU6IG15ZGJzdWJuZXRncm91cCIsInR5cGUiOiJzdHJpbmcifSwic3VibmV0SURzIjp7ImRlc2NyaXB0aW9uIjoiVGhlIEVDMiBTdWJuZXQgSURzIGZvciB0aGUgREIgc3VibmV0IGdyb3VwLiIsIml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sInRhZ3MiOnsiZGVzY3JpcHRpb24iOiJUYWdzIHRvIGFzc2lnbiB0byB0aGUgREIgc3VibmV0IGdyb3VwLiIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiTWV0YWRhdGEgYXNzaWduZWQgdG8gYW4gQW1hem9uIFJEUyByZXNvdXJjZSBjb25zaXN0aW5nIG9mIGEga2V5LXZhbHVlIHBhaXIuIiwicHJvcGVydGllcyI6eyJrZXkiOnsidHlwZSI6InN0cmluZyJ9LCJ2YWx1ZSI6eyJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9fSwicmVxdWlyZWQiOlsiZGVzY3JpcHRpb24iLCJuYW1lIiwic3VibmV0SURzIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiREJTdWJuZXRHcm91cFN0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEQlN1Ym5ldEdyb3VwIiwicHJvcGVydGllcyI6eyJhY2tSZXNvdXJjZU1ldGFkYXRhIjp7ImRlc2NyaXB0aW9uIjoiQWxsIENScyBtYW5hZ2VkIGJ5IEFDSyBoYXZlIGEgY29tbW9uIGBTdGF0dXMuQUNLUmVzb3VyY2VNZXRhZGF0YWAgbWVtYmVyIHRoYXQgaXMgdXNlZCB0byBjb250YWluIHJlc291cmNlIHN5bmMgc3RhdGUsIGFjY291bnQgb3duZXJzaGlwLCBjb25zdHJ1Y3RlZCBBUk4gZm9yIHRoZSByZXNvdXJjZSIsInByb3BlcnRpZXMiOnsiYXJuIjp7ImRlc2NyaXB0aW9uIjoiQVJOIGlzIHRoZSBBbWF6b24gUmVzb3VyY2UgTmFtZSBmb3IgdGhlIHJlc291cmNlLiBUaGlzIGlzIGEgZ2xvYmFsbHktdW5pcXVlIGlkZW50aWZpZXIgYW5kIGlzIHNldCBvbmx5IGJ5IHRoZSBBQ0sgc2VydmljZSBjb250cm9sbGVyIG9uY2UgdGhlIGNvbnRyb2xsZXIgaGFzIG9yY2hlc3RyYXRlZCB0aGUgY3JlYXRpb24gb2YgdGhlIHJlc291cmNlIE9SIHdoZW4gaXQgaGFzIHZlcmlmaWVkIHRoYXQgYW4gXCJhZG9wdGVkXCIgcmVzb3VyY2UgKGEgcmVzb3VyY2Ugd2hlcmUgdGhlIEFSTiBhbm5vdGF0aW9uIHdhcyBzZXQgYnkgdGhlIEt1YmVybmV0ZXMgdXNlciBvbiB0aGUgQ1IpIGV4aXN0cyBhbmQgbWF0Y2hlcyB0aGUgc3VwcGxpZWQgQ1IncyBTcGVjIGZpZWxkIHZhbHVlcy4gVE9ETyh2aWphdEApOiBGaW5kIGEgYmV0dGVyIHN0cmF0ZWd5IGZvciByZXNvdXJjZXMgdGhhdCBkbyBub3QgaGF2ZSBBUk4gaW4gQ3JlYXRlT3V0cHV0UmVzcG9uc2UgaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3MtY29udHJvbGxlcnMtazhzL2lzc3Vlcy8yNzAiLCJ0eXBlIjoic3RyaW5nIn0sIm93bmVyQWNjb3VudElEIjp7ImRlc2NyaXB0aW9uIjoiT3duZXJBY2NvdW50SUQgaXMgdGhlIEFXUyBBY2NvdW50IElEIG9mIHRoZSBhY2NvdW50IHRoYXQgb3ducyB0aGUgYmFja2VuZCBBV1Mgc2VydmljZSBBUEkgcmVzb3VyY2UuIiwidHlwZSI6InN0cmluZyJ9LCJyZWdpb24iOnsiZGVzY3JpcHRpb24iOiJSZWdpb24gaXMgdGhlIEFXUyByZWdpb24gaW4gd2hpY2ggdGhlIHJlc291cmNlIGV4aXN0cyBvciB3aWxsIGV4aXN0LiIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbIm93bmVyQWNjb3VudElEIiwicmVnaW9uIl0sInR5cGUiOiJvYmplY3QifSwiY29uZGl0aW9ucyI6eyJkZXNjcmlwdGlvbiI6IkFsbCBDUlMgbWFuYWdlZCBieSBBQ0sgaGF2ZSBhIGNvbW1vbiBgU3RhdHVzLkNvbmRpdGlvbnNgIG1lbWJlciB0aGF0IGNvbnRhaW5zIGEgY29sbGVjdGlvbiBvZiBgYWNrdjFhbHBoYTEuQ29uZGl0aW9uYCBvYmplY3RzIHRoYXQgZGVzY3JpYmUgdGhlIHZhcmlvdXMgdGVybWluYWwgc3RhdGVzIG9mIHRoZSBDUiBhbmQgaXRzIGJhY2tlbmQgQVdTIHNlcnZpY2UgQVBJIHJlc291cmNlIiwiaXRlbXMiOnsiZGVzY3JpcHRpb24iOiJDb25kaXRpb24gaXMgdGhlIGNvbW1vbiBzdHJ1Y3QgdXNlZCBieSBhbGwgQ1JEcyBtYW5hZ2VkIGJ5IEFDSyBzZXJ2aWNlIGNvbnRyb2xsZXJzIHRvIGluZGljYXRlIHRlcm1pbmFsIHN0YXRlcyAgb2YgdGhlIENSIGFuZCBpdHMgYmFja2VuZCBBV1Mgc2VydmljZSBBUEkgcmVzb3VyY2UiLCJwcm9wZXJ0aWVzIjp7Imxhc3RUcmFuc2l0aW9uVGltZSI6eyJkZXNjcmlwdGlvbiI6Ikxhc3QgdGltZSB0aGUgY29uZGl0aW9uIHRyYW5zaXRpb25lZCBmcm9tIG9uZSBzdGF0dXMgdG8gYW5vdGhlci4iLCJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm1lc3NhZ2UiOnsiZGVzY3JpcHRpb24iOiJBIGh1bWFuIHJlYWRhYmxlIG1lc3NhZ2UgaW5kaWNhdGluZyBkZXRhaWxzIGFib3V0IHRoZSB0cmFuc2l0aW9uLiIsInR5cGUiOiJzdHJpbmcifSwicmVhc29uIjp7ImRlc2NyaXB0aW9uIjoiVGhlIHJlYXNvbiBmb3IgdGhlIGNvbmRpdGlvbidzIGxhc3QgdHJhbnNpdGlvbi4iLCJ0eXBlIjoic3RyaW5nIn0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IlN0YXR1cyBvZiB0aGUgY29uZGl0aW9uLCBvbmUgb2YgVHJ1ZSwgRmFsc2UsIFVua25vd24uIiwidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7ImRlc2NyaXB0aW9uIjoiVHlwZSBpcyB0aGUgdHlwZSBvZiB0aGUgQ29uZGl0aW9uIiwidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsic3RhdHVzIiwidHlwZSJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJzdWJuZXRHcm91cFN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IlByb3ZpZGVzIHRoZSBzdGF0dXMgb2YgdGhlIERCIHN1Ym5ldCBncm91cC4iLCJ0eXBlIjoic3RyaW5nIn0sInN1Ym5ldHMiOnsiZGVzY3JpcHRpb24iOiJDb250YWlucyBhIGxpc3Qgb2YgU3VibmV0IGVsZW1lbnRzLiIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiVGhpcyBkYXRhIHR5cGUgaXMgdXNlZCBhcyBhIHJlc3BvbnNlIGVsZW1lbnQgZm9yIHRoZSBEZXNjcmliZURCU3VibmV0R3JvdXBzIG9wZXJhdGlvbi4iLCJwcm9wZXJ0aWVzIjp7InN1Ym5ldEF2YWlsYWJpbGl0eVpvbmUiOnsiZGVzY3JpcHRpb24iOiJDb250YWlucyBBdmFpbGFiaWxpdHkgWm9uZSBpbmZvcm1hdGlvbi4gXG4gVGhpcyBkYXRhIHR5cGUgaXMgdXNlZCBhcyBhbiBlbGVtZW50IGluIHRoZSBPcmRlcmFibGVEQkluc3RhbmNlT3B0aW9uIGRhdGEgdHlwZS4iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXRJZGVudGlmaWVyIjp7InR5cGUiOiJzdHJpbmcifSwic3VibmV0T3V0cG9zdCI6eyJkZXNjcmlwdGlvbiI6IkEgZGF0YSB0eXBlIHRoYXQgcmVwcmVzZW50cyBhbiBPdXRwb3N0LiBcbiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBSRFMgb24gT3V0cG9zdHMsIHNlZSBBbWF6b24gUkRTIG9uIEFtYXpvbiBXZWIgU2VydmljZXMgT3V0cG9zdHMgKGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BbWF6b25SRFMvbGF0ZXN0L1VzZXJHdWlkZS9yZHMtb24tb3V0cG9zdHMuaHRtbCkgaW4gdGhlIEFtYXpvbiBSRFMgVXNlciBHdWlkZS4iLCJwcm9wZXJ0aWVzIjp7ImFybiI6eyJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In0sInN1Ym5ldFN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJzdXBwb3J0ZWROZXR3b3JrVHlwZXMiOnsiZGVzY3JpcHRpb24iOiJUaGUgbmV0d29yayB0eXBlIG9mIHRoZSBEQiBzdWJuZXQgZ3JvdXAuIFxuIFZhbGlkIHZhbHVlczogXG4gICAgKiBJUFY0IFxuICAgICogRFVBTCBcbiBBIERCU3VibmV0R3JvdXAgY2FuIHN1cHBvcnQgb25seSB0aGUgSVB2NCBwcm90b2NvbCBvciB0aGUgSVB2NCBhbmQgdGhlIElQdjYgcHJvdG9jb2xzIChEVUFMKS4gXG4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBXb3JraW5nIHdpdGggYSBEQiBpbnN0YW5jZSBpbiBhIFZQQyAoaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FtYXpvblJEUy9sYXRlc3QvVXNlckd1aWRlL1VTRVJfVlBDLldvcmtpbmdXaXRoUkRTSW5zdGFuY2VpbmFWUEMuaHRtbCkgaW4gdGhlIEFtYXpvbiBSRFMgVXNlciBHdWlkZS4iLCJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJ2cGNJRCI6eyJkZXNjcmlwdGlvbiI6IlByb3ZpZGVzIHRoZSBWcGNJZCBvZiB0aGUgREIgc3VibmV0IGdyb3VwLiIsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
  - type: olm.bundle.object
    value:
      data: 
relatedImages:
  - image: public.ecr.aws/aws-controllers-k8s/rds-controller:v0.0.27
    name: ""
  - image: quay.io/openshift-community-operators/ack-rds-controller@sha256:e8ba826e2e7e2ddc64582cebb13568985172828a1eb33bd68df3ab399b1df58f
    name: ""
schema: olm.bundle
